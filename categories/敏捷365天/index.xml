<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>敏捷365天 on 捷伴行Agile</title>
    <link>https://www.agilewalker.com/categories/%E6%95%8F%E6%8D%B7365%E5%A4%A9/</link>
    <description>Recent content in 敏捷365天 on 捷伴行Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2023 捷伴行Agile</copyright>
    <lastBuildDate>Sat, 02 Apr 2022 02:54:46 +0000</lastBuildDate><atom:link href="https://www.agilewalker.com/categories/%E6%95%8F%E6%8D%B7365%E5%A4%A9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「视频」敏捷开发基础，质量内建，帮助组织启动敏捷转型</title>
      <link>https://www.agilewalker.com/agile-foundation-transformation/</link>
      <pubDate>Sat, 02 Apr 2022 02:54:46 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-foundation-transformation/</guid>
      <description>[https://player.youku.com/embed/XNTg1Njc1NzE4NA]</description>
    </item>
    
    <item>
      <title>敏捷软件开发工作估算方法 – 故事点和工时</title>
      <link>https://www.agilewalker.com/storypoint-man-hour/</link>
      <pubDate>Thu, 03 Feb 2022 06:13:32 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/storypoint-man-hour/</guid>
      <description>你如果无法度量它，就无法管理它
&amp;ndash; 彼得.德鲁克
软件开发组织工作估算的思考 我们人类天生不善于估算，要不就是过于乐观，要不就是过于悲观，就是很少有现实主义。尤其是我们软件开发行业，有太多的未知数：技术一直在变；新需求不断涌现；任务之间或人与人之间错综复杂的依赖关系；还有外界环境存在的各种因素。工作量主要与三方面因素有关，任务的规模，任务的复杂度以及完成该任务的人员能力水平。
为什么要做估算？ 第一个原因是帮助我们做出周全的决定。有了估算，我们就知道软件产品清单上的需求是否能在指定的期限实现或需要多久才能完全实现。
第二个原因是设定目标。如果我们给自己制定了一个最后期限，就会全力以赴确保达到目标，当然，也有完全不靠谱的时候。当然，估算和设定目标毫无疑问可以帮助我们保持专注并取得最大成果。
一句话：了解团队在软件开发过程中的客户价值产能、组织投入的成本并做出更合理的交付计划和客户报价。
理解故事点和工时 在很长时间里，工时（人天/人时）是研发团队中的指标，能直接反映出：完成某项工作需要几个人做多长的时间。这一指标确实让许多研发团队获得了评估项目人力成本的基础数据。
然而在实际操作中，开发者的工作几乎无法被标准量化。不同的开发人员，其能力本就有所差距；更重要的是，每一项具体的开发任务，它的规模、复杂度和风险等可能有着巨大差异。仅仅统计工时，并不能反映团队的开发速率。因此，在敏捷开发中，提出了应当用故事点来估算工作量。
1个故事点是1个标准单位的工作量，是对工作规模的相对度量，它估算出的是对于完成此需求所要的开发规模的大小。这个单位并不能直接指代该项需求需要的开发时间。工时是绝对的度量单位，故事点是相对的度量单位。举个例子：在同一个餐桌上，同样是一碗饭，小强10分钟就能吃完了，小美需要20分钟才能吃饭。在这个例子中1碗饭就是标准单位，每个人吃饭的效能是不同的，小强20分钟可以完成2个标准单位，而小美只能完成一个标准单位。在软件开发行业，同样的用户故事，交给不同的人实现，用不同的时间，就表明每个人的产能不同。故事点作为标准单位更客观地衡量了团队产出的客户价值，而工时却无法反映这点。
价值评估和成本评估可以并行 前几天与公司的同事和领导就故事点和工时，这两种敏捷软件开发的工作量度量方式有过一些探讨，在适应公司现状的敏捷开发过程中，我认为故事点和工时两种反映工作量的方式，可以结合使用。对于用户故事（功能需求）的评估，我们用故事点这种相对的规模估算方式，估算过程更容易，更客观，成本更低，故事点可以用来反映迭代中团队的客户价值产能；对于从用户故事分解出来的每个子任务，我们可以请具体开发人员评估任务工时，结合开发人员的单位时间成本，工时可以用来反映组织投入迭代的直接成本。这样既可以遵循敏捷Scrum的实践方法，又可以与公司软件项目以成本管理为目的工时估算对齐。
评估对象 评估方式 采用概念 度量单位 说明 优势 用户故事（需求） 集体评估 价值评估 故事点 story point 用来计算交付的客户价值 数据生成快速，客观；团队共同参与更加全面；绩效的依据 开发任务(用户故事拆分子任务) 个人评估、Leader 核验 成本评估/工时评估 人时或天 man hour/ man day 用来计算组织的投入成本 便于组织的成本管理 用户故事估算方法（PO创建，价值评估） PO、开发团队（含测试/UI同事）共同参与需求澄清 敏捷开发中的估算扑克方式集体估算（故事点） 迭代中根据实际情况商议调整 开发任务估算方法（团队创建，成本评估） 开发团队（含测试/UI同事）共同跨职能分解每个用户故事到若干个具体任务 团队每个人对自己领取的具体任务，根据经验估算并登记（工时） 开发Leader最终核验 故事点评估的优势 故事点标准客观，帮助推动跨职能行为沟通，即团队从UI到DB（任务层面仍然可以估算个人工时） 每人都要参与估算，沟通更加充分，需求理解的更加清晰，提前暴露产品设计的不确定性，避免需求盲点 促进了团队成员之间的融合和互相理解，有助于工作中更好的跨职能协作以及合作完成用户故事开发 相对大小更容易评估，工时却不易评估，如果需要，后期可以转换成团队的平均工时 规模是客观的，故事点估算不会衰减，随着团队的成长，能体现团队迭代速率即产能的变化 通过有足够的迭代或冲刺，可以衡量出团队的开发速率，做出更合理的交付计划和客户报价 小结一下 故事点和工时并不互斥。它们一个用于估算工作复杂度，一个用于估算工作时长。故事点最重要的作用，是团队在产能上形成了一个参考基准。一旦团队通过几次迭代捕捉到了产能容量，就可以此为参考，与产品方、业务方达成交付效率的共识。这样既能避免拍脑袋给计划又给不准的局面，还可用数据可视化地呈现研发团队的效能变化。如果组织把记录的工时当做产出或人效的管理方式，说明组织对目标的管理缺乏掌控或缺乏信心。敏捷开发摒弃只衡量工时的思维，因为工时只代表着一种成本，我们要关注完成需求的速度和质量就足够了，这才是唯一重要的事情。此外，敏捷团队还应该在合作开发的同时，思考如何真正集中力量少量多批次持续输出优先级更高的用户故事。
最后，不论采用故事点还是工时又或者两者结合，都需要每个团队不断探索更适合自己的方式，找到能有效估算并呈现自身产能的最佳道路。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>谈我们的研发运维一体化交付模式</title>
      <link>https://www.agilewalker.com/about-devops-delivery/</link>
      <pubDate>Mon, 27 Dec 2021 14:36:34 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/about-devops-delivery/</guid>
      <description>物有本末，事有始终，知所先后，则近道矣。
&amp;ndash; 《大学》
[TOC]
一、说在前面的话 本文旨在记录下本人与同事，同行，以及相关领导关于研发运维一体化，架构优化与创新问题所进行的无数对话，讨论的内容，通过这些对话与讨论，很多人为本文提供了有价值的输入。
在经历了产品研发团队工作1年多的时间和开发运维团队工作6个月的时间之后，想起应该说下我们研发运维一体化技术那点事儿。每个人从不同的视角看的感受肯定不尽相同，通过本文分享下我的理解，希望大家在此有一个彼此碰撞的机会，产生更好的思考。
任何成功的架构都是适合企业自身的架构。形成过程中的挫折再所难免，非常感谢公司管理层看到我们不断的改进，交付向好的趋势，坚定地给予了团队足够的技术战略支持和耐心。CTO带领我们大家在一年半时间里，通过无数次碰撞，碰壁，不断修正中形成了当前的研发运维一体化的技术架构和协作模式，并且还在持续地改进中，印证了那句话：成功不是终点，失败也不是末日。
业务目标必须是驱动IT变革的原因，而原因又会驱动IT变革的方式。面对客户的业务，要求我们产品交付过程要更加优化，要更加敏捷，适应变化，对客户要更具有响应力，利用更少的资源做更多的事情，更高效、更快速、更高质的交付；我们要创新，吸引并发展客户群体，针对市场，灵活应变。这些是变革需求产生的驱动力，是实现开发运维实施效益的工作动机。
二、产品研发运维架构 当今，基于微服务、容器化和DevOps的云原生应用架构得到了越来越多的关注。 微服务通过将复杂的系统进行解耦从而使业务功能的修改和增加变得更加容易。专注业务的微服务技术，将一组提供少量功能的服务集合整合到一起，这些系统的整体功能来自多个服务，基于此架构能最小化团队间显示协作的需求，最大化独立部署服务的能力；容器技术提供了很好的横向扩/缩容与自愈能力；保驾护航的DevOps方法，源于敏捷开发，保证了所有环境的一致性，持续集成、持续交付（每次交付都是随时可以部署的）、持续监控、持续反馈，更加有条不紊。 产品研发运维一体化工具集（图），带标记的是我们实际在用的开源工具，产品研发中心在用的工具链覆盖软件产品研发运维的全生命周期的主要方面，工具来自免费的开源社区，目的是促进良好的协同、高效的交付、不断改进工程能力，目前主要致力于以下几方面： &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224155225202.png&amp;quot; alt=&amp;quot;image-20211224155225202&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 流水化集成和部署：自助式的图形化发布操作直观简易，开发人员可以有更多的时间在业务实现上，减少代码提交和部署之间的时间；配合敏捷迭代，每天N次快速发布。 镜像化管理和交付：客户发布有镜像仓库，本地研发有镜像管理；图形化管理镜像和容器更高效，镜像保证所有环境的一致性；大幅提升环境的运维的效率。 可视化监控和告警：研发环境监控、客户应用监控、应用日志监控、故障即时告警；在客户发现问题前响应问题，团队再也不会后知后觉，缩短响应周期，提升客户服务质量。 代码化基础架构：Jenkins脚本，负责代码集成与构建，发布本地研发环境或推送镜像仓库；Docker脚本，负责应用镜像的生成，容器运行；Shell脚本，负责客户生产环境部署，数据和文件备份，数据迁移，收集监控数据；这些代码消除了重复命令行操作，提升运维效率，代码生成一致可维护的基础架构环境，帮助开发人员专注于业务代码实现。 文档化操作流程：包括基础环境搭建，应用环境部署，业务数据备份，租户数据迁移；研发交付流程更清晰，节省人员工作交接的时间，避免人员单点故障，提高知识传递的效率；目录化也帮助操作过程的标准化。 产品研发运维一体化架构（图）在我们产品研发交付中，利用已经建立的工具链，遵循开发运维的基础架构即代码的方式，以统一的配置和代码，产生一致的服务基础环境，提供给客户业务应用服务，根据部署不同环境的迁移标准，自动化部署到开发环境，测试环境，准生产环境和客户生产环境。 &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224151744758.png&amp;quot; alt=&amp;quot;image-20211224151744758&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 实现持续交付所需的架构转换使功能变更得以按照小批次进行交付，这些变更包括开发到运维完整周期的所有代码，配置，基础设施，数据，脚本，部署流程等的变更。 架构支持多钟交付方式，其中以云端SAAS交付和客户私有化交付两种方式最常用，SAAS交付通过持续交付流水线快速完成敏捷迭代后的更新，私有化交付是通过持续交付流水线完成客户应用镜像并上传云端镜像仓库，然后从客户服务器进行授权的镜像拉取，在线部署，十分便捷。 我们对业务环境的应用服务进行实时健康状态监控和日志记录，并会对生产环境的业务数据以及文件进行全量和增量备份。 三、产品研发运维协作 产品研发运维活动协作（图）中我们每个团队都有一定的工作边界，这种边界不会泾渭分明，基于组织战略，在交付活动中是共同融合的，这样可以保障工作中的衔接更加顺畅，不会有断层，彼此都了解相关的工作情况，能让更多的人有面对问题的知识储备。我们并不以团队职能划分进行协作，而是以交付活动本身聚合各个团队的能力进行跨职能的敏捷团队协作，目的是尽早发现并解决交付的质量问题。 * 产品研发活动前移对接客户需求；质量保证活动前移，一方面，测试人员在需求上前移与项目交付合作接近客户，另一方面，开发人员在开发中引入测试驱动开发，让质量工作前移，从代码编写的过程中就开始；开发运维即DevOps活动顾名思义，在工作中前移对接开发，意味着不仅需要治理研发的环境，还要对研发出来的软件产品架构和代码有一定的了解，以便更好的完成运维工作。 * 项目交付活动是最接近客户价值的活动，而客户价值活动是和我们的业务视角对齐，产品研发到测试再到项目实施，开发运维工作贯穿始终，研发运维一体化就是用敏捷开发方法论结合DevOps技术实践，助力研发交付流水线的提升，开发和运维都希望能尽快迭代，不需要约定某个特定的时间，流水线时刻可以接受发布任务。如果迭代开发，我们每两周发布一次生产环境，我们每天都要有若干次的测试环境部署，更多次的开发环境部署。协同交付和持续反馈，是实现持续改进和质量保障的必要条件。&amp;lt;/ol&amp;gt; ### 四、带给研发的价值 1. 良好的代码版本管理（图），可以随时为部署任一版本的客户进行热修复 * 持续部署流水线，允许开发人员一键自助式部署到被授权的任一环境，如果在研发环境中，仅需几分钟即可完成一次部署；我们的私有镜像仓库，允许研发或运维人员从远程为客户环境进行自助式的私有化部署，仅仅需要执行1个部署脚本，业务应用服务的便会自动更新，排除网络影响，每个微服务组件的发布仅需1-3分钟，整个业务应用的发布在15分钟内可以完成。可以很快对迭代功能进行在部署环境下的验证。 * 可视化的监控，包括环境监控、应用监控、系统监控，团队可以快速获得反馈，随时改进，更少的意外问题和救火行为，意味着我们有时间做更多的技术架构提升和产品功能迭代。 * 研发环境、业务环境的数据安全，定时自动备份，产品研发数据备份，研发基础环境数据备份，客户业务数据备份，保护了我们的无形资产。 * 基础设施即代码，开发应用程序一样开发基础设施代码，运维代码和研发代码都在版本控制管理之下。上线一个虚拟环境或一个环境的新版本，就变成执行脚本的过程，脚本可以创建并提供一个或一组镜像，完成从操作系统到应用服务集的部署与配置。过去几个小时甚至几天才能完成的工作，现在只要几分钟。&amp;lt;/ol&amp;gt; ### 五、带给组织的价值 1. 专业的技术框架和研发流程，更具有行业的影响力和承诺客户的信心。 2. 根据组织的业务计划，有持续可评估的交付计划，能够敏捷以及快速响应客户反馈，成功交付。 3. 更高效的主动运维服务，持续监控，团队可以在问题影响客户业务之前，及时解决，保障客户满意度。 4. 更低的交付成本和运维成本，组织持续投入的DevOps活动，从而确保标准化、流程化的业务应用和研发环境治理，无需任何定制和人工重复的浪费，更加精益。 5. 敏捷文化的方法和技术落地，有效的传播，让更多的团队从中受益。 ### 六、带给客户的价值 1. 从容应对快速变化的业务需求，可以做到对业务的无感知更新，保障业务连续性。整个热部署、快速部署过程从变更的源代码提交到客户业务人员手中的可以使用的功能，在10分钟左右可以完成。 2. 保证业务数据安全，每天都有定时的自动全量和增量的备份，可以做到从故障中快速恢复业务的容灾恢复能力。 3. 统一平台的可视化监控、应用运行日志、故障告警即时提醒，客户关心的一切，尽在掌握。 ### 七、走向未来的路 前面看到本文的主标题，我们这里说的不是单纯的从速度维度来说越快越好，产品研发交付会思考：如何在质量保证，客户满意前提下，合理的快。先想在哪方面快，再讨论怎么快，最后再说有多快。 敏捷或速度的诉求是研发运维一体化存在的第一性原理。我们持续改进的方向主要在三方面：产品功能开发，开发运维环境，组织协作流程。诸如敏捷、开发运维这样的新方法，以及云计算、微服务这样的新技术，加速催生了新的IT能力。在整个组织内实施研发运维一体化，让团队变得更加敏捷、高效及创新。技术架构面临的挑战是未来业务多变，速度要快和稳定性要高，系统更复杂。 我们着眼当前的产品交付工作，努力提升团队满意度，组织满意度和客户满意度；保持短期日常改进工作，做好质量化开发，流水化部署，容器化交付，可视化监控，代码化基础架构，自动化运维；坚持做好未来长期的规划，目标就是：帮团队增效，帮公司降成本，保障客户业务持续价值。 2021年即将过去，2022年很快来到，关于开发运维团队接下来推进的几个主要方向上的工作如下： 1.</description>
    </item>
    
    <item>
      <title>我们的DevOps如何让客户生产环境从“0”到完全恢复</title>
      <link>https://www.agilewalker.com/devops-from-0-to-done/</link>
      <pubDate>Sun, 14 Nov 2021 09:17:17 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/devops-from-0-to-done/</guid>
      <description>人能弘道，非道弘人
&amp;ndash; 论语.卫灵公
危与机的开始 最近工作有些吃力，11月4日当天特意请了两小时假，提前下班，吃完晚饭刚坐下来，打算简单看个电影，然后好好睡一觉恢复下体力。不想发生了一次突发事件。
19:43，有同事在群里问是否能连上客户的服务器，一开始也没有太当一回事，服务器连不上也许只是网络暂时情况。
20:26，刘博在群里紧急拉DevOps的同事入群，心里咯噔一下，看来是出了点状况，赶紧坐到电脑前开始关注群里的沟通。
20:36，一阵急促的电话声，刘博来电，果然事情有点不太妙，新资产的应用服务器重启后就无法启动，应该是宕机了，DevOps团队需要全员上线应急恢复服务器应用环境，崔总开始协调第三方系统集成供应商恢复服务器的基础操作系统，幸运的是目前只有新资产系统的应用服务器宕机，数据服务器安然无恙，刘博指示先备份数据服务器上的所有相关数据，以防万一。
20:50，我们开始等待第三方供应商完成服务器操作系统的重新安装，同时内部分配每个人的VPN账号，进行数据库和文件存储的备份。
21:36，参考之前准备的资产系统部署手册，团队基本明确了针对客户新资产平台应用服务器恢复的具体分工。
台上三分钟，台下十年功 22:00，第三方把服务器安装完毕，经过漫长的等待轮到我们正式开工上场了，之前小杨在公司WIKI上准备的部署文档有了用武之地，这是我们应用服务器环境恢复的参考流程，刘博又帮我们捋了一下思路，排除一些本次系统恢复不必要做的步骤，于是最终需要做得只是一部分，而且有了之前工作积累的经验和成果，这一切使大家有信心可以很快完成。
插播一下DevOps之前的部分工作：
目前我们持续交付流水线可以实现一键发布，将资产系统的客户业务应用镜像上传到公司的私有云，这就是我们对客户的镜像仓库，在这里我们维护了每次交付给客户业务应用的不同版本，配合几个已经准备好的，放在私有云上，占用很少存储空间的启动脚本，可以提前下载到客户服务器上执行，进行统一的自动化部署，可以实现在客户服务器上完成快速部署。
简单科普一下镜像的概念，大家可以把它理解成一个不依赖于操作系统环境的业务应用的小盒子，我们可以利用若干个这样的小盒子以及它们之间形成的关系，在任何服务器和操作系统中搭建出一套一致的业务应用系统。能节省大量的问题解除过程。运行起来的镜像，我们称之为一个特定的容器。我们资产的平台是由几个不同的镜像组合而成，就像人的身体不同部位，只有共同上线成为运行容器才能协同一致工作，表现出一个完整的人的能力，缺一不可。
22:43，小邵，一位新加入DevOps团队不久，根据个人的经验以及部署文档完成平台基础环境的搭建。
23:11，小杨，一位在DevOps团队成长迅速的实习生，利用提前准备的部署脚本下载并重启所有的公司私有云镜像仓库中的资产的业务应用镜像，当这些镜像在客户服务器运行起来后，整个资产业务系统就运行起来了。
23:30，小杨在群里发了系统恢复后的新资产系统的界面截图，宣告了我们这次紧急系统恢复的成功。大家在群里简单总结了一下，互相感谢后道声晚安，结束了这次紧张的紧急恢复工作。
这次危机的解除实际工作时间仅为1.5个小时，算上前期的准备工作也就2个小时不到，这是对我们之前积累的一种自我认可，也是各位领导与团队一起协作的共同成果。
DevOps团队搭建的持续集成和持续交付流水线帮助产品研发团队轻松实现每日多次的自动化构建及发布，使得随时可以把新开发出来的功能特性交付给测试团队和最终用户成为现实，大大提升了对客户响应能力，缩短了交付反馈环，这在以前没有持续部署或发布的研发技术条件下是无法想象的。当然后面我们还有很多改进的空间。
最后，鉴于这次突发事件，我们向客户提出申请异地备份服务器，同时建议有条件的话一定要有定期的整机备份机制。
其大无外，其小无内 我们先来看个问题，企业需要实施DevOps的情况：应用上线（哪怕是改动一行代码）需要多长时间？
大家认为一般的周期通常是月、周、天、小时？如果大家发布周期在周级别，还有大量的工作靠人工执行，我们需要尽快引入DevOps了。
这是来自维基百科的解释，“DevOps是一组过程、方法与系统的统称，用于促进开发、运维部门之间的沟通、协作与整合。DevOps是提倡开发和IT运维之间的高度协同，从而在完成高频率部署的同时，提高生产环境的可靠性、稳定性、弹性和安全性。”
现在的软件开发已经不同于过去，产品要适应瞬息万变的市场，分工日益细化，一个成熟软件的规模已经不能奢望每个人成为全栈工程师能支撑得了的。尤其是对旨在于为了提高交付效率和伸缩能力的新的技术架构出现后，DevOps也随着敏捷文化的发展而融入越来越多软件组织的日常运营之中。DevOps小到掌握特定技术点，维护每个文档的细节，大到参与对研发工作规范的制定，传播对组织文化和价值观，把握DevOps的工作流程，提升软件组织的交付效能和客户满意度。涵盖从需求，开发到运维，反馈的整个过程，可以跨越团队，公司，甚至合作伙伴以及客户各方。这些都将纳入DevOps的日常工作和未来规划的视野里。
低头做事，抬头看路 应对危机，对他人而言也许是需要立刻解决的“危险”，但对DevOps而言，给了我们验证和改进工作的“机会”，是对我们平时工作积累之后的一种检验和反馈的过程，也为日后保障逐步建立一套成熟的因地制宜的流程和机制。在DevOps，我们不仅要低头做好眼前事，还要抬头看好远方路。不仅需要做好日常的事务性的工作，支持好组织的项目交付，还要建立工作规范和流程，技术能力和文档，通过具体工作支持其他团队在组织内部获得更多彼此了解的机会，更重要的是在这个过程中要做好敏捷转型的排头兵。
DevOps的长远的目标是自动化一切，监控一切，可视化一切，尽可能减少人工参与带来的不确定性从而引入更多的风险。在技术层面，我们形成持续编译、自动化测试、持续部署的能力；提升基础设施即编码的能力，将基础环境可编程化，项目团队成员可以自助获取；目前规划是先做好持续集成，持续交付和部署，根据痛点逐步优化，完善监控能力，以后还会做ChatDevOps，实现机器人值守。
简陋的笔，精彩的事 从本文开始的名言中，不难看出古代先贤也试图告诉后人：要成事，最重要的不是工具和方法，而是合适的人，只有人才能基于价值观和原则，把工具和方法运作在适配于自身企业的流程之中。这一点与敏捷宣言有异曲同工之妙。受限于我自身的笔头水平，无法详细说出这次紧急系统恢复事件中身临其境的精彩，不过无论如何我希望能尝试去记录这样一次DevOps作为主角所经历的故事。
加入DevOps团队的这段时间，我个人额外的感悟是DevOps不做人人眼中的战斗英雄或者救火队员，而是成为默默无闻的守护者。让外界感到风平浪静，才是我们作为守护者存在意义。DevOps团队大部分的时间是在为了避免发生危机而不断地思考和准备，静下来做好DevOps工作的心态应该是”行到水穷处，坐看云起时“。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>如何用伪领导力搞垮一个敏捷团队</title>
      <link>https://www.agilewalker.com/how-to-destroy-a-team/</link>
      <pubDate>Sun, 25 Jul 2021 06:45:07 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/how-to-destroy-a-team/</guid>
      <description>《易经》乃诸经之首，中华民族的哲学思想的源泉。
做了多年的基层伪领导，自认做的不是很好，格局不高，事实也说明基层管理更适合本人的思维深度，大家看到这里，至少能判断出我的自省做得很好。本文总结了一些伪领导力，还请大家赐教。
不知“外圆内方” 说的是领导的根本法则，领导者有更加圆通的行为方式，同时要有较为公正的管理原则。
有些领导说的头头是道，正确无误；做的相差甚远。可称之为：外方内圆。举个栗子，中国人讲究亲疏有别，是很正常的人性，作为领导也会一样，面对同样优秀的下属肯定会给那个关系好的更多关照。但如果纯粹为了拉拢人，展示自己的领导地位，或为了让“自己的”人获得利益或上位，无视团队中那些各方面都更优秀的人。加以时日，团队必定心生厌恶，让优秀的人失去信心，导致劣币驱逐良币，留下来的人一门心思只想着怎么去跟领导搞好关系，配合领导建立自己的势力圈，而不是想着怎么把业绩做好。最终必将导致团队效能下降，失去原动力。我们的老祖宗都说在合理范围内玩弄权术，搞人是可以的，不过，以终为始，如果公司给予领导者的权力让公司蒙受损失，最终一起受害的肯定是领导者自己。
另外有些领导一身正气，原则性极强，对团队要求是分毫不差，不懂变通。可称之为：外方内方。这样的领导的确能做成一定的事情，但同样不符合中国的管理文化，要求领导者有包容的心态，遇事“可为可不为”。否则，可能会付出更多的努力和遭到同事的反对。“中”为合理。中国人思想中充满对事物“合理”的思考，大家可以好好体会日常的经历。关于领导工作中合理的理解，可以接着看下文。
不愿“上，止，正” 说的是领导的三个节奏，领导要以“上”为进，以“止”为退，以“正”为守。
“上”是领导者不仅自己要有上进心，同时能带领团队向前，不断进行改进的尝试，引导团队的意愿，教导方法，也能根据团队当前的条件达到目前可以达到的更好的状态，从而使得交付效能持续改善，推进产品交付效率。
“止”是领导者懂得适可而止，过犹不及，团队能力在限定的条件下是有一定上限的，不可过分要求，不妨利用好这个机会，给团队鼓励和认可，帮助大家反思如何可以做得更好，记得一句话：“我们已走得太远，以至于我们忘了为什么而出发。”。
“正”是领导者行事要顶天立地，把权力控制在一定范围内、信任下属、处事合理，凡事不会只选择听自己想听的，看自己想看的，信自己想信的，而忽略去参考不同的见解。领导能从不同下属的各自的立场分别做思考，综合考量，就是个“正”的领导，或许最终的决策不是每个人都满意，但求有一个“合理”的支持。
如果把管理团队看成开车，“上”好比油门，踩上它，团队就会不断前行；“止”好比刹车，需要随时依据路况减速，避免风险；“正”好比方向盘，牢牢把握行驶方向，才能达到目的地。
不屑“治心，治力，治变，治气” 说的是领导的四个管理重点，带领团队就像带兵打仗。
治理人心。人心齐，泰山移。关心同事永远都不错，尤其在中国，饱含人情味的关切话语能营造一个良好的工作氛围；在公司原则允许的范围内实际帮助下属解决小难题，而他自然会用自己的努力来回报组织。记住：早上见面第一句话绝对不是说工作相关的事情。
治理能力。认清自己团队的能力，接受合理的工作，同时根据每个人的特点，耐心地来进行改进。当着第三个人的面批评一个下属是严重的失误。被批评的人可能会因此失去自信心，甚至以后做不好工作也没有任何负担感，因为你已经确认了他的无能。甚至会招致团队其他人的反感，放松对自己工作的要求。
治理改变。唯一不变的是变化，要帮助团队用变化的心态来看待困难和解决问题。称赞下属，尤其是对外称赞下属。这种称赞会辗转传回下属的耳朵，他由此得到的快乐要比你直接称赞他强几倍，他自然会更加热爱工作，朝你称赞他的方向改变。而如果总对外抱怨下属则会让人觉得你的无能，至少会认为你没能物色到出色的人选，或者没有能力让下属变得更优秀。
治理气势。把握好时机，利用好形势，鼓舞好团队。当团队状态低迷的时候记得给团队更多的自主权，耐心倾听，安抚好幼小的心灵，让团队看到希望，他们对你来说都是“孩子”；当团队斗志高昂的时候就可以给他们更大的挑战，表明你对他们能力的信任。对任何下属的建议你都该认真倾听。在通常情况下，下属都会经过思考才会提出建议，如果你仅用一个“不”字直接否定他，他会从此失去创造的信心。而倾听和讨论则会使你和下属都看到自己的思维死角，并有机会从中得到改善。
搞垮一个敏捷团队 完全做不到以上各小节的内容，必定能搞垮一个团队。无论如何，本文都是希望能助力你达到你所希望达到的目标！
还是那句话，一切方法是否有效，都很难讲，取决于天、地、人。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>我们这样实践Scrum敏捷每日站会</title>
      <link>https://www.agilewalker.com/how-we-daily-scrum/</link>
      <pubDate>Sun, 06 Jun 2021 06:59:19 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/how-we-daily-scrum/</guid>
      <description>孔子说 性相近，习相远。我们人类性情都差不多，而每个人的习惯千差万别。我不认为敏捷能改变任何人，而是一群有共同积极价值观的人走到一起，在实施敏捷后，可以把各自的潜能激发出来。
众所周知，每日站会的真正价值在于确保团队能持续地为当前的迭代的“承诺”而努力。每日站会并不是状态汇报，而是信息分享和调整协作。一个成熟的团队可以用不同的方式和关注点来开站会，与此同时团队也继续在改进中使用敏捷。
我和一个由9位成员的团队一起工作，我们在一起工作至今已经近8个月了。在我加入团队之前，大部分成员对于敏捷是完全不熟悉的。我们可以在15分钟的框架内完成每日站会，这样也更高效。在过去这段时间，我们在每日站会中尝试了不同的方法，目的在于在个人和团队磨合成长的同时，为我们的日常工作建立一个积极的氛围。我们认为真正重要的是：文化和人。
每日站会是什么 每日站会是指团队每天早上投入一天的工作前，进行的15分钟以内的会议。主要目的是给团队沟通每日承诺和迭代目标进展的机会。Scrum Master， Product Owner和团队成员都需要参加每日站会。当被问到我们敏捷团队在每日站会上讨论什么的时候，通常是团队成员围绕三个主题：
昨天，我们是否达成了目标？每个人的做了什么？还有哪些差距？ 今天，为了达成迭代的目标，我们的新目标是什么？每个人打算领取什么工作？ Sprint目标现在还有多大差距？是否可能延迟？哪些问题和障碍需要解决？ 敏捷开发团队是一个跨职能团队，而且不是所有人都是全栈工程师。完成一个故事的开发和测试，往往需要多个人员来协作完成。例如：一个典型的web开发故事，通常需要前端开发工程师、后端开发工程师和测试工程师来协作完成。
敏捷站会有以下作用：
1）对齐目标：互相同步信息，专注于当前迭代目标和近期的相关工作；
2）相互协作：尽快交付工作成果，减少半成本，发现障碍，通过协作消除瓶颈让价值流动。
每日站会的七大特点 同样的时间和地点
每次在相同的时间和地点召开会议能让会议成为团队习惯，更容易开起来。
每天按时召开
如果会议每天都晚五分钟开始，那么准时到场的成员将在一年中浪费20个小时来等待会议开始。
十五分钟以内
站立有助于我们保持时间意识和专注，从而使会议保持简短有效。
识别而不解决问题
遇到需要进一步讨论的话题，站会中不展开，可以约定在站会结束后立即讨论。且仅限于解决问题所需的团队成员。
专注有限主题
团队成员说明自上次站会以来的完成了什么、下一次站会将会完成什么工作、以及是否存在会阻碍他们工作进展的问题。
整个团队同执行
站会由团队成员轮流发起，并共同主持执行。敏捷站会不是一个状态汇报会，参与者提供状态是为了能让团队分享信息和发起可能的协作。
整个团队参与
团队中的每个人都应该参与。团队之外的人应被允许旁观会议。但不鼓励他们在会议期间参与讨论，除非团队成员向他们询问建议。
站会结束前，如果旁观者有问题或意见，部分团队成员可以留下来解答。
每日站会为什么 每日站会的目标
除了是Scrum的有机组成部份以外，每日站会的目的是要频繁检查团队在迭代中的进展如何，尽快反馈。在会议中，团队成员能够提出当前遇到的问题，会后讨论合适的解决方案。每日站会通过互相共享工作进展，使团队成员之间拥有更高的协作度。在极高的透明度之下，PO/PM就能够了解产品进度和用户故事的完成情况。
每日站会，是团队自组织检视迭代进展的协作机制，其主要为了：
检查迭代目标的完成状态； 暴露问题和障碍，使问题和障碍得到及时应对和解决； 计划当天的团队目标和领取工作任务。 我们迭代进展的衡量基准，是“已完成的故事”的故事点数。通常，故事的完成标准，至少是通过测试或PM初步验收。
通常我们会使用燃尽图来分析迭代进度的情况。包括以下要素：
横轴，是时间轴，单位是迭代天数； 纵轴，是剩余工作量，单位为故事点； 进度曲线（蓝色），体现了截止目前，迭代还剩多少故事点数没有完成； 参考线（红色），是分析迭代进展是否正常的参考基准。 如果进度曲线位于参考线上方，则表示进度已经延期。为了控制迭代的进度风险，我们希望能够尽快地完成一个个故事的开发和测试，以便使燃尽图上的进度曲线处于正常状态。每日站会关注的核心焦点是“本次迭代故事的完成情况”以及如何“尽快完成剩下的故事”。
为什么要回答三个问题？
提出三个问题的目的是让团队专注在当前的工作上，并强调在接下来的8小时内我们需要提升专注度和协作。
每日站会怎么开 每日站会的目标是“尽快完成故事”，其组织形式应该是：
通过用户故事来回顾和计划工作； 根据燃尽图来检查进度情况。 我们的每日站会的实践是这样的：
0）发起每日站会：团队成员每天轮流主动发起，保持对自组织站会的主人翁心态。
1）回顾和计划：
团队每人把昨天完成的用户故事在敏捷看板上移动到“Done”的位置，并简单沟通完成的情况； PM和团队对今天要做的故事进行优先级排序选择，并简单澄清。原则上当天站会中准备用户故事点的总数不超过团队开发人员的平均产能之和，故事完成后可以从待办中再拿新的故事； 测试小组把通过测试的用户故事移动到&amp;quot;UAT&amp;quot;的位置，供PM选择进行初验； 是否有阻碍用户故事推进或者影响本次迭代目标实现的障碍，我们写一张障碍卡片并贴在“障碍”栏目。 2）任务领取：
团队成员每人或结对领取当日选中的用户故事； 团队成员共同承担当日测试小组发现的问题并按约定时间修复； 开发负责人最后分配未被领取的用户故事或工程技术改进工作； 直到所有团队成员的工作均以排满；直到所有的障碍都已经有了应对措施。 3）信息发布：
每日站会发起人给敏捷看板拍照并发到敏捷团队微信群；
WIKI上，更新燃尽图，迭代进展情况。如果迭代进度曲线严重落后于参考线，则意味着迭代目标的达成风险较大。这种情况下，我们可能要组织召开一次迭代的重计划会议，确认剩下的工作如何进行调整；
Redmine(购买了敏捷插件)上，更新电子敏捷看板，其信息与物理看板一致，并有统计和图表供参考。
可以参考的实践 尊重团队约定</description>
    </item>
    
    <item>
      <title>Scrum敏捷开发培训后有感</title>
      <link>https://www.agilewalker.com/scrum-trainning/</link>
      <pubDate>Thu, 01 Apr 2021 10:22:40 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-trainning/</guid>
      <description>从⻓长远来看，你的组织可持续的竞争优势就是具有比对⼿更快的学习能⼒。
—— 彼得.圣吉
开端 2021年在即将辞旧岁和迎新年后，公司组织了两次Scrum敏捷开发企业级实训，2月初和3月初各一次。我有幸能参加第一次的培训，俗话说的好：输入只是学习的开始，输出是学习的检验和深化。在第二次培训结束后，感受到很多同事对敏捷开发方法还是有很大的意愿去尝试的。经过几天的思来想去，认为公司刚开始做敏捷转型，有必要做一个简单的文字记录，写下这次有意义的活动，同时也可供其他同事未来日常参考。本文简单小结了这次培训涉及的内容，以及结合了我自己工作中的一些思考，其中有部分文字是之前日常反思中记录下来的，此情此景，正好移花接木一下，希望大家原谅我的懒惰。
内容 通过这次培训，公司软件研发部门的同事从以下几方面了解了敏捷将带给我们的新的软件开发理念。
01 : 敏捷思维和理念 敏捷的核心思维让我们关注：价值驱动；适应变化；自组织团队。
价值驱动– 聚焦最高价值的目标
敏捷最短时间创造最大价值，以终为始，聚焦最重要的目标，从为什么开始。敏捷可以更快、更早地交付价值，优先交付高价值的需求。
瀑布模式强调单一职责，不同职能部门的工作交接和延迟阻碍价值交付，行政边界导致局部优化，筒仓之间的连接和沟通难以管理。 敏捷模式围绕价值流（共同的目标）建立跨职能团队，加速价值交付。 明确什么是高价值的需求、需求条目化和价值排序；聚焦高价值的目标、优先交付高价值的需求；围绕价值流建立跨职能团队和可视化看板，加速和持续优化交付价值。
适应变化– 掌控和管理不确定性
预定义过程和经验性过程的区别，预定义过程制定详细的计划和执行步骤，按计划执行直到所有计划执行全部结束；经验性过程从愿景和高价值的目标出发，小步快走，不断确认和调整，直到目标达成结束。在传统开发模式中，我们假设可以制定出详细的计划，一切都能按计划执行。在敏捷开发模式中，我们承认无法在一开始就明确详细的计划，存在不确定性， 整个过程中很多事情在变化。理解不确定性和涌现式需求；通过迭代、增量建立频繁交付、频繁确认、及时调整、修正，以建立快速的反馈；学习循环，以此降低交付错误产品的风险。
自组织团队– 释放团队的内驱力
过去的命令和控制式的管理方式已经越来越局限，在知识性工作环境下自组织型团队更是深得人心。自组织要求我们从命令与控制到目标驱动；从微观管理到领袖、教练和服务式领导；通过授权、支持、引导、反馈，所有的决策及交付活动中团队参与、共担责任。
Scrum和敏捷概要
敏捷软件开发宣言。
Scrum是一 个管理框架，Scrum用于新产品开发、 项目或团队的管理 。Scrum源自于软件开发，目前已经用于各个管理和创新领域。Scrum的理论基石是检视、透明、调整。
敏捷文化是我们倡导的一种思维方法，敏捷实践是一系列新的工作方式。敏捷实践和文化要相匹配和适应。敏捷运动是一场关于组织和个体的适者生存的进化，文化变革才是这场运动的核心。敏捷转型中文化变革要打头阵。
02 : Scrum 框架 Scrum五个价值观：
承诺-愿意对目标做出承诺； 专注-把你的心思和能力都用到你承诺的工作上去； 开放-把项目过程中的一切开放给每个人看； 尊重-承认每个人都有他独特的背景和经验； 勇气-有勇气挑战更高目标，做出承诺，履行承诺，表达不同的见解。 Scrum三个角色的职责：
Scrum团队的构成：Scrum 团队由一名产品负责人、开发团队和一名Scrum Master 组成，Scrum 团队是跨职能的自组织团队，团队具备完成项目工作的所有能力
Scrum开发团队是特性团队，团队内具备交付一项工作所需要的各领域的必需技能，例：分析、设计、编码、测试等；自组织团队，承诺工作，不是被指派，团队决策，共同担责，决定团队内如何进行决策。拥有共同的愿景、价值观和工作协议的团队文化。
Scrum Master是团队的教练，对Scrum流程负责，ScrumMaster每天的工作原则上就是确保团队用正确的姿势，高效地交付，同时，确保团队的文化保持在一个敏捷认同的氛围中。
产品负责人的职责是最大化产品的价值；产品负责人管理产品，帮助团队看到产品愿景和路线图，对需求进行优先级决策，准备并解释用户故事等；产品负责人和开发团队密切合作，随时都能响应团队的需要。
Scrum五个活动（在一个迭代中经历的活动）。：
产品Backlog梳理，对接下来迭代的需求进行预梳理，讨论初步的工作量和需要识别的风险。
Sprint计划会，团队对本次迭代的用户故事理解，分解，工作量细化评估。
每日站会，每天团队内部分享进展，第二天的计划，识别的风险及需要的支持。
Sprint评审会，团队与干系人一起，演示迭代工作成果，验证迭代交付的产品增量。
Sprint回顾会，团队内部改进，检讨的过程。产生改进流程和实践的建议并共同负责跟进。
由龙舟比赛角色想到的：产品端和交付端要合作博弈。产品推进需要结合交付端的能力，交付端需要根据自己的实际能力承诺，有勇气做出合理的承诺。交付端对每次迭代的交付范围有决定权，开发核心成员必须进行相应的判断，与产品端灵活沟通并引导期望。我们要做质量交付，而不是数量交付。产品管理者要有全局观，实事求是，平衡好产品端需求和交付端能力的因素，不可顾此失彼，更不可用KPI来控制某一方的诉求，进而实际分裂了整个团队共同的目标。在敏捷交付中，传统项目经理的职责被由PO，SM，和开发团队所共同分担。组织刚开始做敏捷，碰到问题，属于正常。作为敏捷领导者团队的一员，我经常自我反思，也帮他人反思，如何帮团队顶住压力，给团队注入动力。我想这是我们的课题。
03 : 敏捷产品和需求 产品 Backlog
产品Backlog的定义：是用户需求的集合，是按一定的优先级颗粒度排放的用户故事（需求）、缺陷、风险、技术工作等。具有以下特性：
Detailed 合适的详细程度
Emergent 涌现式的
Estimated 经过估算的</description>
    </item>
    
    <item>
      <title>初创的敏捷团队采用行为驱动开发共创用户故事</title>
      <link>https://www.agilewalker.com/how-bdd-user-story/</link>
      <pubDate>Thu, 11 Feb 2021 04:36:00 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/how-bdd-user-story/</guid>
      <description>如果说TDD是让我们正确地做事，那么BDD就是让我们做正确的事。
在原本的计划中，2021年农历新年前发布另一篇文章，还是应了计划赶不上变化的这句老话，也算是体现了敏捷的价值观，希望本文对初创敏捷团队有一定的帮助。
维基百科的解释 行为驱动开发（英语：Behavior-driven development，缩写BDD）是一种敏捷软件开发的技术，它鼓励软件项目中的产品负责人、开发者、QA和非技术人员或干系人之间的协作。BDD最初是由Dan North在2003年命名，它包括验收测试和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。BDD介于业务领域和开发领域之间，如下图的位置。
行为驱动开发强调使用领域特定语言描述用户行为，定义业务需求，使需求分析人员、开发人员与测试人员进行沟通的有效方法。领域特定语言，相比自然语言更加精确，又能以符合领域概念的形式满足所谓“活文档”的要求。
行为驱动开发的核心在于“行为”。当业务需求被划分为不同的业务场景，并以“Given-When-Then”的形式描述出来时，就形成了一种范式化的领域建模规约。编写领域特定语言的过程，其实就是不断发现领域概念的过程。因此，团队采用BDD共创用户故事，最重要的产出不是文档，而是提供了团队交流的平台，并在其约束之下完成了领域建模。由于团队的不同角色都参与了这个过程，就保证了领域模型的一致性与准确性。
敏捷开发中的理解 行为驱动开发是一种敏捷开发的技术，想必大多数同学都对敏捷开发领域中另一技术，测试驱动开发（Test-Driven Development，TDD）较为熟悉，BDD是建立在测试驱动开发基础之上。BDD的重点是通过与利益相关者的讨论取得对预期的软件行为的清醒认识。行为驱动开发人员使用混合了领域中统一的语言的母语语言来描述他们的代码的目的，通过用自然语言书写团队成员（业务、产品、开发、测试等）都可以读懂的实例。这让开发者得以把精力集中在代码应该怎么写，而不是技术细节上，而且也最大程度的减少了将代码编写者的技术语言与商业客户、用户、利益相关者、项目管理者等的领域语言之间来回翻译的代价。
敏捷团队面临的交付困境 在软件项目中涉及多人紧密协作，由产品业务讲解功能需求，开发负责代码实现，测试保证软件质量，高质量的沟通对项目成功至关重要。如果在一个项目中业务人员用自己行话，开发人员用技术语言、技术思维去理解业务，在沟通过程难免出现分歧，开发人员就可能按自己的理解去评估和实现了一个错误的功能。
理解需求 敏捷开发团队围绕产品的沟通，大部分都是为了理解需求，从而在业务、开发和测试之间达成共识。用户故事关注的是业务需求而不关注技术，系统业务专家、开发者、测试人员一起合作，分析软件的需求，然后将这些需求写成一个个用户故事。并且，首先开发和发布业务关键的用户故事，尽早为最终用户提供业务价值。
评估与计划 需求理解不一致，验收标准不清晰，就会导致用户故事评估工作的困境，开发人员对故事点的评估就缺少依据。有了上一步需求理解的统一，开发团队与产品负责人在工作量评估上有更坚固的共识，从而管理层在产品计划上，也会有更好的预见性和期望。
测试工作 这样的用户故事可以直接应用到测试中，作为测试的标准文档。我们在做单元测试 时，经常是针对某个函数，或是某个类进行测试，但是被测函数或是被测的类是可能经常变化的，我们的测试案例也需要经常性的随之变化。然而，用户故事描述的是软件的整个系统行为，几近于需求文档，可变性大大减小。因此，测试案例不需要做太大变化。同时，这样的测试案例最贴近于需求，贴近于实际的系统行为。
产品相关文档 经常看到产品在不断的推进，当干系人问起文档的时候，我们却难于启齿。不是因为我们不重视文档，而是我们更重视交付？如果必要的产品说明文档也没有就是有点走极端了。基于BDD 的用户故事，使用几乎近于自然语言的方式描述了软件的行为过程，因此，可以直接作为软件的需求文档。
团队基于BDD共创用户故事 用户故事User Story 用户故事是从用户的角度来描述用户渴望得到的功能。
一个好的用户故事包括三个要素：
角色：谁要使用这个功能 活动：需要完成什么样的功能 商业价值：为什么需要这个功能，这个功能带来什么样的价值 验收条件Acceptance Criteria 验收条件就是一系列可以接受的验收条件或者业务规则，且与功能或feature相互匹配和满足，同时也能被产品负责人和干系人接受。
验收条件可作为验收测试用例的具体例子。这也是我们常说的实例化需求，让抽象的需求变得具体和可测试。
一个用户故事包含若干个验收条件，包括正常场景与异常场景。
场景中的Given…When…Then…实际上就是设定该场景的状态、适用的事件，以及场景的执行结果。
通过这样的用户故事描述和场景设置，基本就完成了一个完整测试的定义。
验收条件的作用：
以用户的视角表达业务交互过程 为PO与用户的需求理解上提供场景化、具象化的沟通 有助于用户体验友好性的识别和改进 PO与团队需求共识的标准和记录 可视化一个用户故事的粗细粒度 开发与测试对功能实现与质量的共识 需求完成边界的限定 比单纯故事点更为直观的工作估算标准 活文档，用户手册(帮助FAQ)的素材 更公平透明的甲乙方的定价标准 举个例子 在农历新年，中国人的习俗中会有很多活动，如果把过年当做一个产品交付，那么会有很多Epics或Feature，过年三十就是其中一个大故事。那么我会基于BDD，写这么一个用户故事（当然，我也可以拆解出一个更小的用户故事：和家人一起吃年夜饭）：
基于BDD写用户故事的优点 BDD为敏捷开发流程提供了许多优势。 BDD 提供业务关键功能，通过高效的协作和沟通推动产品成功。
提高开发效率 帮助开发人员、测试人员与PO对需求的理解在同一个平面上，帮助团队快速构建和交付更多有价值和高质量的产品，减少返工和修改可降低维护成本。
提高测试效率 帮助测试人员准备测试用例，并进行符合验收条件的用户故事测试。
正反馈循环 以用户故事为中心，用验收条件填补PO-开发-测试之间的认知鸿沟，进行需求拉通与协作对齐。由于所有团队都对应用程序有共同的理解，因此开发人员可以更快地获得反馈，以增强应用程序并走上正轨。
用户体验 从用户角度定义功能使设计人员和开发人员能够从最终用户的角度进行思考，以解决用户难题。 创造了内在的业务价值和增强的客户体验。
文档生成 帮助PO在日常的迭代开发中逐步完善整理产品需求，提升实战性用户故事和验收标准的编写技巧。组织产品PRD文档的信息来源。
写在最后 通过上面的了解，我们知道了行为驱动开发很大意义上是一个PO、开发、测试共创的一个行为。同时也是一个自然而然的过程，我们可以使用行为驱动开发的人类语言描述方法来编写我们的用户故事。行为驱动开发，还需要打破传统的魄力，因为之前几乎没有人会告诉你用户故事写的可以跟逻辑代码一样，作为从代码到需求的桥梁。当你习惯BDD，编写用户故事会变得非常好玩。行为驱动开发，可以使你的测试更加贴近实际的用户行为，从而找到系统的问题所在。
如果你要做完整BDD的话，可以看下面的彩蛋部分。祝各位新年快乐，万事如意！</description>
    </item>
    
    <item>
      <title>团队是敏捷教练的镜子</title>
      <link>https://www.agilewalker.com/team-is-mirror-of-coach/</link>
      <pubDate>Wed, 27 Jan 2021 14:53:45 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/team-is-mirror-of-coach/</guid>
      <description>敏捷教练是团队的镜子，这是一个常识，我认为反之亦然。
前言 在敏捷教练的工作过程中，经常告诉自己的一句的工作职责就是：要作为团队的镜子。作为团队的镜子，敏捷教练或Scrum Master参与团队和个人的工作过程，一个重要的任务是通过观察以及沟通寻找发挥自己职能的时机，帮助敏捷团队的看清自己行为本身有哪些可以继续保持或是可以做的更好，让团队能够发现改进机会。我们今天要说的是在这个过程中，教练也可以把团队作为镜子，发现自己的问题，思考如何让自己做得更好的，以符合团队的现状和目标期望。在敏捷中，传统项目管理的职责被 PO，开发团队和SM所共同分担，PO负责目标，团队负责交付，SM负责流程、团队和改进。作为敏捷领导团队的一员，我们经常自我反思：如何帮团队顶住压力，并给团队注入动力？
在前一篇博客中，总结了个人理解的敏捷含义，本文就从这几个方面谈谈我们今天的话题：
敏捷是流程 敏捷是文化 敏捷是价值 敏捷是改进 敏捷是变革 敏捷是流程 我们有敏捷框架，如Scrum来规范流程，使交付更有条理，更有节奏，像心跳一样，且更有愿景感。
当团队初创的时候，对Scrum方法还不清楚，敏捷教练就需要要导入Scrum基础知识，并在实践中指导团队在交付过程的活动和行为，如每日Scrum站会，评审会，故事点评估等；关注对于个人的教练活动，如帮助新晋PO编写用户故事，人员等。随着每次迭代的完成，团队对交付的流程都会更清晰，更熟练，在流程执行上，教练会表现的更加轻松和相信团队能自己掌握流程，有选择地进行教练活动，甚至自己可以静静地站在旁边作为旁观者。这个时候也可以思考如何取得进一步改进。SM绝对不能离开团队，没有SM的团队即便不思考任何改进，也有随时可能回到解放前的风险。
产品交付中，开发团队永远拥有主角的光环，不是PO，更不是SM。
敏捷是文化 我们拥抱变化，沟通透明，跨职能合作，永远在学习的路上，快速修正自己的问题和目标，绝不延迟。
从传统项目交付走过来的团队倾向控制变更，这时可以让团队意识到，唯一不变的就是变化，在交付中，“永远拥抱变化，随时调整一切”是我们能为客户提供价值的最好原则。敏捷教练需要经常提醒初创团队，学会从“他们”和“你们”到用“我们”进行沟通，在必要的时刻化解危机，避免团队内部互相指责的苗头，对外铁板一块，对内良性碰撞；当团队遇到交付的能力瓶颈的时候，鼓励团队自组织，进行跨职能交付，帮助联通相关职能部门，促进学习型组织的文化氛围建设，发现团队向上的提升空间，鼓励团队尝试新的工程实践。“尽早的试错，不怕出丑，快速调整”是教练帮助团队高质量交付的利器。
敏捷是价值 我们的价值是客户的认可（含显性和隐性），一切不能被认可的工作，在迭代内我们是要尽量避免的，有效的价值流动，是我们的使命。
当新晋PO不擅长对待办列表进行优先级排序时候，SM可以给PO提供指导；当开发团队在规划中选择更多的用户故事的时候，SM可以给到建议，专注在有把握交付（通过验收）的工作上；SM也可以帮助开发团队和PO一起定义验收标准和完工的标准，确保开发团队和PO对交付的价值有一致的标准。
敏捷是改进 我们的改进没有终点，我们一定要比上一个迭代做的更好，这是我们的目标，即使比过去有了很大的改善，也决不满足于当前所处的。我们不断学习，想办法提升，在固定时间内为组织持续创造更多价值，即便这意味着我们可能以减少交付数量为代价。
当团队已经能够按Scrum方法执行交付过程的时候，在效能上或团队氛围上已经远远好于之前的传统交付过程，教练要帮助PO和团队意识到不必满足于目前的成就，我们能做的还有很多，回顾会就是重要的一种形式；有时候团队为了在有限的时间内推进功能，会抵触学习新的工程实践，教练应该告诉团队工程实践也是有价值的工作量，营造改进的安全空间，并可以从相对更支持的人员那里得到帮助推进某项实践；也可以考虑引入工程技术经验丰富的新成员，带动团队的学习氛围。一个有时间和愿意学习的团队是我们都想看到的。
敏捷是变革 我们做的是一件革新的事情，起初一定会面对来自内部和外部的各种不理解，质疑甚至是阻力，如何帮助团队改进，帮助干系人理解，树立信心，如星星之火而燎原是我们的课题。
当组织刚开始进行转型的时候，敏捷教练一定是得到了高层的支持，并从基层开始推行敏捷实践；建立试点团队，遇到不理解或质疑时候，可以多与团队和管理层沟通，教练要了解团队的历史和人员经历，对症下药，并尽快帮助团队取得一定的战果，获得自信心；邀请干系人参与到迭代评审会议中，完全透明的展示产品的进展，听取干系人反馈的同时，敏捷团队不仅得到了宝贵的改进机会，更是建立信任和获得支持的过程，从而为在组织层面推广敏捷实践打下基础。
写在最后 以上是个人的一些理解，拿出来与大家分享，难免偏颇之处，乐与大家共同探讨，我自己常说：敏而求错，捷而使正。天下没有放之四海而皆准的方法和工具，关键在于我们认为人是第一重要的元素的原则，根据时机，环境和事物的变化来调整方法和工具，不断对自己的教练工作提出更高的要求并将其落地。</description>
    </item>
    
    <item>
      <title>每个人都知道敏捷是什么</title>
      <link>https://www.agilewalker.com/what-is-agile/</link>
      <pubDate>Sat, 23 Jan 2021 01:28:02 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/what-is-agile/</guid>
      <description>唯一不变的是变化
很多时候后被问到：敏捷是什么？以下是我的简单理解（不想给大家太大的阅读压力，自己也写不出太多文字）：
1. 敏捷是流程： 我们有敏捷框架如Scrum来规范流程，更有条理，更有节奏，像心跳一样，且更有愿景感。
2. 敏捷是文化： 我们拥抱变化，随需而变，跨职能合作，永远在学习的路上，不断修正自己的问题和目标，绝不延迟。
3. 敏捷是价值： 我们的价值是客户的认可（含显性和隐性），一切不能被认可的工作，在迭代内我们是要尽量避免的，有效的价值流动，是我们的使命。
4. 敏捷是改进： 我们的改进没有终点，我们一定要比上一个迭代做的更好，这是我们的目标，即使比过去有了很大的改善，也决不满足于当前所处的效能。我们不断学习，想办法提升，在固定时间内为组织持续创造更多价值，即便这意味着我们可能以减少交付数量为代价。
5. 敏捷是变革： 我们做的是一件革新的事情，会面对来自内部和外部的各种不理解，质疑甚至是阻力，如何帮助团队改进，帮助干系人理解并获得支持，树立信心，如星星之火而燎原是我们的课题。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>产品负责人的轻度思考，6个小策略，面对迭代Sprint评审会</title>
      <link>https://www.agilewalker.com/sprint-review-advice/</link>
      <pubDate>Sat, 16 Jan 2021 10:36:22 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/sprint-review-advice/</guid>
      <description>人类并不善于将事情做得十全十美，于是软件中充满Bug也就不足为奇了。
Sprint评审会议可能是产品负责人最重要的活动，它可以帮助你收集反馈意见，做出正确的产品决策，从而增加创造成功产品的机会。产品负责人可能并不总是清楚谁应该参加会议，应该如何开展这个会议，以及如何收集相关反馈。本文将回答这些问题，并分享一些建议，以帮助你在Sprint评审会上得到更多收获。
邀请正确的人参与 从正确的人那里收集反馈信息对于做出正确的产品决策至关重要：如果你邀请了不合适的人参与，或者关键人物未到场，那么你不太可能收到你所需要的反馈。因此，你应该确保你邀请合适的人参与。
一般来说，邀请那些你需要获得反馈来验证最新产品增量，以及可以帮助你推进产品发展的人参与。这些人通常是你的关键干系人 - 对你的产品有兴趣的人员，以及你需要去发掘的产品用户和需要你提供产品的人。这些人可能包括营销，销售，服务和支持人员以及其他业务部门的人员，具体取决于你的产品和组织。
为了鼓励干系人参与，以及管理干系人的期望，告诉他们为什么需要他们参加会议，以及他们可能会看到什么，这是很有帮助的。
协作但不要畏惧说不 我参加过不止一个很快就结束的Sprint评审会：一位开发团队成员向那些看起来很困惑的干系人和站在这些干系人身后的产品负责人演示了产品功能。然后，Scrum Master询问大家是否有任何问题或反馈意见，这些干系人相互看着对方，有些人说：“干的不错”，“看起来还可以”，然后人们就离开了。这次会议收集到的有价值的意见是零。
因此，要鼓励人们积极参与并分享他们的观点，想法和担忧。使用开放式的问题，比如“你怎么看待我们对注册功能的改进？”，试着理解为什么有人喜欢或不喜欢这个迭代的产品增量。收到诸如“看起来很棒”的反馈可能会感觉很好，但是它并没有提供任何新的见解。为什么这个人喜欢这个功能？有什么可以进一步改善？
让所有的与会者有机会发表他们的观点，欣赏他们的意见和反馈，即使你不同意或难以接受他们。请记住：来自干系人的创造力，知识和反馈可以帮助你做出正确的产品决策，以提供可能的最好的产品。
同时，不要接受某些个人通过这个会议来达成他的个人目的或者某个业务单元的利益。我记得有一次Sprint评审会，当时一位高级干系人在产品负责人和开发团队中直言不讳地提出了他的要求，这当然不合适，也没有提供任何帮助。
作为产品负责人，善待和理解很重要。但是不要让干系人告诉你该怎么做。你对产品负责，你必须拥有最后的发言权，否则你无法获得足够的权力和尊重。
对于没有帮助的想法和不现实的要求，不要害怕说不。基于产品整体战略和产品路线图来决定是否需要接受相关请求。如果你怀疑你的决定，可以使用下一个sprint来测试这个想法或请求是否对用户有益。但请记住，提供一个令所有人满意的产品几乎是不可能的。
考虑把Sprint评审会分成两部分 在有些情况下，将Sprint评审会分为两部分是有帮助的。
第一部分，你和开发团队参与，团队向你演示产品增量。然后，你向团队成员提供反馈意见，并确定哪些条目已完成，我们现在进展如何。你可以使用发布燃尽图来看看进展。如果你在Sprint期间已经有了足够多的参与，并且已经看过相关完成的功能并给与了反馈，那么第一部分的环节你可能根本不需要。
第二部分，干系人参加会议。我发现，作为产品负责人，通常最适合向干系人呈现产品增量：你可能比开发团队成员更好地了解用户如何与产品进行交互并使用新功能。然后收集干系人的反馈意见，以了解我们是否开发出了具有正确用户体验和功能的正确产品。按照上面的建议询问开放式问题，以便了解为什么新功能很好或者为什么需要调整。
把会议分成两个部分，这样你可以与开发团队有一个线下沟通的机会，也可以在Scrum团队以外的人加入之前理清分歧。当你在Sprint期间没有机会与团队互动时，这种方式尤其有用，例如，你和团队不在一个地方办公，或者你忙于访问用户和客户，或参加展会或会议。但是要确保开发团队成员出席整个会议。直接听取干系人的意见是非常宝贵的。
考虑分开收集最终用户和干系人的反馈 Sprint评审会的原意是将所有合适的人聚集在一起，同时收集每个人的反馈意见。如果这对你有效，那很好。但是，我经常发现分别收集用户和内部干系人的反馈信息会更有帮助。为什么？这两个群体往往有不同的观点和利益。
通过用户测试产品增量可以让你了解产品是否适用于你的目标用户群，是否提供了正确的用户体验和正确的功能。与干系人讨论产品增量可帮助你了解是否高效地提供了产品，是否可以开始运营、销售和支撑你的组织了。
更重要的是，最好用不同的技术来收集用户和干系人的反馈：当实现的功能很少时，向最终用户演示产品增量是有意义的。否则，观察或测量用户实际使用产品的方式会更有帮助，例如可用性测试和早期版本。
相比Sprint评审会，这些技术通常需要更长的时间，可能需要几天的时间才能将产品增量发布给（选定的）用户后收集相关数据，这种方式自然而然地把收集最终用户反馈和收集干系人反馈分开了。
用户胜过干系人：如果产品不利于用户，人们不会长期使用它，无论它是多么可销售或者可服务，或者CEO有多喜欢。
不要急于决定 有些情况下，你可以在Sprint评审会议上立即做出产品决策，甚至可以调整好产品Backlog。很多时候，特别是如果反馈的影响比较大，导致产品Backlog变化更大的时候， 花更多的时间来分析反馈，得出正确的结论，然后再决定如何调整产品Backlog，这样你能够得到更多的收获。
此外，如果你决定分开收集用户和干系人的反馈意见，如上所述，你可能不会在Sprint评审会获得相关反馈数据。因此，你应该考虑把收集反馈和数据，跟分析和采取行动分开进行。例如，你可以选择在下一次Sprint计划会议之前开展一个简短、聚焦的产品Backlog工作坊，用这种方式来客观评估这些反馈，并和开发团队讨论如何调整产品Backlog。 或者，你可以在分析工具的帮助下，收集到足够多的用户数据以后，在下个Sprint组织一次产品Backlog的会议来评估这些反馈。
讨论发布进度 想象一下，所有的反馈和数据表明，人们将会热爱你的产品。然而，如果你的产品发布延迟或者超出预算，那么产品可能不会成功，甚至可能不会正式发布。因此，你必须定期确保产品要有进展。
Sprint评审会是一个很好的机会，因为你现在应该知道哪些条目已经完成，距离终点还有多远。此外，参加会议的关键干系人可能需要知道新的产品版本是否能按计划发布，或者是否有延误，因为这可能会影响他们的工作。更重要的是，讨论发布进度将当前的Sprint放到了上下文环境中，并和之前Sprint连接起来，让我们能看到整体的进展。
我喜欢使用发布燃尽图——Scrum的标准工具来跟踪发布进度，并预测项目的后续进展。发布燃尽图展示了产品Backlog中剩余的工作量随着迭代的开展不断减少的趋势。
无论你使用哪种工具：确保它可以帮助你了解你的进度如何，并进行必要的调整：比如，推迟发布日期、只部分满足发布目标、比计划交付更少一些的功能等。</description>
    </item>
    
    <item>
      <title>未来领导者的敏捷品质</title>
      <link>https://www.agilewalker.com/leadership-agile-qulity/</link>
      <pubDate>Sun, 27 Dec 2020 13:56:52 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/leadership-agile-qulity/</guid>
      <description>未来的领导者需要拥有清晰的价值观和愿景，需要真实和敏捷、内在一致并且目的明确。
&amp;ndash; 佚名
传统管理到现代领导 纯粹指挥协调型的管理者，会很快退出历史舞台。如果你是一位还有10年以上才能退休的管理者，一定要成为一个落地干实事的领导者，保持激情，在工作中与大家一起奋战。除非，你真的不在意。
传统管理模式：领导者 - 服从者 这种管理模式，基于不对等的身份认同，在对话场景中管理者始终是领导者，下属始终是服从者。不仅抑制了双方个人的发展，更让企业的发展无法与时代接轨。在这样的场景中，管理者和下属在工作中都没有想象力，企业更不会有创新力，始终处于被动指挥或被动服从的漩涡中。可以解释为：管理者想到的，让下属去干，下属干的过程中无需负责，不问对错。下属辛苦，领导英明。
现在管理模式 ：领导者 - 领导者 这种管理模式，基于共同的身份认同，在对话场景中管理者是领导者，下属也是领导者。不仅提升双方的领导力，为企业培养新的潜在领导者，由此来助力企业本身的在新时代的快速成长。在这样的场景中，管理者和下属在工作中都愿意投入自己的思考，共同参与决策，达成一致，分工执行，这样企业便会产生创新力，在这里共同指挥和执行的是企业的文化。可以解释为：管理者有愿景和目标，与下属分享，共同思考达成愿景的方法，查漏补缺。领导和下属共同成长。
领导的品质 个人认为，未来的领导者必须努力地自我发展来获得领导的资格。我们生活在寻找、甚至期待“速成”的世界，然而领导品质的培养既不可能速成，也不可能是容易的。这里说的是所有具有责任感的领导者都很可能具备的基本品质。
价值观 这里说的价值观，是指个人而不是公司的价值观。真正的价值观藏于人的内心，这些价值观在最深的层面上都是通用的，无论宗教，无论种族，无论国籍。
我们需要由价值观驱动的领导者，拥有具体明确的价值导向，以使它们能够更好地用在最适合的问题上，这里的价值观以集体为根基，而非个人自私的。个人价值观与企业奉行的价值观不相符的时候，会面临一些艰难的选择：离职；或者承担责任，改变现存价值观，使之更符合通用的和更高的价值观；又或者，他级别没那么高，就要在公司内部寻求如何表达自己的价值观，以帮助更多的人。
领导者不仅需要靠价值观驱动，还需要能够将价值观转化为原则，作为个人和团队的工作指南。
以敏捷价值观为例：
敏捷价值观
个体和互动 高于 流程和工具
工作的软件 高于 详尽的文档
客服合作 高于 合同谈判
响应变化 高于 遵循计划
敏捷的原则
我们最重要的目的，是通过持续不断地及早交付有价值的软件使客户满意。
欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。
经常的交付可工作的软件，相隔几星期或一两个月，倾向于采取较短的周期。
业务人员和开发人员必须相互合作，项目中得每一天都不例外。
激发个体的斗志，以他们为核心搭建项目。提高所需的环境和支援，辅以信任，从而达成目标。
不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。
可工作的软件是进度的首要度量标准。
敏捷过程倡导可持续发展。责任人、开发人员和用户、要能够共同维持其步调稳定延续。
坚持不懈的追求技术卓越和良好设计，敏捷能力由此增强。
以简洁为本，它是极力减少不必要工作量的艺术。
最好的架构、需求和设计出自组织团队。
团队定期地反思如何能提高成效，并依次调整自身的举止表现。
愿景 人们通常还是会根据实现短期财务业绩的能力来选择领导者，而不是根据他们的愿景，长远的愿景作为一种领导品质被削弱和低估了。当今世界各方联系紧密，交流即时迅速，因此，全方位的系统思考已经非常有必要，而且，将来它更不可获取。这自然而然成为个人成长的一个重要产物。
领导者的愿景分为两部分。第一部分是“展望”和“梦想”的能力，即要创造一个清晰而大胆的画面，也是领导者所希望追求的长期未来。第二部分是“有远见”，以鼓舞人心的方式传达这种画面的能力。通过对愿景的沟通和由彼此迸发出的激情，追随者才会产生。
真实 做真实的自己，意味着把自己从对于下列事物的恐惧中释放出来：害怕失败，害怕与众不同，害怕看上去很傻，害怕他人会有什么看法以及许许多多以自我为中心的害怕。有些管理者，刚刚学习了某个流行的概念，由于害怕失去控制或威望，就在一些专业的会议上发表“指示”，虽然现场的专家们碍于体面并没有提出异议，但也不免被暗暗贻笑大方。不仅缺少谦逊的品质，也让人感觉不够真实。绝对的真实，总是与最好的价值观和愿景密切相关。
敏捷 俗话说得好：唯一不变的就是变化。当今世界变换莫测，领导者必须具备灵活性、变革、创新和放弃过时的心爱的项目和过时的目标的能力。“主动迅速改变”是未来生存的必要手段。
敏捷是两方面的个人发展的成果，一方面是摆脱固有的成见和旧的信念与假设的束缚；另一方面是消除阻碍人们对改变持开放态度的对未知的恐惧。
尝试不同的事情可以锻炼心智的敏捷性，身体也会受益。做了从未尝试的事情，你会发现自己扛过来了，习惯是避免恐惧的重复行为，这就是为什么我们在组织转型中，需要重复与过去不同的行为方式。打破习惯，开辟了新的途径，一定能带给你新的喜悦。
一致性 领导者内在的或者心理上的一致性也是一种重要品质，它指的是人的内心不同次级人格的一致性与合作性。领导者的决策取决于他最重视什么，或者说他自己的价值观是什么，他奉行的是否与宣传的那样一致。有些管理者，在给别人建议的时候头头是道，并很乐意跟进具体的工作，看起来与公司价值观高度一致；然而，反过来被给予建议的时候，推诿抗拒，能不干就不干。这样的表现并不是一个合格的领导者。每个领导者都需要发展他内心的一致性。当我们内心发展时，我们的价值观会出现改变或者拓展，所以，这种内心冲突是我们成熟过程的自然结果。
未来的领导者 未来的领导者需要有清晰的价值观和愿景，还要真实和敏捷，并且保持内心的一致性。如果加上自我觉察、责任感以及自信和良好的情商，就是一个强大的组合，事实上，它们就在你的内心深处，只等待你去发现。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>责任模型 – The Responsibility Process</title>
      <link>https://www.agilewalker.com/the-responsibility-process/</link>
      <pubDate>Sun, 20 Dec 2020 02:41:05 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/the-responsibility-process/</guid>
      <description>虽然每个人都在谈论责任,但是在各种情况下,我们都不负责任。
前言 敏捷团队重视责任，敏捷思维和 Scrum文化中最关键的一个部分是责任。 Christopher Avery创建了一个非常好的责任模型，解释了责任如何发挥作用。在长期的进化过程中，人们的大脑得到了训练，能够迅速做出决策。每当出现一个小问题时,大脑将提供如何处理这个问题的选项。
责任流程选项 第一个可能的解决方案：否认，这是人类的大脑的第一反应，通常是：“我已经编码了，我的代码没有问题。” 第二个可能的解决方案：指责，在Scrum环境中，指责可能会指向任何一个人，通常是：“我的代码是正确的，运行不了是他的错。” 第三个可能的解决方案：辩解，人们在没有得到预期结果时，经常使用借口。通常是：“在软件开发中，我们经常碰到技术难题，对吧？事情就是这样。” 第四个可能的解决方案：羞愧，团队遇到问题可能会表示沮丧，通常是：“对于这个产品，我们没有足够的经验，太难了。”。 第五个可能的解决方案：义务，有人告诉他们应该这样做，因此，他们不用理解就这样做了。通常是：“由于Scrum，我们开站会是必需的。” 第六个可能的解决方案：放弃，人们任何时候都可以决定放弃。通常是：“我不会去解决它，这对我来说并不重要。” 第七个可能的解决方案：责任，发生在决定承担责任时，这是责任模型的最终层次。通常是：“下一次，我们可以采用什么方法，这样以后就不会发生同样的事情了？” 写在最后 只有第七个措施才是真正的负责任。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>如何理解并应用精益敏捷Kanban看板</title>
      <link>https://www.agilewalker.com/understand-kanban/</link>
      <pubDate>Fri, 10 Jul 2020 03:45:18 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/understand-kanban/</guid>
      <description>我引入看板系统的目标是：防止过载、控制工作流的波动性，以及触发渐进式变革。
&amp;ndash;大卫.安德森
看板的基础知识 看板是一种用于管理产品创造的方法，该方法强调持续交付，同时又不增加开发团队的负担。 像Scrum一样，看板是旨在帮助团队更有效地协作的流程。它是一种可视化工作流程的方法。为了在需求与可用产能和瓶颈之间取得平衡，该框架在下面的工作中具有很高的生产率和效率。
临时请求(按需的任务) 计划外工作 生产支持 简要历史 在1940年代后期，丰田公司从超级市场那里找到了更好的工程流程。 他们注意到商店的店员通过商店的库存而不是供应商的库存来补充货品。
只有当一个货品接近售罄时，店员才能进行订购。 超市的“实时”交付流程激发了丰田工程师重新考虑他们的方法，并开创了一种新方法-看板系统-该方法可以使库存与需求匹配，并实现更高的质量和产量水平。
看板，拼写为Kanban，是日语中的“信号板”，表示“可用产能（工作）”。 看板是与精益生产和实时生产（JIT）有关的概念，它被用作排产系统，告诉你要生产什么，何时生产以及要生产多少。看板成为支持整个生产系统运行的有效工具，也是促进改进的很好的方法。
原则 在看板方法上实施软件增量是一个基于拉动的系统，它可以帮助团队以可持续的速度和产能进行交付，减少了工作和时间的浪费。 保证这一点，就需要遵循以下看板的基本原则。
1. 可视化工作
看板工作面板的可视化模型及其工作流程使范围和功能透明化，有助于观察和检查从待办事项到完成的工作流程。 这样会让工作可见，也包括阻塞，瓶颈和队列以及即将进行的工作，这有助于团队制定策略，是继续进行现有的工作或将新工作带入。
2. 限制在制品WIP
团队为看板面板中的所有“进行中”的列共同定义了一个限制，例如分析，开发，测试等。此WIP限制实现了基于拉动的系统，因为只有在该列下的工作总数少于其上限的情况下才可以将工作从上一列拉至当前列。
这有助于平衡基于流的方法，团队不会开始并承担过多的工作。 它减少了浪费，并帮助团队专注于先完成后开始。
3. 聚焦在工作流
要完成一项工作并增加价值，它必须经历其开发过程的多个阶段。 如分析，开发，测试，评审等。为了获得看板的价值，团队需要专注于从启动到完成的工作流程。 通过遵循上面2条原则，可以帮助你专注于流程。
专注于工作流会使团队可视化即将到来的的瓶颈并对其采取行动。 以便保持流动。 团队经常制定工作的策略以优化流程。
把看板和现实生活相关联 我们已经学习了看板的基础知识及其原理，让我们尝试将看板流程与现实生活联系起来。 假设你已经知道并正在实践Scrum，我们将在其中执行定义的时间框的迭代。 我们提交一堆故事，对其进行处理2到3周，然后完成迭代，并再次计划新的一堆故事以进行下一次迭代。 在看板中，我们不会为迭代，时间框或冲刺提交故事。 我们做的有些不同。
在下面的示例中，我们将Scum和看板与现实生活联系起来。 假设人们是故事，放映厅是一次迭代，放映时间是迭代时间。
关联Scrum流程和现实生活 这个案例说明了放映厅中的人员流动，一次是一群人。 如果我们假设人是用户故事，并且将时间显示为迭代或时间框。 然后，你可能会注意到一群人一起在放映厅里走来走去。 我们有明确的座位容量和放映时间。 为每次放映安排的人在放映开始之前已预先计划好了。
关联看板流程和现实生活 这个案例说明了门卫允许公园中的人流是一个接一个的。 如果我们假设人是用户故事，那么公园就是看板面板。 然后，你可能会注意到没有定义的公园放映时间，因为它是24小时开放的。 进入公园或在公园内漫游并出来的人不在同一个人群中。 我们没有容量和演出时间。 但是，公园的管理层决定一次不允许在公园内同时容纳6人以上，以提高公园内人们的舒适度。
在此图中，让我们尝试用Scrum术语关联场景。 如果我们假设人是用户故事，那么在大厅外面等待下次放映的人就是Backlog中的用户故事列表。当前的放映厅放映就是当前Sprint或迭代。观众是冲刺的故事。 显示时间是冲刺持续时间。 放映厅容纳人数是团队对冲刺的产能。 已经看过电影的人是以前冲刺中的“完成”故事，可能已经确定已发布或已部署。
在这里，让我们尝试用上面的图片来映射看板术语。 假设人员是用户故事或任务，公园是可视看板面板。 排队等候在外面的人是当前的看板Backlog。 放映时间没有定义，“最大容量”没有限制，但是管理层决定不允许面板中的故事超过6个。 已经从公园出来的人就是已经可以部署的用户故事。 管理层正在统计出来的故事，以便允许进入新的故事。看板面板(公园)内的故事(人)没有确定的开始或结束日期。
上面图片中进行解释，以解释Scrum流程。
上面图片中进行说明，以解释看板流程。</description>
    </item>
    
    <item>
      <title>「视频」规模化敏捷Spotify模型的工程文化</title>
      <link>https://www.agilewalker.com/%E3%80%8C%E8%A7%86%E9%A2%91%E3%80%8D%E8%A7%84%E6%A8%A1%E5%8C%96%E6%95%8F%E6%8D%B7spotify%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%96%87%E5%8C%96/</link>
      <pubDate>Wed, 24 Jun 2020 02:04:10 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/%E3%80%8C%E8%A7%86%E9%A2%91%E3%80%8D%E8%A7%84%E6%A8%A1%E5%8C%96%E6%95%8F%E6%8D%B7spotify%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%96%87%E5%8C%96/</guid>
      <description>「视频」规模化敏捷Spotify模型的工程文化 在这里开视频
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」让产品的业务更清晰，在敏捷文化中，影响地图的艺术</title>
      <link>https://www.agilewalker.com/v-impact-mapping/</link>
      <pubDate>Tue, 21 Apr 2020 11:59:12 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/v-impact-mapping/</guid>
      <description>让产品的业务更清晰，在敏捷文化中，影响地图的艺术。另一个很棒的视频在这里。
[https://player.youku.com/embed/XNDY0MjU0MTg0NA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」15分钟，用产品负责人的视角看Scrum敏捷软件开发</title>
      <link>https://www.agilewalker.com/agile-product-ownership/</link>
      <pubDate>Sat, 18 Apr 2020 08:53:26 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-product-ownership/</guid>
      <description>15分钟，用产品负责人的视角看Scrum敏捷软件开发
[https://player.youku.com/embed/XNDYzNzY5NTc0MA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」敏捷文化中的Scrum是什么？ – 速成班带你深度了解</title>
      <link>https://www.agilewalker.com/scrum-crash-course/</link>
      <pubDate>Thu, 16 Apr 2020 03:36:39 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-crash-course/</guid>
      <description>[本视频长度1.5小时] 敏捷文化中的Scrum是什么？ - 速成班带你深度了解
[https://player.youku.com/embed/XNDYxMDk2NjgwMA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」敏捷开发Scrum实践 – 分解用户故事，让产品需求更易落地</title>
      <link>https://www.agilewalker.com/v-user-story-splitting/</link>
      <pubDate>Tue, 14 Apr 2020 03:52:25 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/v-user-story-splitting/</guid>
      <description>敏捷开发Scrum实践 - 分解用户故事，让产品需求更易落地
[https://player.youku.com/embed/XNDYwMzEwNjI1Ng==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」敏捷软件开发的用户故事，你了解么？产品需求获取的一把利器</title>
      <link>https://www.agilewalker.com/v-understand-user-story/</link>
      <pubDate>Tue, 14 Apr 2020 03:34:58 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/v-understand-user-story/</guid>
      <description>敏捷软件开发的用户故事，你了解么？产品需求获取的一把利器
[https://player.youku.com/embed/XNDYwMjQyNTI2MA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>敏捷Scrum开发7大事件之1：产品待办列表优先级排序</title>
      <link>https://www.agilewalker.com/product-backlog-prioritization/</link>
      <pubDate>Mon, 13 Apr 2020 08:44:13 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/product-backlog-prioritization/</guid>
      <description>&amp;lt;blockquote&amp;gt; &amp;lt;p class=&amp;quot;p1&amp;quot;&amp;gt; &amp;lt;span class=&amp;quot;s1&amp;quot;&amp;gt;“&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s2&amp;quot;&amp;gt;我们不必改变任何人的价值观，但必须让系统围绕真正的价值观运作&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s1&amp;quot;&amp;gt;” --&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s1&amp;quot;&amp;gt;《系统之美》&amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/blockquote&amp;gt; &amp;lt;h2&amp;gt; 为什么我们需要优先级排序？ &amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; 在日常生活中我们都会进行优先级排序，因为我们用有限时间去执行每组工作任务，这就是为什么我们选择最重要的先执行然后再执行次重要的原因。同样，我们在软件开发中对功能或任务进行优先级排序，因为有总有些功能比其他功能更重要。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;h2&amp;gt; 什么是产品待办事项优先级排序？ &amp;lt;/h2&amp;gt; &amp;lt;div class=&amp;quot;uvc-sub-heading ult-responsive&amp;quot; data-ultimate-target=&amp;quot;.uvc-heading.ultimate-heading-17775e9145c15b93f .uvc-sub-heading &amp;quot; data-responsive-json-new=&amp;quot;{&amp;amp;quot;font-size&amp;amp;quot;:&amp;amp;quot;desktop:14px;&amp;amp;quot;,&amp;amp;quot;line-height&amp;amp;quot;:&amp;amp;quot;&amp;amp;quot;}&amp;quot;&amp;gt; 产品待办事项优先级排序是敏捷软件开发中最重要的工作之一。 如果利益相关者，客户或企业尽早获得最有价值的功能，那么任何项目都是成功的。 可以通过有效地对需求进行优先级处理（用户故事）来实现。&amp;lt;br /&amp;gt; 待办事项优先级排序被用来组织产品待办事项条目（用户故事/缺陷/探针等），以制定其开发和部署的顺序。&amp;lt;br /&amp;gt; Scrum团队遵循此顺序以在梳理或冲刺计划期间选择产品待办事项条目。 &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;h5&amp;gt; &amp;lt;strong&amp;gt;待办事项优先级排序的优势&amp;lt;/strong&amp;gt; &amp;lt;/h5&amp;gt; &amp;lt;div class=&amp;quot;dt-fancy-title&amp;quot;&amp;gt; 商业利益&amp;lt;br /&amp;gt; -最快的投资回报&amp;lt;br /&amp;gt; -客户或业务满意度&amp;lt;br /&amp;gt; -更好地管理依赖项&amp;lt;br /&amp;gt; -最小化风险&amp;lt;br /&amp;gt; -关注价值驱动的开发 &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;dt-fancy-title&amp;quot;&amp;gt; 对Scrum团队的优势&amp;lt;br /&amp;gt; -通过选择的故事进行有效的梳理&amp;lt;br /&amp;gt; -通过选择的故事进行有效的Sprint计划&amp;lt;br /&amp;gt; -如果有富余产能，更容易看出增加哪些故事到当前冲刺更合适&amp;lt;br /&amp;gt; -如果由于团队成员缺席，紧急生产修复等导致产能下降，更容易看出从当前冲刺需要减少哪些故事 &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_column vc_column_container vc_col-sm-6&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_column-inner&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_row wpb_row vc_inner vc_row-fluid&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_column vc_column_container vc_col-sm-12&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_column-inner&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_empty_space&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;h5&amp;gt; &amp;lt;strong&amp;gt;优先级排序中对待不同的待办事项条目&amp;lt;/strong&amp;gt; &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 在优先级排序期间，产品事项中的所有条目都得到同等对待，包括缺陷或错误，新功能，增强功能，探针。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;img class=&amp;quot;alignnone size-full wp-image-976&amp;quot; src=&amp;quot;https://www.</description>
    </item>
    
    <item>
      <title>「视频」敏捷教练的工作是什么？让我们总览一下</title>
      <link>https://www.agilewalker.com/agile-coach-overview/</link>
      <pubDate>Sun, 12 Apr 2020 10:58:07 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-coach-overview/</guid>
      <description>敏捷教练的工作是什么？让我们总览一下
[https://player.youku.com/embed/XNDYyOTE3OTMyNA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的文章和视频。</description>
    </item>
    
    <item>
      <title>「视频」12分钟，立即就懂，敏捷教练工作的职业发展路径</title>
      <link>https://www.agilewalker.com/agile-coach-development-path/</link>
      <pubDate>Sun, 12 Apr 2020 10:51:50 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-coach-development-path/</guid>
      <description>12分钟，立即就懂，敏捷教练工作的职业发展路径
[https://player.youku.com/embed/XNDYyOTE3NDA2MA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的文章和视频。</description>
    </item>
    
    <item>
      <title>「视频」值得收藏，敏捷开发，解读冲刺燃尽图，及早发现问题，及早解决</title>
      <link>https://www.agilewalker.com/burn-down-chart/</link>
      <pubDate>Sun, 12 Apr 2020 10:46:36 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/burn-down-chart/</guid>
      <description>值得收藏，敏捷开发，解读冲刺燃尽图，及早发现问题，及早解决
[https://player.youku.com/embed/XNDYxMDk2Mjk0OA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的文章和视频。</description>
    </item>
    
    <item>
      <title>理解Scrum 度量和关键绩效指标</title>
      <link>https://www.agilewalker.com/understanding-scrum-metrics/</link>
      <pubDate>Tue, 07 Apr 2020 09:37:16 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/understanding-scrum-metrics/</guid>
      <description>—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更及时的更新通知。</description>
    </item>
    
    <item>
      <title>「视频」总结的真好，敏捷Scrum成果度量方法？锻炼英语，居然都看完了</title>
      <link>https://www.agilewalker.com/scrum-okr-kpi-metrics/</link>
      <pubDate>Mon, 30 Mar 2020 04:06:56 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-okr-kpi-metrics/</guid>
      <description>[https://player.youku.com/embed/XNDYxMDk3Mzg4MA==]</description>
    </item>
    
    <item>
      <title>「视频」Scrum和Kanban，有什么区别？哪个更适合你的团队？</title>
      <link>https://www.agilewalker.com/scrum-and-kanban/</link>
      <pubDate>Mon, 30 Mar 2020 04:00:37 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-and-kanban/</guid>
      <description>[https://player.youku.com/embed/XNDYwMjg2OTgzMg==]</description>
    </item>
    
    <item>
      <title>「视频」7分钟，ScrumMaster告诉你 – 如何打造一支敏捷团队</title>
      <link>https://www.agilewalker.com/how-to-develop-scrum-team/</link>
      <pubDate>Fri, 27 Mar 2020 10:46:38 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/how-to-develop-scrum-team/</guid>
      <description>[https://player.youku.com/embed/XNDYwMTM1Nzg4MA==]</description>
    </item>
    
    <item>
      <title>「视频」敏捷不仅仅是一个方法论！</title>
      <link>https://www.agilewalker.com/agile-is-not-a-methodology/</link>
      <pubDate>Sat, 21 Mar 2020 10:42:27 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-is-not-a-methodology/</guid>
      <description>[https://player.youku.com/embed/XNDU5Nzg4OTI0MA==]</description>
    </item>
    
    <item>
      <title>新冠疫情期间，简单介绍几款用于敏捷开发的协作工具</title>
      <link>https://www.agilewalker.com/agile-collaberation-tools/</link>
      <pubDate>Thu, 19 Mar 2020 05:30:39 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-collaberation-tools/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>简说敏捷转型可视化和可视化敏捷方法</title>
      <link>https://www.agilewalker.com/agile-visualization/</link>
      <pubDate>Thu, 19 Mar 2020 04:41:39 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-visualization/</guid>
      <description>在服务企业研发团队的过程中，我们发现不少团队碰到了类似的问题：
你经常在思考究竟哪些工作是最重要的？如何避免被无穷无尽的项目与工作淹没？
团队成员声称完成了自己的大部分任务，但团队实际交付的需求却寥寥无几？
由于某些问题导致工序一直处于等待状态，怎么识别和处理这些延迟？
成员之间不知道互相都在干什么？各自鸵鸟式地进行着工作。
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>从敏捷价值观看中国速度应对2020新冠肺炎疫情COVID-19</title>
      <link>https://www.agilewalker.com/agile-apply-to-2020-ncov-dealing/</link>
      <pubDate>Sat, 29 Feb 2020 08:48:58 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-apply-to-2020-ncov-dealing/</guid>
      <description>「2020-新冠病毒疫情最新情报速递」</description>
    </item>
    
    <item>
      <title>Scrum：我很好，我不是一个敏捷软件开发框架</title>
      <link>https://www.agilewalker.com/scrum-is-not-agilesoftware-framework/</link>
      <pubDate>Tue, 25 Feb 2020 04:16:15 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-is-not-agilesoftware-framework/</guid>
      <description>2019-新冠病毒疫情最新情报速递
Scrum联盟说：Scrum是一组简单但功能强大的原则和实践，可帮助团队在短周期内交付产品，从而实现快速反馈，持续改进和快速适应变化。
许多Scrum专家说：Scrum是一个产品开发框架。
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>聘请Agile Coach前，建议可以先问5个问题</title>
      <link>https://www.agilewalker.com/5-questions-before-hiring-agile-coach/</link>
      <pubDate>Fri, 21 Feb 2020 13:13:23 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/5-questions-before-hiring-agile-coach/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>XP里故事要INVEST和任务要SMART</title>
      <link>https://www.agilewalker.com/story-invest-smart/</link>
      <pubDate>Sun, 16 Feb 2020 16:20:24 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/story-invest-smart/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>敏捷教练日常工作中的检查列表</title>
      <link>https://www.agilewalker.com/agilecoachchecklist/</link>
      <pubDate>Wed, 12 Feb 2020 15:38:32 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agilecoachchecklist/</guid>
      <description>印象中当教练的都是上面这样👆 敏捷教练有这些日常工作需要检查：</description>
    </item>
    
    <item>
      <title>敏捷方法在家庭教育中让孩子自觉学习</title>
      <link>https://www.agilewalker.com/agilehomework/</link>
      <pubDate>Sun, 09 Feb 2020 02:27:59 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agilehomework/</guid>
      <description>作业完成前的看板
作业完成后的看板</description>
    </item>
    
  </channel>
</rss>
