<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>思考创新 on 捷伴行Agile</title>
    <link>https://leoyanlili.github.io/categories/%E6%80%9D%E8%80%83%E5%88%9B%E6%96%B0/</link>
    <description>Recent content in 思考创新 on 捷伴行Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2023 捷伴行Agile</copyright>
    <lastBuildDate>Sun, 20 Nov 2022 14:57:14 +0000</lastBuildDate><atom:link href="https://leoyanlili.github.io/categories/%E6%80%9D%E8%80%83%E5%88%9B%E6%96%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>038.打造用户喜爱的产品，离不开需求助推器|影响地图Impact Mapping</title>
      <link>https://leoyanlili.github.io/038-impact-mapping/</link>
      <pubDate>Sun, 20 Nov 2022 14:57:14 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/038-impact-mapping/</guid>
      <description>把重点放在客户在工作中期望的变化，而非仅仅是客户要完成什么工作。
-Robert Brinkerhoff
开篇 今天要为你解读的这本书是《影响地图》，副标题叫做“让软件产生真正的影响力”。简单地说，这是一本帮助大家通过有效方法提升产品规划能力，实现客户业务价值交付的书。《大规模Scrum》的作者之一Craig Larman建议了本方法的最终命名“影响地图”，敏捷宣言的共同发起人Tom Poppendieck在本书前言中说“影响地图可视化地呈现了我们所面对的问题的四个方面：为什么（WHY），谁（WHO），怎么（HOW）和什么（WHAT）。就像公路地图显示城镇以及连接它们的道路一样，影响地图展示了我们要构建的东西，以及它们与人们使用方案解决的问题之间的连接。”。
根据调查数据，在软件开发领域，交付后的软件中功能的使用频率上符合2-8定律，即频繁使用的功能占20%，很少使用和从来不使用的功能占80%。在产品规划阶段，搞清楚客户或者用户的真正需求是什么非常重要，这样才能让最终做出来的产品功能真正被使用，产生价值。影响地图就是一个很好的规划工具和需求分析方法，它通过可视化和结构化的的形式，将业务目标和产品功能之间建立关联，确保实现的产品功能都是对客户有用，并帮助确定需求的优先级，为公司带来尽最大的收益。
记得以前有个经常被说到的刻舟求剑的寓言故事，说是从前有一个人，坐船过江的途中，不小心把一柄剑掉到江中，只见他不慌不忙在船身上用随身携带的刀刻了一个记号，旁边人问他为什么不现在去打捞剑，却在船上做记号？他很得意的说，船上做了记号就是为了标记剑掉下去的位置，等到了岸边在下水打捞也不晚。听到这里，我想大家都笑了。这个故事包含着两层道理。一层是，人的思想认识如果不符合客观实际，就不会把事情做成功。另一层是，客观实际是不断发展变化的，如果把陈规旧章当成解决新问题的法宝，也要闹笑话。这是朴素的辩证唯物主义思想。
影响地图作为路线图或高级计划应该像导航软件一样工作（如百度地图）。首先，它会给我们指路，预测不同车型的行驶时间和行驶距离。假如一条道路关闭了，它会重新计算新的路线，给出替代方案，调整其计划并显示给用户。这才是现代的计划，根据目标不断调整，并展示效果。
本书作者Gojko Adzic，他的另一本书《实例化需求》获得了2012年Jolt奖的最佳图书，他的博客获得了2010年英国敏捷奖的最佳在线出版物。作为一名顾问，Gojko专注于敏捷和精益质量改进，特别是影响地图、敏捷测试、实例化需求和行为驱动开发。2012年，Gojko Adzic发明了影响地图方法，从而帮助团队将开发过程中的步骤与业务目标保持一致。
影响地图是一种可视化的，轻量级的，协作的产品规划方法。影响地图帮助交付团队和利益干系人可视化路线图，解释可交付成果如何与用户需求相关联，并沟通用户需求与更高层次的组织目标之间的联系。
该技术结合了思维导图和战略规划，让团队明确为了实现目标他们应该努力投入的方向。团队利用影响地图来分析假设，与组织的目标保持一致，并专注在有助于实现组织目标的事情上，避免所有其它不必要的活动。今天，我们就分四个部分来为你进行详细解读本书内容：
第一，什么是影响地图？
第二，为什么要用影响地图？
第三，谁应该用影响地图？
第四，如何制作一张影响地图？
1.什么是影响地图 与故事地图和思维导图相似，影响地图是一种用于产品特性识别和优先级排序的可视化方法。它通过识别相关的参与者，说明从主要目标到特定功能的路径，如何帮助实现预期的目标，以及完成这些期望的操作需要什么功能。 影响地图由高级技术和业务人员共同创建，它是在通过回答以下四个问题的讨论中而完善的一种思维导图。
第一个问题：为什么？定义目标，也是最重要的一个问题，回答：做事的目的。帮助团队更好地协调行动、识别真实的需求和设计更好的方案。目标不应该是关于构建产品或交付项目范围，它们应该说明为什么做这些事是有用的。目标应该表达要解决的问题，而非解决方案。
第二个问题：谁？定义角色，回答：谁能产生需要的效果？谁会阻碍它？谁是我们产品的消费者或用户？谁会被它影响？也就是那些会影响结果的角色。吉拉德·温伯格把价值定义为“交付给某些人的价值”。为了高质量地交付价值，我们首先要理解的是：这些人是谁，他们想从我们的产品或项目中得到什么。除了考虑从软件中直接获益的人，我们还要考虑其它能做出影响产品成功或项目结果决定的人。
第三个问题：怎样？定义影响，回答：角色的行为是怎样改变的？他们怎样帮助我们达成目标？他们如何帮助或妨碍我们取得成功？交付成功的关键在于理解客户想要做什么，而不是他们对于产品和服务的想法。这会帮助交付组织调查不同的技术选型，探索不同的解决方案，从而达成好的结果。影响不是产品功能，是业务活动而不是关于软件的想法。
第四个问题：什么？定义交付物，回答：作为一个交付组织，我们可以做什么来保证影响的实现？包含：交付内容、软件功能和组织的活动。交付计划和需求文档通常包含功能列表，却不包含这些功能为什么重要的背景。大型的组织中，项目利益相关人众多，最终的范围常常包含个人偏爱的功能，常常导致需求蔓延。影响地图把交付内容都放在它们希望达成的影响之下，清晰的层次结构方便我们对交付内容分组和比较，避免在相对不重要的角色、影响以及功能上投入过多。通过连接交付内容、影响以及目标，影响地图告诉我们之所以要做某个功能的因果链。
说完了什么是影响地图，以及它回答的四个关键问题，让我们在接下来的第二部分中看下为什么要用影响地图，它能为我们解决哪些问题呢？
2.为什么要用影响地图 一个完整的影响图可以用于多种目的。对于管理团队，可以说明业务影响并提供一个清晰设定的目标。有了清晰的目标，执行团队就有信心确定功能的优先级，并消除与主要目标无关的资源分配；对于产品开发，交付成果都直接与目标联系在一起，可以防止任何不会直接有助于成功的功能或范围蔓延；对于战略客户，影响地图也可以用作解释目标优先级决策的工具。
影响地图从三个方面架起了目标计划和迭代计划之间的桥梁：
在战略规划方面，影响地图是调动业务和技术专家共同参与的有效方法，他们从业务而不是技术视角达成对项目范围的一致理解。
在质量定义方面，影响地图让组织在整个交付过程中保持专注，帮助我们定义与改进并保证质量相关的活动，确定其优先级。它从整体上定义了对软件质量的一致期望。
在里程碑管理方面，交付的目的是达成业务目标，而不是预先定义的产品范围，通过频繁、迭代地发布，以反映利益相关各方对进展的一致认同。
影响地图除了在以上几个主要方面能够帮助我们，作者还在书中阐述了更多影响地图的作用：
在快速变化的环境，比如软件交付中，影响地图允许我们维护一个随着我们的交付和学习过程而改变的动态里程碑，瞄准目标，并让功能和范围附属于目标。通过在业务目标和交付内容之间建立映射，影响地图着重于约束并行的业务目标的数量和我们试图达到的影响，这与精益开发方法中限制在制品数量的思想是统一的。
设定可度量的目标能帮助我们更快地发现不切实际的期望，影响地图帮助我们寻找更简单的方案，分析出不能带领我们走向目的地的方案。
不仅软件开发中需要敏捷，业务获取中更需要敏捷。影响地图能让业务和技术专家澄清业务目标，并为业务方和技术交付团队提供了整体视图。进展汇报可以是已经实现了哪些影响或者是接下来从业务角度我们计划重点投入哪里。它让我们可以按照计划支持的影响而不是软件功能，来做出承诺，为项目干系人提供承诺，同时保持执行上的灵活性。影响地图把交付内容分解，从而推动迭代交付。
影响地图按照“对角色行为的影响”来获取业务方的需求。我们只需关注当前最重要的角色影响，等到开始工作于某个影响时，我们再启动这部分的需求。每个用户故事都要在地图上找到自己的位置，我们需要努力思考通过用户故事要达成什么目标，这样就能更好地表述它。
影响地图可以很好的组织发散和收敛思维，捕获选项，让我们可以讨论这些选项。在发散阶段，团队产生可供探索的选项；在收敛阶段，团队决定哪些选项值得进一步深入。
影响地图帮助高级技术人员和业务方一起在白板上画出地图，从可视化的会议中获益，它让规划会议变得高效很多。在实践中，影响地图的结构可用于引导有效的讨论，把不同的角色组织到一起，成为一个拥有共同目标的小组。
很多组织都把IT当着成本对待，交付团队汇报是基于开发的时间和人力投入，他们更关注成本，而不是交付带来的成果和收益。影响地图可视化了交付内容和影响，并且把它们和业务目标连接起来。通过关注业务目标，辅以有效的度量，这样我们就可以通过问“它的价值有多少？你愿意投入多少？什么时间需要？”来回应成本和时间的问题。
影响地图告诉我们一旦目标实现之后，就不需要继续投入相关工作，可以转移到其它重点领域。影响地图拒绝不贡献任何有促成影响或目标的功能；影响地图清晰地展示了假设，以便于我们跟踪和验证它们；影响地图帮助利益相关人在功能和收益之间建立更好的关联，从而更好地决定优先级。影响地图可以帮助团队通过构建产品和交付项目来产生实质影响，而非仅仅发布软件而已。
说完了为什么要使用影响地图，让我们在接下来的第三部分中看下谁应该使用影响地图，在哪些场景下使用呢？
3.谁应该使用影响地图 前面也说了，影响地图可以被用于多种不同的目的。根据我们想要实现的结果，需要在不同的时间让不同的群体参与进来。下面将要说到的是关于谁应该参加影响地图的会议以及主要场景。
设定愿景。影响地图是为新产品里程碑设定愿景的好方法。常见情况是，当交付组织与外部客户合作时，或当组织想要聘请第三方交付机构时，并准备一份工作说明或征求建议书。在这种情况下，准备影响地图的通常方法是让主要利益相关人参与协作研讨会。会前可以通过提供业务目标草案来为研讨会做准备，让利益相关者在研讨会期间完善和改变目标，专注于讨论影响。然后交付团队成员参加第二个研讨会，以提出与所选影响相匹配的交付物的建议。
专注交付。当某项计划有很多目标，而且多个利益相关人的优先事项冲突时，影响图有助于对组织内优先事项的共同理解，使用影响地图来专注交付的常见场景是有大量工作涵盖不同的目标，当正在进行的计划有大量积压的大故事难以确定优先级的时候，或者当团队不知道什么时候该叫停不会成功的工作。为了专注交付，利益相关者和交付团队共同创建影响地图是很重要的。利益相关者和交付团队成员从目标开始，将讨论重点放在影响和高层面的可交付成果上。
重塑问题。当交付计划的目标不明确或没有得到分享时，影响图有助于让利益相关者通过重新定义问题就方向达成一致。组织为此目的使用影响图的典型场景是可能是某个人掌握着复杂的业务知识，项目停滞或不再交付价值，或者在大型项目开始的时候没有明确目标。在这种情况下，影响地图应仅包含高层面的可交付成果，而不要包含太多细节。
正如作者所说，本书面向的主要读者是负责产品开发或软件交付的高级人员，他们可以来自业务方，也可以来自交付方，包含业务发起人以及拥有这些职责的人，产品拥有者、项目总负责、产品线管理、产品架构、业务分析、质量改进和保障，以及产品交付。作者的大多数经验在迭代交付模式上，所以从这个视角来写作，如果你的工作环境与作者经验类似，那么收获也会更大。
对软件项目中的业务人员：可以学会如何更好地沟通业务设想。 对高级产品和项目发起人：可以学会如何更高效地与交付团队沟通假设，怎么让交付团队更积极参与做出好的决策，以及如何高效地管理项目组合。 对应用敏捷、精益方法或精益创业思想的团队：可以学会如何让交付更有重点，并让业务方和用户更好地参与交付过程。 对向敏捷或精益方法转型的团队：将了解应对规模化精益和敏捷实施常见问题的方法，比如创建整体视图，把工作细分为具备业务价值、并可以汇报有意义的进展的工作项。 影响地图是为产品负责人、业务发起人和与交付团队一起工作的高级技术负责人准备的，他们可以集中精力、重新定义现有的方案或者为一个新的想法沟通一个愿景。
目前为止，已经和大家分享了影响地图的主要的方法论，最后再让我们从第四部分中了解实际工作中如何与团队共创影响地图吧。
4.如何制作一张影响地图 想要发挥影响地图的最大功效，就要与高级技术和业务人员一起工作。当一组人从不同视角来解决同一问题时，我们也就在发挥集体智慧。建议最好计划两次会议：第一次是定义预期的业务目标；第二次来制作一张地图。
第一次会议（准备） 步骤一：发现真实目标
让小组确定出可能的目标并将其写到白板上面，这样就可以讨论和对比。确保大家对项目或里程碑交付的目标数量达成一致。作者建议我们还可以问：“为什么这个功能很重要”或者“它如何才能有用”。要不断地提问，直到引出与钱相关的话题。Chris Matts认为要彻底弄明白如何省钱、赚钱或者保护钱。
步骤二：定义优秀的度量
在画影响地图时，即使团队已经确定了业务目标，还要讨论如何度量它们，使目标其更具体。注意，要度量那些有价值的内容，而不是那些容易跟踪的。作者在书中引用Tom Gilb在其著作《竞争工程》中对如何为目标建立精确度量提出了很多优秀建议。
步骤三：计划首个里程碑
有了目标和度量方法，就要要让业务人员统一意见，选择放入现有里程碑的目标。可以用点数投票或虚拟货币法，能为优先级设定提供指导。采用敏捷迭代交付的团队应当每次处理一个目标。因为当完成一个关键目标后，情况也可能会发生变化。
第二次会议（制作） 步骤一：画出地图框架
将第一个里程碑放在整个图中间位置，然后将它与一些关键的高层次的交付物相连。角色、影响和交付物三要素的初始集合，可以引导大家的思维过程。注意，开始只需列出一些关键功能来引导进一步的讨论。作者建议我们需要反复问自己：这个功能对这个影响有贡献吗？这个影响对这个角色有效吗？这个影响对实现目标真的有用吗？</description>
    </item>
    
    <item>
      <title>「视频」运维自动化之Ansible入门</title>
      <link>https://leoyanlili.github.io/video_ansible_entry/</link>
      <pubDate>Sat, 23 Apr 2022 12:10:41 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/video_ansible_entry/</guid>
      <description>[https://player.youku.com/embed/XNTg2NzEzNjYyNA==]
视频链接</description>
    </item>
    
    <item>
      <title>敏捷软件开发工作估算方法 – 故事点和工时</title>
      <link>https://leoyanlili.github.io/storypoint-man-hour/</link>
      <pubDate>Thu, 03 Feb 2022 06:13:32 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/storypoint-man-hour/</guid>
      <description>你如果无法度量它，就无法管理它
&amp;ndash; 彼得.德鲁克
软件开发组织工作估算的思考 我们人类天生不善于估算，要不就是过于乐观，要不就是过于悲观，就是很少有现实主义。尤其是我们软件开发行业，有太多的未知数：技术一直在变；新需求不断涌现；任务之间或人与人之间错综复杂的依赖关系；还有外界环境存在的各种因素。工作量主要与三方面因素有关，任务的规模，任务的复杂度以及完成该任务的人员能力水平。
为什么要做估算？ 第一个原因是帮助我们做出周全的决定。有了估算，我们就知道软件产品清单上的需求是否能在指定的期限实现或需要多久才能完全实现。
第二个原因是设定目标。如果我们给自己制定了一个最后期限，就会全力以赴确保达到目标，当然，也有完全不靠谱的时候。当然，估算和设定目标毫无疑问可以帮助我们保持专注并取得最大成果。
一句话：了解团队在软件开发过程中的客户价值产能、组织投入的成本并做出更合理的交付计划和客户报价。
理解故事点和工时 在很长时间里，工时（人天/人时）是研发团队中的指标，能直接反映出：完成某项工作需要几个人做多长的时间。这一指标确实让许多研发团队获得了评估项目人力成本的基础数据。
然而在实际操作中，开发者的工作几乎无法被标准量化。不同的开发人员，其能力本就有所差距；更重要的是，每一项具体的开发任务，它的规模、复杂度和风险等可能有着巨大差异。仅仅统计工时，并不能反映团队的开发速率。因此，在敏捷开发中，提出了应当用故事点来估算工作量。
1个故事点是1个标准单位的工作量，是对工作规模的相对度量，它估算出的是对于完成此需求所要的开发规模的大小。这个单位并不能直接指代该项需求需要的开发时间。工时是绝对的度量单位，故事点是相对的度量单位。举个例子：在同一个餐桌上，同样是一碗饭，小强10分钟就能吃完了，小美需要20分钟才能吃饭。在这个例子中1碗饭就是标准单位，每个人吃饭的效能是不同的，小强20分钟可以完成2个标准单位，而小美只能完成一个标准单位。在软件开发行业，同样的用户故事，交给不同的人实现，用不同的时间，就表明每个人的产能不同。故事点作为标准单位更客观地衡量了团队产出的客户价值，而工时却无法反映这点。
价值评估和成本评估可以并行 前几天与公司的同事和领导就故事点和工时，这两种敏捷软件开发的工作量度量方式有过一些探讨，在适应公司现状的敏捷开发过程中，我认为故事点和工时两种反映工作量的方式，可以结合使用。对于用户故事（功能需求）的评估，我们用故事点这种相对的规模估算方式，估算过程更容易，更客观，成本更低，故事点可以用来反映迭代中团队的客户价值产能；对于从用户故事分解出来的每个子任务，我们可以请具体开发人员评估任务工时，结合开发人员的单位时间成本，工时可以用来反映组织投入迭代的直接成本。这样既可以遵循敏捷Scrum的实践方法，又可以与公司软件项目以成本管理为目的工时估算对齐。
评估对象 评估方式 采用概念 度量单位 说明 优势 用户故事（需求） 集体评估 价值评估 故事点 story point 用来计算交付的客户价值 数据生成快速，客观；团队共同参与更加全面；绩效的依据 开发任务(用户故事拆分子任务) 个人评估、Leader 核验 成本评估/工时评估 人时或天 man hour/ man day 用来计算组织的投入成本 便于组织的成本管理 用户故事估算方法（PO创建，价值评估） PO、开发团队（含测试/UI同事）共同参与需求澄清 敏捷开发中的估算扑克方式集体估算（故事点） 迭代中根据实际情况商议调整 开发任务估算方法（团队创建，成本评估） 开发团队（含测试/UI同事）共同跨职能分解每个用户故事到若干个具体任务 团队每个人对自己领取的具体任务，根据经验估算并登记（工时） 开发Leader最终核验 故事点评估的优势 故事点标准客观，帮助推动跨职能行为沟通，即团队从UI到DB（任务层面仍然可以估算个人工时） 每人都要参与估算，沟通更加充分，需求理解的更加清晰，提前暴露产品设计的不确定性，避免需求盲点 促进了团队成员之间的融合和互相理解，有助于工作中更好的跨职能协作以及合作完成用户故事开发 相对大小更容易评估，工时却不易评估，如果需要，后期可以转换成团队的平均工时 规模是客观的，故事点估算不会衰减，随着团队的成长，能体现团队迭代速率即产能的变化 通过有足够的迭代或冲刺，可以衡量出团队的开发速率，做出更合理的交付计划和客户报价 小结一下 故事点和工时并不互斥。它们一个用于估算工作复杂度，一个用于估算工作时长。故事点最重要的作用，是团队在产能上形成了一个参考基准。一旦团队通过几次迭代捕捉到了产能容量，就可以此为参考，与产品方、业务方达成交付效率的共识。这样既能避免拍脑袋给计划又给不准的局面，还可用数据可视化地呈现研发团队的效能变化。如果组织把记录的工时当做产出或人效的管理方式，说明组织对目标的管理缺乏掌控或缺乏信心。敏捷开发摒弃只衡量工时的思维，因为工时只代表着一种成本，我们要关注完成需求的速度和质量就足够了，这才是唯一重要的事情。此外，敏捷团队还应该在合作开发的同时，思考如何真正集中力量少量多批次持续输出优先级更高的用户故事。
最后，不论采用故事点还是工时又或者两者结合，都需要每个团队不断探索更适合自己的方式，找到能有效估算并呈现自身产能的最佳道路。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>谈我们的研发运维一体化交付模式</title>
      <link>https://leoyanlili.github.io/about-devops-delivery/</link>
      <pubDate>Mon, 27 Dec 2021 14:36:34 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/about-devops-delivery/</guid>
      <description>物有本末，事有始终，知所先后，则近道矣。
&amp;ndash; 《大学》
[TOC]
一、说在前面的话 本文旨在记录下本人与同事，同行，以及相关领导关于研发运维一体化，架构优化与创新问题所进行的无数对话，讨论的内容，通过这些对话与讨论，很多人为本文提供了有价值的输入。
在经历了产品研发团队工作1年多的时间和开发运维团队工作6个月的时间之后，想起应该说下我们研发运维一体化技术那点事儿。每个人从不同的视角看的感受肯定不尽相同，通过本文分享下我的理解，希望大家在此有一个彼此碰撞的机会，产生更好的思考。
任何成功的架构都是适合企业自身的架构。形成过程中的挫折再所难免，非常感谢公司管理层看到我们不断的改进，交付向好的趋势，坚定地给予了团队足够的技术战略支持和耐心。CTO带领我们大家在一年半时间里，通过无数次碰撞，碰壁，不断修正中形成了当前的研发运维一体化的技术架构和协作模式，并且还在持续地改进中，印证了那句话：成功不是终点，失败也不是末日。
业务目标必须是驱动IT变革的原因，而原因又会驱动IT变革的方式。面对客户的业务，要求我们产品交付过程要更加优化，要更加敏捷，适应变化，对客户要更具有响应力，利用更少的资源做更多的事情，更高效、更快速、更高质的交付；我们要创新，吸引并发展客户群体，针对市场，灵活应变。这些是变革需求产生的驱动力，是实现开发运维实施效益的工作动机。
二、产品研发运维架构 当今，基于微服务、容器化和DevOps的云原生应用架构得到了越来越多的关注。 微服务通过将复杂的系统进行解耦从而使业务功能的修改和增加变得更加容易。专注业务的微服务技术，将一组提供少量功能的服务集合整合到一起，这些系统的整体功能来自多个服务，基于此架构能最小化团队间显示协作的需求，最大化独立部署服务的能力；容器技术提供了很好的横向扩/缩容与自愈能力；保驾护航的DevOps方法，源于敏捷开发，保证了所有环境的一致性，持续集成、持续交付（每次交付都是随时可以部署的）、持续监控、持续反馈，更加有条不紊。 产品研发运维一体化工具集（图），带标记的是我们实际在用的开源工具，产品研发中心在用的工具链覆盖软件产品研发运维的全生命周期的主要方面，工具来自免费的开源社区，目的是促进良好的协同、高效的交付、不断改进工程能力，目前主要致力于以下几方面： &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224155225202.png&amp;quot; alt=&amp;quot;image-20211224155225202&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 流水化集成和部署：自助式的图形化发布操作直观简易，开发人员可以有更多的时间在业务实现上，减少代码提交和部署之间的时间；配合敏捷迭代，每天N次快速发布。 镜像化管理和交付：客户发布有镜像仓库，本地研发有镜像管理；图形化管理镜像和容器更高效，镜像保证所有环境的一致性；大幅提升环境的运维的效率。 可视化监控和告警：研发环境监控、客户应用监控、应用日志监控、故障即时告警；在客户发现问题前响应问题，团队再也不会后知后觉，缩短响应周期，提升客户服务质量。 代码化基础架构：Jenkins脚本，负责代码集成与构建，发布本地研发环境或推送镜像仓库；Docker脚本，负责应用镜像的生成，容器运行；Shell脚本，负责客户生产环境部署，数据和文件备份，数据迁移，收集监控数据；这些代码消除了重复命令行操作，提升运维效率，代码生成一致可维护的基础架构环境，帮助开发人员专注于业务代码实现。 文档化操作流程：包括基础环境搭建，应用环境部署，业务数据备份，租户数据迁移；研发交付流程更清晰，节省人员工作交接的时间，避免人员单点故障，提高知识传递的效率；目录化也帮助操作过程的标准化。 产品研发运维一体化架构（图）在我们产品研发交付中，利用已经建立的工具链，遵循开发运维的基础架构即代码的方式，以统一的配置和代码，产生一致的服务基础环境，提供给客户业务应用服务，根据部署不同环境的迁移标准，自动化部署到开发环境，测试环境，准生产环境和客户生产环境。 &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224151744758.png&amp;quot; alt=&amp;quot;image-20211224151744758&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 实现持续交付所需的架构转换使功能变更得以按照小批次进行交付，这些变更包括开发到运维完整周期的所有代码，配置，基础设施，数据，脚本，部署流程等的变更。 架构支持多钟交付方式，其中以云端SAAS交付和客户私有化交付两种方式最常用，SAAS交付通过持续交付流水线快速完成敏捷迭代后的更新，私有化交付是通过持续交付流水线完成客户应用镜像并上传云端镜像仓库，然后从客户服务器进行授权的镜像拉取，在线部署，十分便捷。 我们对业务环境的应用服务进行实时健康状态监控和日志记录，并会对生产环境的业务数据以及文件进行全量和增量备份。 三、产品研发运维协作 产品研发运维活动协作（图）中我们每个团队都有一定的工作边界，这种边界不会泾渭分明，基于组织战略，在交付活动中是共同融合的，这样可以保障工作中的衔接更加顺畅，不会有断层，彼此都了解相关的工作情况，能让更多的人有面对问题的知识储备。我们并不以团队职能划分进行协作，而是以交付活动本身聚合各个团队的能力进行跨职能的敏捷团队协作，目的是尽早发现并解决交付的质量问题。 * 产品研发活动前移对接客户需求；质量保证活动前移，一方面，测试人员在需求上前移与项目交付合作接近客户，另一方面，开发人员在开发中引入测试驱动开发，让质量工作前移，从代码编写的过程中就开始；开发运维即DevOps活动顾名思义，在工作中前移对接开发，意味着不仅需要治理研发的环境，还要对研发出来的软件产品架构和代码有一定的了解，以便更好的完成运维工作。 * 项目交付活动是最接近客户价值的活动，而客户价值活动是和我们的业务视角对齐，产品研发到测试再到项目实施，开发运维工作贯穿始终，研发运维一体化就是用敏捷开发方法论结合DevOps技术实践，助力研发交付流水线的提升，开发和运维都希望能尽快迭代，不需要约定某个特定的时间，流水线时刻可以接受发布任务。如果迭代开发，我们每两周发布一次生产环境，我们每天都要有若干次的测试环境部署，更多次的开发环境部署。协同交付和持续反馈，是实现持续改进和质量保障的必要条件。&amp;lt;/ol&amp;gt; ### 四、带给研发的价值 1. 良好的代码版本管理（图），可以随时为部署任一版本的客户进行热修复 * 持续部署流水线，允许开发人员一键自助式部署到被授权的任一环境，如果在研发环境中，仅需几分钟即可完成一次部署；我们的私有镜像仓库，允许研发或运维人员从远程为客户环境进行自助式的私有化部署，仅仅需要执行1个部署脚本，业务应用服务的便会自动更新，排除网络影响，每个微服务组件的发布仅需1-3分钟，整个业务应用的发布在15分钟内可以完成。可以很快对迭代功能进行在部署环境下的验证。 * 可视化的监控，包括环境监控、应用监控、系统监控，团队可以快速获得反馈，随时改进，更少的意外问题和救火行为，意味着我们有时间做更多的技术架构提升和产品功能迭代。 * 研发环境、业务环境的数据安全，定时自动备份，产品研发数据备份，研发基础环境数据备份，客户业务数据备份，保护了我们的无形资产。 * 基础设施即代码，开发应用程序一样开发基础设施代码，运维代码和研发代码都在版本控制管理之下。上线一个虚拟环境或一个环境的新版本，就变成执行脚本的过程，脚本可以创建并提供一个或一组镜像，完成从操作系统到应用服务集的部署与配置。过去几个小时甚至几天才能完成的工作，现在只要几分钟。&amp;lt;/ol&amp;gt; ### 五、带给组织的价值 1. 专业的技术框架和研发流程，更具有行业的影响力和承诺客户的信心。 2. 根据组织的业务计划，有持续可评估的交付计划，能够敏捷以及快速响应客户反馈，成功交付。 3. 更高效的主动运维服务，持续监控，团队可以在问题影响客户业务之前，及时解决，保障客户满意度。 4. 更低的交付成本和运维成本，组织持续投入的DevOps活动，从而确保标准化、流程化的业务应用和研发环境治理，无需任何定制和人工重复的浪费，更加精益。 5. 敏捷文化的方法和技术落地，有效的传播，让更多的团队从中受益。 ### 六、带给客户的价值 1. 从容应对快速变化的业务需求，可以做到对业务的无感知更新，保障业务连续性。整个热部署、快速部署过程从变更的源代码提交到客户业务人员手中的可以使用的功能，在10分钟左右可以完成。 2. 保证业务数据安全，每天都有定时的自动全量和增量的备份，可以做到从故障中快速恢复业务的容灾恢复能力。 3. 统一平台的可视化监控、应用运行日志、故障告警即时提醒，客户关心的一切，尽在掌握。 ### 七、走向未来的路 前面看到本文的主标题，我们这里说的不是单纯的从速度维度来说越快越好，产品研发交付会思考：如何在质量保证，客户满意前提下，合理的快。先想在哪方面快，再讨论怎么快，最后再说有多快。 敏捷或速度的诉求是研发运维一体化存在的第一性原理。我们持续改进的方向主要在三方面：产品功能开发，开发运维环境，组织协作流程。诸如敏捷、开发运维这样的新方法，以及云计算、微服务这样的新技术，加速催生了新的IT能力。在整个组织内实施研发运维一体化，让团队变得更加敏捷、高效及创新。技术架构面临的挑战是未来业务多变，速度要快和稳定性要高，系统更复杂。 我们着眼当前的产品交付工作，努力提升团队满意度，组织满意度和客户满意度；保持短期日常改进工作，做好质量化开发，流水化部署，容器化交付，可视化监控，代码化基础架构，自动化运维；坚持做好未来长期的规划，目标就是：帮团队增效，帮公司降成本，保障客户业务持续价值。 2021年即将过去，2022年很快来到，关于开发运维团队接下来推进的几个主要方向上的工作如下： 1.</description>
    </item>
    
    <item>
      <title>我们的DevOps如何让客户生产环境从“0”到完全恢复</title>
      <link>https://leoyanlili.github.io/devops-from-0-to-done/</link>
      <pubDate>Sun, 14 Nov 2021 09:17:17 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/devops-from-0-to-done/</guid>
      <description>人能弘道，非道弘人
&amp;ndash; 论语.卫灵公
危与机的开始 最近工作有些吃力，11月4日当天特意请了两小时假，提前下班，吃完晚饭刚坐下来，打算简单看个电影，然后好好睡一觉恢复下体力。不想发生了一次突发事件。
19:43，有同事在群里问是否能连上客户的服务器，一开始也没有太当一回事，服务器连不上也许只是网络暂时情况。
20:26，刘博在群里紧急拉DevOps的同事入群，心里咯噔一下，看来是出了点状况，赶紧坐到电脑前开始关注群里的沟通。
20:36，一阵急促的电话声，刘博来电，果然事情有点不太妙，新资产的应用服务器重启后就无法启动，应该是宕机了，DevOps团队需要全员上线应急恢复服务器应用环境，崔总开始协调第三方系统集成供应商恢复服务器的基础操作系统，幸运的是目前只有新资产系统的应用服务器宕机，数据服务器安然无恙，刘博指示先备份数据服务器上的所有相关数据，以防万一。
20:50，我们开始等待第三方供应商完成服务器操作系统的重新安装，同时内部分配每个人的VPN账号，进行数据库和文件存储的备份。
21:36，参考之前准备的资产系统部署手册，团队基本明确了针对客户新资产平台应用服务器恢复的具体分工。
台上三分钟，台下十年功 22:00，第三方把服务器安装完毕，经过漫长的等待轮到我们正式开工上场了，之前小杨在公司WIKI上准备的部署文档有了用武之地，这是我们应用服务器环境恢复的参考流程，刘博又帮我们捋了一下思路，排除一些本次系统恢复不必要做的步骤，于是最终需要做得只是一部分，而且有了之前工作积累的经验和成果，这一切使大家有信心可以很快完成。
插播一下DevOps之前的部分工作：
目前我们持续交付流水线可以实现一键发布，将资产系统的客户业务应用镜像上传到公司的私有云，这就是我们对客户的镜像仓库，在这里我们维护了每次交付给客户业务应用的不同版本，配合几个已经准备好的，放在私有云上，占用很少存储空间的启动脚本，可以提前下载到客户服务器上执行，进行统一的自动化部署，可以实现在客户服务器上完成快速部署。
简单科普一下镜像的概念，大家可以把它理解成一个不依赖于操作系统环境的业务应用的小盒子，我们可以利用若干个这样的小盒子以及它们之间形成的关系，在任何服务器和操作系统中搭建出一套一致的业务应用系统。能节省大量的问题解除过程。运行起来的镜像，我们称之为一个特定的容器。我们资产的平台是由几个不同的镜像组合而成，就像人的身体不同部位，只有共同上线成为运行容器才能协同一致工作，表现出一个完整的人的能力，缺一不可。
22:43，小邵，一位新加入DevOps团队不久，根据个人的经验以及部署文档完成平台基础环境的搭建。
23:11，小杨，一位在DevOps团队成长迅速的实习生，利用提前准备的部署脚本下载并重启所有的公司私有云镜像仓库中的资产的业务应用镜像，当这些镜像在客户服务器运行起来后，整个资产业务系统就运行起来了。
23:30，小杨在群里发了系统恢复后的新资产系统的界面截图，宣告了我们这次紧急系统恢复的成功。大家在群里简单总结了一下，互相感谢后道声晚安，结束了这次紧张的紧急恢复工作。
这次危机的解除实际工作时间仅为1.5个小时，算上前期的准备工作也就2个小时不到，这是对我们之前积累的一种自我认可，也是各位领导与团队一起协作的共同成果。
DevOps团队搭建的持续集成和持续交付流水线帮助产品研发团队轻松实现每日多次的自动化构建及发布，使得随时可以把新开发出来的功能特性交付给测试团队和最终用户成为现实，大大提升了对客户响应能力，缩短了交付反馈环，这在以前没有持续部署或发布的研发技术条件下是无法想象的。当然后面我们还有很多改进的空间。
最后，鉴于这次突发事件，我们向客户提出申请异地备份服务器，同时建议有条件的话一定要有定期的整机备份机制。
其大无外，其小无内 我们先来看个问题，企业需要实施DevOps的情况：应用上线（哪怕是改动一行代码）需要多长时间？
大家认为一般的周期通常是月、周、天、小时？如果大家发布周期在周级别，还有大量的工作靠人工执行，我们需要尽快引入DevOps了。
这是来自维基百科的解释，“DevOps是一组过程、方法与系统的统称，用于促进开发、运维部门之间的沟通、协作与整合。DevOps是提倡开发和IT运维之间的高度协同，从而在完成高频率部署的同时，提高生产环境的可靠性、稳定性、弹性和安全性。”
现在的软件开发已经不同于过去，产品要适应瞬息万变的市场，分工日益细化，一个成熟软件的规模已经不能奢望每个人成为全栈工程师能支撑得了的。尤其是对旨在于为了提高交付效率和伸缩能力的新的技术架构出现后，DevOps也随着敏捷文化的发展而融入越来越多软件组织的日常运营之中。DevOps小到掌握特定技术点，维护每个文档的细节，大到参与对研发工作规范的制定，传播对组织文化和价值观，把握DevOps的工作流程，提升软件组织的交付效能和客户满意度。涵盖从需求，开发到运维，反馈的整个过程，可以跨越团队，公司，甚至合作伙伴以及客户各方。这些都将纳入DevOps的日常工作和未来规划的视野里。
低头做事，抬头看路 应对危机，对他人而言也许是需要立刻解决的“危险”，但对DevOps而言，给了我们验证和改进工作的“机会”，是对我们平时工作积累之后的一种检验和反馈的过程，也为日后保障逐步建立一套成熟的因地制宜的流程和机制。在DevOps，我们不仅要低头做好眼前事，还要抬头看好远方路。不仅需要做好日常的事务性的工作，支持好组织的项目交付，还要建立工作规范和流程，技术能力和文档，通过具体工作支持其他团队在组织内部获得更多彼此了解的机会，更重要的是在这个过程中要做好敏捷转型的排头兵。
DevOps的长远的目标是自动化一切，监控一切，可视化一切，尽可能减少人工参与带来的不确定性从而引入更多的风险。在技术层面，我们形成持续编译、自动化测试、持续部署的能力；提升基础设施即编码的能力，将基础环境可编程化，项目团队成员可以自助获取；目前规划是先做好持续集成，持续交付和部署，根据痛点逐步优化，完善监控能力，以后还会做ChatDevOps，实现机器人值守。
简陋的笔，精彩的事 从本文开始的名言中，不难看出古代先贤也试图告诉后人：要成事，最重要的不是工具和方法，而是合适的人，只有人才能基于价值观和原则，把工具和方法运作在适配于自身企业的流程之中。这一点与敏捷宣言有异曲同工之妙。受限于我自身的笔头水平，无法详细说出这次紧急系统恢复事件中身临其境的精彩，不过无论如何我希望能尝试去记录这样一次DevOps作为主角所经历的故事。
加入DevOps团队的这段时间，我个人额外的感悟是DevOps不做人人眼中的战斗英雄或者救火队员，而是成为默默无闻的守护者。让外界感到风平浪静，才是我们作为守护者存在意义。DevOps团队大部分的时间是在为了避免发生危机而不断地思考和准备，静下来做好DevOps工作的心态应该是”行到水穷处，坐看云起时“。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>如何用伪领导力搞垮一个敏捷团队</title>
      <link>https://leoyanlili.github.io/how-to-destroy-a-team/</link>
      <pubDate>Sun, 25 Jul 2021 06:45:07 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/how-to-destroy-a-team/</guid>
      <description>《易经》乃诸经之首，中华民族的哲学思想的源泉。
做了多年的基层伪领导，自认做的不是很好，格局不高，事实也说明基层管理更适合本人的思维深度，大家看到这里，至少能判断出我的自省做得很好。本文总结了一些伪领导力，还请大家赐教。
不知“外圆内方” 说的是领导的根本法则，领导者有更加圆通的行为方式，同时要有较为公正的管理原则。
有些领导说的头头是道，正确无误；做的相差甚远。可称之为：外方内圆。举个栗子，中国人讲究亲疏有别，是很正常的人性，作为领导也会一样，面对同样优秀的下属肯定会给那个关系好的更多关照。但如果纯粹为了拉拢人，展示自己的领导地位，或为了让“自己的”人获得利益或上位，无视团队中那些各方面都更优秀的人。加以时日，团队必定心生厌恶，让优秀的人失去信心，导致劣币驱逐良币，留下来的人一门心思只想着怎么去跟领导搞好关系，配合领导建立自己的势力圈，而不是想着怎么把业绩做好。最终必将导致团队效能下降，失去原动力。我们的老祖宗都说在合理范围内玩弄权术，搞人是可以的，不过，以终为始，如果公司给予领导者的权力让公司蒙受损失，最终一起受害的肯定是领导者自己。
另外有些领导一身正气，原则性极强，对团队要求是分毫不差，不懂变通。可称之为：外方内方。这样的领导的确能做成一定的事情，但同样不符合中国的管理文化，要求领导者有包容的心态，遇事“可为可不为”。否则，可能会付出更多的努力和遭到同事的反对。“中”为合理。中国人思想中充满对事物“合理”的思考，大家可以好好体会日常的经历。关于领导工作中合理的理解，可以接着看下文。
不愿“上，止，正” 说的是领导的三个节奏，领导要以“上”为进，以“止”为退，以“正”为守。
“上”是领导者不仅自己要有上进心，同时能带领团队向前，不断进行改进的尝试，引导团队的意愿，教导方法，也能根据团队当前的条件达到目前可以达到的更好的状态，从而使得交付效能持续改善，推进产品交付效率。
“止”是领导者懂得适可而止，过犹不及，团队能力在限定的条件下是有一定上限的，不可过分要求，不妨利用好这个机会，给团队鼓励和认可，帮助大家反思如何可以做得更好，记得一句话：“我们已走得太远，以至于我们忘了为什么而出发。”。
“正”是领导者行事要顶天立地，把权力控制在一定范围内、信任下属、处事合理，凡事不会只选择听自己想听的，看自己想看的，信自己想信的，而忽略去参考不同的见解。领导能从不同下属的各自的立场分别做思考，综合考量，就是个“正”的领导，或许最终的决策不是每个人都满意，但求有一个“合理”的支持。
如果把管理团队看成开车，“上”好比油门，踩上它，团队就会不断前行；“止”好比刹车，需要随时依据路况减速，避免风险；“正”好比方向盘，牢牢把握行驶方向，才能达到目的地。
不屑“治心，治力，治变，治气” 说的是领导的四个管理重点，带领团队就像带兵打仗。
治理人心。人心齐，泰山移。关心同事永远都不错，尤其在中国，饱含人情味的关切话语能营造一个良好的工作氛围；在公司原则允许的范围内实际帮助下属解决小难题，而他自然会用自己的努力来回报组织。记住：早上见面第一句话绝对不是说工作相关的事情。
治理能力。认清自己团队的能力，接受合理的工作，同时根据每个人的特点，耐心地来进行改进。当着第三个人的面批评一个下属是严重的失误。被批评的人可能会因此失去自信心，甚至以后做不好工作也没有任何负担感，因为你已经确认了他的无能。甚至会招致团队其他人的反感，放松对自己工作的要求。
治理改变。唯一不变的是变化，要帮助团队用变化的心态来看待困难和解决问题。称赞下属，尤其是对外称赞下属。这种称赞会辗转传回下属的耳朵，他由此得到的快乐要比你直接称赞他强几倍，他自然会更加热爱工作，朝你称赞他的方向改变。而如果总对外抱怨下属则会让人觉得你的无能，至少会认为你没能物色到出色的人选，或者没有能力让下属变得更优秀。
治理气势。把握好时机，利用好形势，鼓舞好团队。当团队状态低迷的时候记得给团队更多的自主权，耐心倾听，安抚好幼小的心灵，让团队看到希望，他们对你来说都是“孩子”；当团队斗志高昂的时候就可以给他们更大的挑战，表明你对他们能力的信任。对任何下属的建议你都该认真倾听。在通常情况下，下属都会经过思考才会提出建议，如果你仅用一个“不”字直接否定他，他会从此失去创造的信心。而倾听和讨论则会使你和下属都看到自己的思维死角，并有机会从中得到改善。
搞垮一个敏捷团队 完全做不到以上各小节的内容，必定能搞垮一个团队。无论如何，本文都是希望能助力你达到你所希望达到的目标！
还是那句话，一切方法是否有效，都很难讲，取决于天、地、人。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>未来领导者的敏捷品质</title>
      <link>https://leoyanlili.github.io/leadership-agile-qulity/</link>
      <pubDate>Sun, 27 Dec 2020 13:56:52 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/leadership-agile-qulity/</guid>
      <description>未来的领导者需要拥有清晰的价值观和愿景，需要真实和敏捷、内在一致并且目的明确。
&amp;ndash; 佚名
传统管理到现代领导 纯粹指挥协调型的管理者，会很快退出历史舞台。如果你是一位还有10年以上才能退休的管理者，一定要成为一个落地干实事的领导者，保持激情，在工作中与大家一起奋战。除非，你真的不在意。
传统管理模式：领导者 - 服从者 这种管理模式，基于不对等的身份认同，在对话场景中管理者始终是领导者，下属始终是服从者。不仅抑制了双方个人的发展，更让企业的发展无法与时代接轨。在这样的场景中，管理者和下属在工作中都没有想象力，企业更不会有创新力，始终处于被动指挥或被动服从的漩涡中。可以解释为：管理者想到的，让下属去干，下属干的过程中无需负责，不问对错。下属辛苦，领导英明。
现在管理模式 ：领导者 - 领导者 这种管理模式，基于共同的身份认同，在对话场景中管理者是领导者，下属也是领导者。不仅提升双方的领导力，为企业培养新的潜在领导者，由此来助力企业本身的在新时代的快速成长。在这样的场景中，管理者和下属在工作中都愿意投入自己的思考，共同参与决策，达成一致，分工执行，这样企业便会产生创新力，在这里共同指挥和执行的是企业的文化。可以解释为：管理者有愿景和目标，与下属分享，共同思考达成愿景的方法，查漏补缺。领导和下属共同成长。
领导的品质 个人认为，未来的领导者必须努力地自我发展来获得领导的资格。我们生活在寻找、甚至期待“速成”的世界，然而领导品质的培养既不可能速成，也不可能是容易的。这里说的是所有具有责任感的领导者都很可能具备的基本品质。
价值观 这里说的价值观，是指个人而不是公司的价值观。真正的价值观藏于人的内心，这些价值观在最深的层面上都是通用的，无论宗教，无论种族，无论国籍。
我们需要由价值观驱动的领导者，拥有具体明确的价值导向，以使它们能够更好地用在最适合的问题上，这里的价值观以集体为根基，而非个人自私的。个人价值观与企业奉行的价值观不相符的时候，会面临一些艰难的选择：离职；或者承担责任，改变现存价值观，使之更符合通用的和更高的价值观；又或者，他级别没那么高，就要在公司内部寻求如何表达自己的价值观，以帮助更多的人。
领导者不仅需要靠价值观驱动，还需要能够将价值观转化为原则，作为个人和团队的工作指南。
以敏捷价值观为例：
敏捷价值观
个体和互动 高于 流程和工具
工作的软件 高于 详尽的文档
客服合作 高于 合同谈判
响应变化 高于 遵循计划
敏捷的原则
我们最重要的目的，是通过持续不断地及早交付有价值的软件使客户满意。
欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。
经常的交付可工作的软件，相隔几星期或一两个月，倾向于采取较短的周期。
业务人员和开发人员必须相互合作，项目中得每一天都不例外。
激发个体的斗志，以他们为核心搭建项目。提高所需的环境和支援，辅以信任，从而达成目标。
不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。
可工作的软件是进度的首要度量标准。
敏捷过程倡导可持续发展。责任人、开发人员和用户、要能够共同维持其步调稳定延续。
坚持不懈的追求技术卓越和良好设计，敏捷能力由此增强。
以简洁为本，它是极力减少不必要工作量的艺术。
最好的架构、需求和设计出自组织团队。
团队定期地反思如何能提高成效，并依次调整自身的举止表现。
愿景 人们通常还是会根据实现短期财务业绩的能力来选择领导者，而不是根据他们的愿景，长远的愿景作为一种领导品质被削弱和低估了。当今世界各方联系紧密，交流即时迅速，因此，全方位的系统思考已经非常有必要，而且，将来它更不可获取。这自然而然成为个人成长的一个重要产物。
领导者的愿景分为两部分。第一部分是“展望”和“梦想”的能力，即要创造一个清晰而大胆的画面，也是领导者所希望追求的长期未来。第二部分是“有远见”，以鼓舞人心的方式传达这种画面的能力。通过对愿景的沟通和由彼此迸发出的激情，追随者才会产生。
真实 做真实的自己，意味着把自己从对于下列事物的恐惧中释放出来：害怕失败，害怕与众不同，害怕看上去很傻，害怕他人会有什么看法以及许许多多以自我为中心的害怕。有些管理者，刚刚学习了某个流行的概念，由于害怕失去控制或威望，就在一些专业的会议上发表“指示”，虽然现场的专家们碍于体面并没有提出异议，但也不免被暗暗贻笑大方。不仅缺少谦逊的品质，也让人感觉不够真实。绝对的真实，总是与最好的价值观和愿景密切相关。
敏捷 俗话说得好：唯一不变的就是变化。当今世界变换莫测，领导者必须具备灵活性、变革、创新和放弃过时的心爱的项目和过时的目标的能力。“主动迅速改变”是未来生存的必要手段。
敏捷是两方面的个人发展的成果，一方面是摆脱固有的成见和旧的信念与假设的束缚；另一方面是消除阻碍人们对改变持开放态度的对未知的恐惧。
尝试不同的事情可以锻炼心智的敏捷性，身体也会受益。做了从未尝试的事情，你会发现自己扛过来了，习惯是避免恐惧的重复行为，这就是为什么我们在组织转型中，需要重复与过去不同的行为方式。打破习惯，开辟了新的途径，一定能带给你新的喜悦。
一致性 领导者内在的或者心理上的一致性也是一种重要品质，它指的是人的内心不同次级人格的一致性与合作性。领导者的决策取决于他最重视什么，或者说他自己的价值观是什么，他奉行的是否与宣传的那样一致。有些管理者，在给别人建议的时候头头是道，并很乐意跟进具体的工作，看起来与公司价值观高度一致；然而，反过来被给予建议的时候，推诿抗拒，能不干就不干。这样的表现并不是一个合格的领导者。每个领导者都需要发展他内心的一致性。当我们内心发展时，我们的价值观会出现改变或者拓展，所以，这种内心冲突是我们成熟过程的自然结果。
未来的领导者 未来的领导者需要有清晰的价值观和愿景，还要真实和敏捷，并且保持内心的一致性。如果加上自我觉察、责任感以及自信和良好的情商，就是一个强大的组合，事实上，它们就在你的内心深处，只等待你去发现。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>有价值的产品=设计思维&#43;精益创业&#43;敏捷方法</title>
      <link>https://leoyanlili.github.io/designthinking-leanstartup-agile/</link>
      <pubDate>Sat, 16 May 2020 15:06:55 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/designthinking-leanstartup-agile/</guid>
      <description>设计思维是一个反复的过程，在此过程中，我们要努力理解用户的痛苦，挑战性假设，重新定义问题，以便创建新的策略和解决方案。
通常的设计思考阶段如下：
“精益创业是一种用于开发业务和产品的方法，旨在缩短产品开发周期并迅速发现拟定的业务模型是否可行； 这是通过结合业务假设驱动的实验，迭代的产品发布和经过验证的学习来实现的。” —维基百科
用埃里克·里斯（Eric Ries）的话说：“精益创业公司提供了一种科学的方法来创建和管理创业公司，并将所需的产品更快地交付客户。 精益创业方法教你如何驾驭一家创业公司，如何操纵，何时转向，何时坚持不懈以及如何以最大的加速度发展业务。 这是新产品开发的原则方法。”
将设计思维，精益创业和敏捷方法结合起来 简而言之，设计思想可以帮助我们提出更好的想法，精益创业可以帮助我们将想法转变为可行的业务模型，敏捷方法可以帮助我们以快速，渐进的方式将产品投放市场，从而获得持续的反馈，适应和准确交付客户想要的东西。
通过将设计思维，精益创业和敏捷方法结合起来，不仅可能提出更好的想法，而且将这些想法变成可行的盈利方式，为客户创造即时价值而交付产品，不会导致成本和进度井喷，并让员工有机会参与更多有意义的工作。
最后一点很关键，所有这些方法都使用户参与到频繁的反馈循环中，因此我们可以衡量进度并进行调整，从而最大程度地创造价值。这与以前的过度规划方法不同，通常要连续数月或数年才能完成，甚至到项目结束时都没有成就感。没有人愿意花数月或数年交付不产生影响或带来价值的东西。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>从敏捷价值观看中国速度应对2020新冠肺炎疫情COVID-19</title>
      <link>https://leoyanlili.github.io/agile-apply-to-2020-ncov-dealing/</link>
      <pubDate>Sat, 29 Feb 2020 08:48:58 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/agile-apply-to-2020-ncov-dealing/</guid>
      <description>「2020-新冠病毒疫情最新情报速递」</description>
    </item>
    
    <item>
      <title>Scrum：我很好，我不是一个敏捷软件开发框架</title>
      <link>https://leoyanlili.github.io/scrum-is-not-agilesoftware-framework/</link>
      <pubDate>Tue, 25 Feb 2020 04:16:15 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/scrum-is-not-agilesoftware-framework/</guid>
      <description>2019-新冠病毒疫情最新情报速递
Scrum联盟说：Scrum是一组简单但功能强大的原则和实践，可帮助团队在短周期内交付产品，从而实现快速反馈，持续改进和快速适应变化。
许多Scrum专家说：Scrum是一个产品开发框架。
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>敏捷方法在家庭教育中让孩子自觉学习</title>
      <link>https://leoyanlili.github.io/agilehomework/</link>
      <pubDate>Sun, 09 Feb 2020 02:27:59 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/agilehomework/</guid>
      <description>作业完成前的看板
作业完成后的看板</description>
    </item>
    
  </channel>
</rss>
