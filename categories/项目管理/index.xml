<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目管理 on 捷伴行Agile</title>
    <link>https://leoyanlili.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 项目管理 on 捷伴行Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2023 捷伴行Agile</copyright>
    <lastBuildDate>Sun, 20 Nov 2022 14:57:14 +0000</lastBuildDate><atom:link href="https://leoyanlili.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>038.打造用户喜爱的产品，离不开需求助推器|影响地图Impact Mapping</title>
      <link>https://leoyanlili.github.io/038-impact-mapping/</link>
      <pubDate>Sun, 20 Nov 2022 14:57:14 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/038-impact-mapping/</guid>
      <description>把重点放在客户在工作中期望的变化，而非仅仅是客户要完成什么工作。
-Robert Brinkerhoff
开篇 今天要为你解读的这本书是《影响地图》，副标题叫做“让软件产生真正的影响力”。简单地说，这是一本帮助大家通过有效方法提升产品规划能力，实现客户业务价值交付的书。《大规模Scrum》的作者之一Craig Larman建议了本方法的最终命名“影响地图”，敏捷宣言的共同发起人Tom Poppendieck在本书前言中说“影响地图可视化地呈现了我们所面对的问题的四个方面：为什么（WHY），谁（WHO），怎么（HOW）和什么（WHAT）。就像公路地图显示城镇以及连接它们的道路一样，影响地图展示了我们要构建的东西，以及它们与人们使用方案解决的问题之间的连接。”。
根据调查数据，在软件开发领域，交付后的软件中功能的使用频率上符合2-8定律，即频繁使用的功能占20%，很少使用和从来不使用的功能占80%。在产品规划阶段，搞清楚客户或者用户的真正需求是什么非常重要，这样才能让最终做出来的产品功能真正被使用，产生价值。影响地图就是一个很好的规划工具和需求分析方法，它通过可视化和结构化的的形式，将业务目标和产品功能之间建立关联，确保实现的产品功能都是对客户有用，并帮助确定需求的优先级，为公司带来尽最大的收益。
记得以前有个经常被说到的刻舟求剑的寓言故事，说是从前有一个人，坐船过江的途中，不小心把一柄剑掉到江中，只见他不慌不忙在船身上用随身携带的刀刻了一个记号，旁边人问他为什么不现在去打捞剑，却在船上做记号？他很得意的说，船上做了记号就是为了标记剑掉下去的位置，等到了岸边在下水打捞也不晚。听到这里，我想大家都笑了。这个故事包含着两层道理。一层是，人的思想认识如果不符合客观实际，就不会把事情做成功。另一层是，客观实际是不断发展变化的，如果把陈规旧章当成解决新问题的法宝，也要闹笑话。这是朴素的辩证唯物主义思想。
影响地图作为路线图或高级计划应该像导航软件一样工作（如百度地图）。首先，它会给我们指路，预测不同车型的行驶时间和行驶距离。假如一条道路关闭了，它会重新计算新的路线，给出替代方案，调整其计划并显示给用户。这才是现代的计划，根据目标不断调整，并展示效果。
本书作者Gojko Adzic，他的另一本书《实例化需求》获得了2012年Jolt奖的最佳图书，他的博客获得了2010年英国敏捷奖的最佳在线出版物。作为一名顾问，Gojko专注于敏捷和精益质量改进，特别是影响地图、敏捷测试、实例化需求和行为驱动开发。2012年，Gojko Adzic发明了影响地图方法，从而帮助团队将开发过程中的步骤与业务目标保持一致。
影响地图是一种可视化的，轻量级的，协作的产品规划方法。影响地图帮助交付团队和利益干系人可视化路线图，解释可交付成果如何与用户需求相关联，并沟通用户需求与更高层次的组织目标之间的联系。
该技术结合了思维导图和战略规划，让团队明确为了实现目标他们应该努力投入的方向。团队利用影响地图来分析假设，与组织的目标保持一致，并专注在有助于实现组织目标的事情上，避免所有其它不必要的活动。今天，我们就分四个部分来为你进行详细解读本书内容：
第一，什么是影响地图？
第二，为什么要用影响地图？
第三，谁应该用影响地图？
第四，如何制作一张影响地图？
1.什么是影响地图 与故事地图和思维导图相似，影响地图是一种用于产品特性识别和优先级排序的可视化方法。它通过识别相关的参与者，说明从主要目标到特定功能的路径，如何帮助实现预期的目标，以及完成这些期望的操作需要什么功能。 影响地图由高级技术和业务人员共同创建，它是在通过回答以下四个问题的讨论中而完善的一种思维导图。
第一个问题：为什么？定义目标，也是最重要的一个问题，回答：做事的目的。帮助团队更好地协调行动、识别真实的需求和设计更好的方案。目标不应该是关于构建产品或交付项目范围，它们应该说明为什么做这些事是有用的。目标应该表达要解决的问题，而非解决方案。
第二个问题：谁？定义角色，回答：谁能产生需要的效果？谁会阻碍它？谁是我们产品的消费者或用户？谁会被它影响？也就是那些会影响结果的角色。吉拉德·温伯格把价值定义为“交付给某些人的价值”。为了高质量地交付价值，我们首先要理解的是：这些人是谁，他们想从我们的产品或项目中得到什么。除了考虑从软件中直接获益的人，我们还要考虑其它能做出影响产品成功或项目结果决定的人。
第三个问题：怎样？定义影响，回答：角色的行为是怎样改变的？他们怎样帮助我们达成目标？他们如何帮助或妨碍我们取得成功？交付成功的关键在于理解客户想要做什么，而不是他们对于产品和服务的想法。这会帮助交付组织调查不同的技术选型，探索不同的解决方案，从而达成好的结果。影响不是产品功能，是业务活动而不是关于软件的想法。
第四个问题：什么？定义交付物，回答：作为一个交付组织，我们可以做什么来保证影响的实现？包含：交付内容、软件功能和组织的活动。交付计划和需求文档通常包含功能列表，却不包含这些功能为什么重要的背景。大型的组织中，项目利益相关人众多，最终的范围常常包含个人偏爱的功能，常常导致需求蔓延。影响地图把交付内容都放在它们希望达成的影响之下，清晰的层次结构方便我们对交付内容分组和比较，避免在相对不重要的角色、影响以及功能上投入过多。通过连接交付内容、影响以及目标，影响地图告诉我们之所以要做某个功能的因果链。
说完了什么是影响地图，以及它回答的四个关键问题，让我们在接下来的第二部分中看下为什么要用影响地图，它能为我们解决哪些问题呢？
2.为什么要用影响地图 一个完整的影响图可以用于多种目的。对于管理团队，可以说明业务影响并提供一个清晰设定的目标。有了清晰的目标，执行团队就有信心确定功能的优先级，并消除与主要目标无关的资源分配；对于产品开发，交付成果都直接与目标联系在一起，可以防止任何不会直接有助于成功的功能或范围蔓延；对于战略客户，影响地图也可以用作解释目标优先级决策的工具。
影响地图从三个方面架起了目标计划和迭代计划之间的桥梁：
在战略规划方面，影响地图是调动业务和技术专家共同参与的有效方法，他们从业务而不是技术视角达成对项目范围的一致理解。
在质量定义方面，影响地图让组织在整个交付过程中保持专注，帮助我们定义与改进并保证质量相关的活动，确定其优先级。它从整体上定义了对软件质量的一致期望。
在里程碑管理方面，交付的目的是达成业务目标，而不是预先定义的产品范围，通过频繁、迭代地发布，以反映利益相关各方对进展的一致认同。
影响地图除了在以上几个主要方面能够帮助我们，作者还在书中阐述了更多影响地图的作用：
在快速变化的环境，比如软件交付中，影响地图允许我们维护一个随着我们的交付和学习过程而改变的动态里程碑，瞄准目标，并让功能和范围附属于目标。通过在业务目标和交付内容之间建立映射，影响地图着重于约束并行的业务目标的数量和我们试图达到的影响，这与精益开发方法中限制在制品数量的思想是统一的。
设定可度量的目标能帮助我们更快地发现不切实际的期望，影响地图帮助我们寻找更简单的方案，分析出不能带领我们走向目的地的方案。
不仅软件开发中需要敏捷，业务获取中更需要敏捷。影响地图能让业务和技术专家澄清业务目标，并为业务方和技术交付团队提供了整体视图。进展汇报可以是已经实现了哪些影响或者是接下来从业务角度我们计划重点投入哪里。它让我们可以按照计划支持的影响而不是软件功能，来做出承诺，为项目干系人提供承诺，同时保持执行上的灵活性。影响地图把交付内容分解，从而推动迭代交付。
影响地图按照“对角色行为的影响”来获取业务方的需求。我们只需关注当前最重要的角色影响，等到开始工作于某个影响时，我们再启动这部分的需求。每个用户故事都要在地图上找到自己的位置，我们需要努力思考通过用户故事要达成什么目标，这样就能更好地表述它。
影响地图可以很好的组织发散和收敛思维，捕获选项，让我们可以讨论这些选项。在发散阶段，团队产生可供探索的选项；在收敛阶段，团队决定哪些选项值得进一步深入。
影响地图帮助高级技术人员和业务方一起在白板上画出地图，从可视化的会议中获益，它让规划会议变得高效很多。在实践中，影响地图的结构可用于引导有效的讨论，把不同的角色组织到一起，成为一个拥有共同目标的小组。
很多组织都把IT当着成本对待，交付团队汇报是基于开发的时间和人力投入，他们更关注成本，而不是交付带来的成果和收益。影响地图可视化了交付内容和影响，并且把它们和业务目标连接起来。通过关注业务目标，辅以有效的度量，这样我们就可以通过问“它的价值有多少？你愿意投入多少？什么时间需要？”来回应成本和时间的问题。
影响地图告诉我们一旦目标实现之后，就不需要继续投入相关工作，可以转移到其它重点领域。影响地图拒绝不贡献任何有促成影响或目标的功能；影响地图清晰地展示了假设，以便于我们跟踪和验证它们；影响地图帮助利益相关人在功能和收益之间建立更好的关联，从而更好地决定优先级。影响地图可以帮助团队通过构建产品和交付项目来产生实质影响，而非仅仅发布软件而已。
说完了为什么要使用影响地图，让我们在接下来的第三部分中看下谁应该使用影响地图，在哪些场景下使用呢？
3.谁应该使用影响地图 前面也说了，影响地图可以被用于多种不同的目的。根据我们想要实现的结果，需要在不同的时间让不同的群体参与进来。下面将要说到的是关于谁应该参加影响地图的会议以及主要场景。
设定愿景。影响地图是为新产品里程碑设定愿景的好方法。常见情况是，当交付组织与外部客户合作时，或当组织想要聘请第三方交付机构时，并准备一份工作说明或征求建议书。在这种情况下，准备影响地图的通常方法是让主要利益相关人参与协作研讨会。会前可以通过提供业务目标草案来为研讨会做准备，让利益相关者在研讨会期间完善和改变目标，专注于讨论影响。然后交付团队成员参加第二个研讨会，以提出与所选影响相匹配的交付物的建议。
专注交付。当某项计划有很多目标，而且多个利益相关人的优先事项冲突时，影响图有助于对组织内优先事项的共同理解，使用影响地图来专注交付的常见场景是有大量工作涵盖不同的目标，当正在进行的计划有大量积压的大故事难以确定优先级的时候，或者当团队不知道什么时候该叫停不会成功的工作。为了专注交付，利益相关者和交付团队共同创建影响地图是很重要的。利益相关者和交付团队成员从目标开始，将讨论重点放在影响和高层面的可交付成果上。
重塑问题。当交付计划的目标不明确或没有得到分享时，影响图有助于让利益相关者通过重新定义问题就方向达成一致。组织为此目的使用影响图的典型场景是可能是某个人掌握着复杂的业务知识，项目停滞或不再交付价值，或者在大型项目开始的时候没有明确目标。在这种情况下，影响地图应仅包含高层面的可交付成果，而不要包含太多细节。
正如作者所说，本书面向的主要读者是负责产品开发或软件交付的高级人员，他们可以来自业务方，也可以来自交付方，包含业务发起人以及拥有这些职责的人，产品拥有者、项目总负责、产品线管理、产品架构、业务分析、质量改进和保障，以及产品交付。作者的大多数经验在迭代交付模式上，所以从这个视角来写作，如果你的工作环境与作者经验类似，那么收获也会更大。
对软件项目中的业务人员：可以学会如何更好地沟通业务设想。 对高级产品和项目发起人：可以学会如何更高效地与交付团队沟通假设，怎么让交付团队更积极参与做出好的决策，以及如何高效地管理项目组合。 对应用敏捷、精益方法或精益创业思想的团队：可以学会如何让交付更有重点，并让业务方和用户更好地参与交付过程。 对向敏捷或精益方法转型的团队：将了解应对规模化精益和敏捷实施常见问题的方法，比如创建整体视图，把工作细分为具备业务价值、并可以汇报有意义的进展的工作项。 影响地图是为产品负责人、业务发起人和与交付团队一起工作的高级技术负责人准备的，他们可以集中精力、重新定义现有的方案或者为一个新的想法沟通一个愿景。
目前为止，已经和大家分享了影响地图的主要的方法论，最后再让我们从第四部分中了解实际工作中如何与团队共创影响地图吧。
4.如何制作一张影响地图 想要发挥影响地图的最大功效，就要与高级技术和业务人员一起工作。当一组人从不同视角来解决同一问题时，我们也就在发挥集体智慧。建议最好计划两次会议：第一次是定义预期的业务目标；第二次来制作一张地图。
第一次会议（准备） 步骤一：发现真实目标
让小组确定出可能的目标并将其写到白板上面，这样就可以讨论和对比。确保大家对项目或里程碑交付的目标数量达成一致。作者建议我们还可以问：“为什么这个功能很重要”或者“它如何才能有用”。要不断地提问，直到引出与钱相关的话题。Chris Matts认为要彻底弄明白如何省钱、赚钱或者保护钱。
步骤二：定义优秀的度量
在画影响地图时，即使团队已经确定了业务目标，还要讨论如何度量它们，使目标其更具体。注意，要度量那些有价值的内容，而不是那些容易跟踪的。作者在书中引用Tom Gilb在其著作《竞争工程》中对如何为目标建立精确度量提出了很多优秀建议。
步骤三：计划首个里程碑
有了目标和度量方法，就要要让业务人员统一意见，选择放入现有里程碑的目标。可以用点数投票或虚拟货币法，能为优先级设定提供指导。采用敏捷迭代交付的团队应当每次处理一个目标。因为当完成一个关键目标后，情况也可能会发生变化。
第二次会议（制作） 步骤一：画出地图框架
将第一个里程碑放在整个图中间位置，然后将它与一些关键的高层次的交付物相连。角色、影响和交付物三要素的初始集合，可以引导大家的思维过程。注意，开始只需列出一些关键功能来引导进一步的讨论。作者建议我们需要反复问自己：这个功能对这个影响有贡献吗？这个影响对这个角色有效吗？这个影响对实现目标真的有用吗？</description>
    </item>
    
    <item>
      <title>敏捷软件开发工作估算方法 – 故事点和工时</title>
      <link>https://leoyanlili.github.io/storypoint-man-hour/</link>
      <pubDate>Thu, 03 Feb 2022 06:13:32 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/storypoint-man-hour/</guid>
      <description>你如果无法度量它，就无法管理它
&amp;ndash; 彼得.德鲁克
软件开发组织工作估算的思考 我们人类天生不善于估算，要不就是过于乐观，要不就是过于悲观，就是很少有现实主义。尤其是我们软件开发行业，有太多的未知数：技术一直在变；新需求不断涌现；任务之间或人与人之间错综复杂的依赖关系；还有外界环境存在的各种因素。工作量主要与三方面因素有关，任务的规模，任务的复杂度以及完成该任务的人员能力水平。
为什么要做估算？ 第一个原因是帮助我们做出周全的决定。有了估算，我们就知道软件产品清单上的需求是否能在指定的期限实现或需要多久才能完全实现。
第二个原因是设定目标。如果我们给自己制定了一个最后期限，就会全力以赴确保达到目标，当然，也有完全不靠谱的时候。当然，估算和设定目标毫无疑问可以帮助我们保持专注并取得最大成果。
一句话：了解团队在软件开发过程中的客户价值产能、组织投入的成本并做出更合理的交付计划和客户报价。
理解故事点和工时 在很长时间里，工时（人天/人时）是研发团队中的指标，能直接反映出：完成某项工作需要几个人做多长的时间。这一指标确实让许多研发团队获得了评估项目人力成本的基础数据。
然而在实际操作中，开发者的工作几乎无法被标准量化。不同的开发人员，其能力本就有所差距；更重要的是，每一项具体的开发任务，它的规模、复杂度和风险等可能有着巨大差异。仅仅统计工时，并不能反映团队的开发速率。因此，在敏捷开发中，提出了应当用故事点来估算工作量。
1个故事点是1个标准单位的工作量，是对工作规模的相对度量，它估算出的是对于完成此需求所要的开发规模的大小。这个单位并不能直接指代该项需求需要的开发时间。工时是绝对的度量单位，故事点是相对的度量单位。举个例子：在同一个餐桌上，同样是一碗饭，小强10分钟就能吃完了，小美需要20分钟才能吃饭。在这个例子中1碗饭就是标准单位，每个人吃饭的效能是不同的，小强20分钟可以完成2个标准单位，而小美只能完成一个标准单位。在软件开发行业，同样的用户故事，交给不同的人实现，用不同的时间，就表明每个人的产能不同。故事点作为标准单位更客观地衡量了团队产出的客户价值，而工时却无法反映这点。
价值评估和成本评估可以并行 前几天与公司的同事和领导就故事点和工时，这两种敏捷软件开发的工作量度量方式有过一些探讨，在适应公司现状的敏捷开发过程中，我认为故事点和工时两种反映工作量的方式，可以结合使用。对于用户故事（功能需求）的评估，我们用故事点这种相对的规模估算方式，估算过程更容易，更客观，成本更低，故事点可以用来反映迭代中团队的客户价值产能；对于从用户故事分解出来的每个子任务，我们可以请具体开发人员评估任务工时，结合开发人员的单位时间成本，工时可以用来反映组织投入迭代的直接成本。这样既可以遵循敏捷Scrum的实践方法，又可以与公司软件项目以成本管理为目的工时估算对齐。
评估对象 评估方式 采用概念 度量单位 说明 优势 用户故事（需求） 集体评估 价值评估 故事点 story point 用来计算交付的客户价值 数据生成快速，客观；团队共同参与更加全面；绩效的依据 开发任务(用户故事拆分子任务) 个人评估、Leader 核验 成本评估/工时评估 人时或天 man hour/ man day 用来计算组织的投入成本 便于组织的成本管理 用户故事估算方法（PO创建，价值评估） PO、开发团队（含测试/UI同事）共同参与需求澄清 敏捷开发中的估算扑克方式集体估算（故事点） 迭代中根据实际情况商议调整 开发任务估算方法（团队创建，成本评估） 开发团队（含测试/UI同事）共同跨职能分解每个用户故事到若干个具体任务 团队每个人对自己领取的具体任务，根据经验估算并登记（工时） 开发Leader最终核验 故事点评估的优势 故事点标准客观，帮助推动跨职能行为沟通，即团队从UI到DB（任务层面仍然可以估算个人工时） 每人都要参与估算，沟通更加充分，需求理解的更加清晰，提前暴露产品设计的不确定性，避免需求盲点 促进了团队成员之间的融合和互相理解，有助于工作中更好的跨职能协作以及合作完成用户故事开发 相对大小更容易评估，工时却不易评估，如果需要，后期可以转换成团队的平均工时 规模是客观的，故事点估算不会衰减，随着团队的成长，能体现团队迭代速率即产能的变化 通过有足够的迭代或冲刺，可以衡量出团队的开发速率，做出更合理的交付计划和客户报价 小结一下 故事点和工时并不互斥。它们一个用于估算工作复杂度，一个用于估算工作时长。故事点最重要的作用，是团队在产能上形成了一个参考基准。一旦团队通过几次迭代捕捉到了产能容量，就可以此为参考，与产品方、业务方达成交付效率的共识。这样既能避免拍脑袋给计划又给不准的局面，还可用数据可视化地呈现研发团队的效能变化。如果组织把记录的工时当做产出或人效的管理方式，说明组织对目标的管理缺乏掌控或缺乏信心。敏捷开发摒弃只衡量工时的思维，因为工时只代表着一种成本，我们要关注完成需求的速度和质量就足够了，这才是唯一重要的事情。此外，敏捷团队还应该在合作开发的同时，思考如何真正集中力量少量多批次持续输出优先级更高的用户故事。
最后，不论采用故事点还是工时又或者两者结合，都需要每个团队不断探索更适合自己的方式，找到能有效估算并呈现自身产能的最佳道路。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>我们的DevOps如何让客户生产环境从“0”到完全恢复</title>
      <link>https://leoyanlili.github.io/devops-from-0-to-done/</link>
      <pubDate>Sun, 14 Nov 2021 09:17:17 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/devops-from-0-to-done/</guid>
      <description>人能弘道，非道弘人
&amp;ndash; 论语.卫灵公
危与机的开始 最近工作有些吃力，11月4日当天特意请了两小时假，提前下班，吃完晚饭刚坐下来，打算简单看个电影，然后好好睡一觉恢复下体力。不想发生了一次突发事件。
19:43，有同事在群里问是否能连上客户的服务器，一开始也没有太当一回事，服务器连不上也许只是网络暂时情况。
20:26，刘博在群里紧急拉DevOps的同事入群，心里咯噔一下，看来是出了点状况，赶紧坐到电脑前开始关注群里的沟通。
20:36，一阵急促的电话声，刘博来电，果然事情有点不太妙，新资产的应用服务器重启后就无法启动，应该是宕机了，DevOps团队需要全员上线应急恢复服务器应用环境，崔总开始协调第三方系统集成供应商恢复服务器的基础操作系统，幸运的是目前只有新资产系统的应用服务器宕机，数据服务器安然无恙，刘博指示先备份数据服务器上的所有相关数据，以防万一。
20:50，我们开始等待第三方供应商完成服务器操作系统的重新安装，同时内部分配每个人的VPN账号，进行数据库和文件存储的备份。
21:36，参考之前准备的资产系统部署手册，团队基本明确了针对客户新资产平台应用服务器恢复的具体分工。
台上三分钟，台下十年功 22:00，第三方把服务器安装完毕，经过漫长的等待轮到我们正式开工上场了，之前小杨在公司WIKI上准备的部署文档有了用武之地，这是我们应用服务器环境恢复的参考流程，刘博又帮我们捋了一下思路，排除一些本次系统恢复不必要做的步骤，于是最终需要做得只是一部分，而且有了之前工作积累的经验和成果，这一切使大家有信心可以很快完成。
插播一下DevOps之前的部分工作：
目前我们持续交付流水线可以实现一键发布，将资产系统的客户业务应用镜像上传到公司的私有云，这就是我们对客户的镜像仓库，在这里我们维护了每次交付给客户业务应用的不同版本，配合几个已经准备好的，放在私有云上，占用很少存储空间的启动脚本，可以提前下载到客户服务器上执行，进行统一的自动化部署，可以实现在客户服务器上完成快速部署。
简单科普一下镜像的概念，大家可以把它理解成一个不依赖于操作系统环境的业务应用的小盒子，我们可以利用若干个这样的小盒子以及它们之间形成的关系，在任何服务器和操作系统中搭建出一套一致的业务应用系统。能节省大量的问题解除过程。运行起来的镜像，我们称之为一个特定的容器。我们资产的平台是由几个不同的镜像组合而成，就像人的身体不同部位，只有共同上线成为运行容器才能协同一致工作，表现出一个完整的人的能力，缺一不可。
22:43，小邵，一位新加入DevOps团队不久，根据个人的经验以及部署文档完成平台基础环境的搭建。
23:11，小杨，一位在DevOps团队成长迅速的实习生，利用提前准备的部署脚本下载并重启所有的公司私有云镜像仓库中的资产的业务应用镜像，当这些镜像在客户服务器运行起来后，整个资产业务系统就运行起来了。
23:30，小杨在群里发了系统恢复后的新资产系统的界面截图，宣告了我们这次紧急系统恢复的成功。大家在群里简单总结了一下，互相感谢后道声晚安，结束了这次紧张的紧急恢复工作。
这次危机的解除实际工作时间仅为1.5个小时，算上前期的准备工作也就2个小时不到，这是对我们之前积累的一种自我认可，也是各位领导与团队一起协作的共同成果。
DevOps团队搭建的持续集成和持续交付流水线帮助产品研发团队轻松实现每日多次的自动化构建及发布，使得随时可以把新开发出来的功能特性交付给测试团队和最终用户成为现实，大大提升了对客户响应能力，缩短了交付反馈环，这在以前没有持续部署或发布的研发技术条件下是无法想象的。当然后面我们还有很多改进的空间。
最后，鉴于这次突发事件，我们向客户提出申请异地备份服务器，同时建议有条件的话一定要有定期的整机备份机制。
其大无外，其小无内 我们先来看个问题，企业需要实施DevOps的情况：应用上线（哪怕是改动一行代码）需要多长时间？
大家认为一般的周期通常是月、周、天、小时？如果大家发布周期在周级别，还有大量的工作靠人工执行，我们需要尽快引入DevOps了。
这是来自维基百科的解释，“DevOps是一组过程、方法与系统的统称，用于促进开发、运维部门之间的沟通、协作与整合。DevOps是提倡开发和IT运维之间的高度协同，从而在完成高频率部署的同时，提高生产环境的可靠性、稳定性、弹性和安全性。”
现在的软件开发已经不同于过去，产品要适应瞬息万变的市场，分工日益细化，一个成熟软件的规模已经不能奢望每个人成为全栈工程师能支撑得了的。尤其是对旨在于为了提高交付效率和伸缩能力的新的技术架构出现后，DevOps也随着敏捷文化的发展而融入越来越多软件组织的日常运营之中。DevOps小到掌握特定技术点，维护每个文档的细节，大到参与对研发工作规范的制定，传播对组织文化和价值观，把握DevOps的工作流程，提升软件组织的交付效能和客户满意度。涵盖从需求，开发到运维，反馈的整个过程，可以跨越团队，公司，甚至合作伙伴以及客户各方。这些都将纳入DevOps的日常工作和未来规划的视野里。
低头做事，抬头看路 应对危机，对他人而言也许是需要立刻解决的“危险”，但对DevOps而言，给了我们验证和改进工作的“机会”，是对我们平时工作积累之后的一种检验和反馈的过程，也为日后保障逐步建立一套成熟的因地制宜的流程和机制。在DevOps，我们不仅要低头做好眼前事，还要抬头看好远方路。不仅需要做好日常的事务性的工作，支持好组织的项目交付，还要建立工作规范和流程，技术能力和文档，通过具体工作支持其他团队在组织内部获得更多彼此了解的机会，更重要的是在这个过程中要做好敏捷转型的排头兵。
DevOps的长远的目标是自动化一切，监控一切，可视化一切，尽可能减少人工参与带来的不确定性从而引入更多的风险。在技术层面，我们形成持续编译、自动化测试、持续部署的能力；提升基础设施即编码的能力，将基础环境可编程化，项目团队成员可以自助获取；目前规划是先做好持续集成，持续交付和部署，根据痛点逐步优化，完善监控能力，以后还会做ChatDevOps，实现机器人值守。
简陋的笔，精彩的事 从本文开始的名言中，不难看出古代先贤也试图告诉后人：要成事，最重要的不是工具和方法，而是合适的人，只有人才能基于价值观和原则，把工具和方法运作在适配于自身企业的流程之中。这一点与敏捷宣言有异曲同工之妙。受限于我自身的笔头水平，无法详细说出这次紧急系统恢复事件中身临其境的精彩，不过无论如何我希望能尝试去记录这样一次DevOps作为主角所经历的故事。
加入DevOps团队的这段时间，我个人额外的感悟是DevOps不做人人眼中的战斗英雄或者救火队员，而是成为默默无闻的守护者。让外界感到风平浪静，才是我们作为守护者存在意义。DevOps团队大部分的时间是在为了避免发生危机而不断地思考和准备，静下来做好DevOps工作的心态应该是”行到水穷处，坐看云起时“。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>如何用伪领导力搞垮一个敏捷团队</title>
      <link>https://leoyanlili.github.io/how-to-destroy-a-team/</link>
      <pubDate>Sun, 25 Jul 2021 06:45:07 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/how-to-destroy-a-team/</guid>
      <description>《易经》乃诸经之首，中华民族的哲学思想的源泉。
做了多年的基层伪领导，自认做的不是很好，格局不高，事实也说明基层管理更适合本人的思维深度，大家看到这里，至少能判断出我的自省做得很好。本文总结了一些伪领导力，还请大家赐教。
不知“外圆内方” 说的是领导的根本法则，领导者有更加圆通的行为方式，同时要有较为公正的管理原则。
有些领导说的头头是道，正确无误；做的相差甚远。可称之为：外方内圆。举个栗子，中国人讲究亲疏有别，是很正常的人性，作为领导也会一样，面对同样优秀的下属肯定会给那个关系好的更多关照。但如果纯粹为了拉拢人，展示自己的领导地位，或为了让“自己的”人获得利益或上位，无视团队中那些各方面都更优秀的人。加以时日，团队必定心生厌恶，让优秀的人失去信心，导致劣币驱逐良币，留下来的人一门心思只想着怎么去跟领导搞好关系，配合领导建立自己的势力圈，而不是想着怎么把业绩做好。最终必将导致团队效能下降，失去原动力。我们的老祖宗都说在合理范围内玩弄权术，搞人是可以的，不过，以终为始，如果公司给予领导者的权力让公司蒙受损失，最终一起受害的肯定是领导者自己。
另外有些领导一身正气，原则性极强，对团队要求是分毫不差，不懂变通。可称之为：外方内方。这样的领导的确能做成一定的事情，但同样不符合中国的管理文化，要求领导者有包容的心态，遇事“可为可不为”。否则，可能会付出更多的努力和遭到同事的反对。“中”为合理。中国人思想中充满对事物“合理”的思考，大家可以好好体会日常的经历。关于领导工作中合理的理解，可以接着看下文。
不愿“上，止，正” 说的是领导的三个节奏，领导要以“上”为进，以“止”为退，以“正”为守。
“上”是领导者不仅自己要有上进心，同时能带领团队向前，不断进行改进的尝试，引导团队的意愿，教导方法，也能根据团队当前的条件达到目前可以达到的更好的状态，从而使得交付效能持续改善，推进产品交付效率。
“止”是领导者懂得适可而止，过犹不及，团队能力在限定的条件下是有一定上限的，不可过分要求，不妨利用好这个机会，给团队鼓励和认可，帮助大家反思如何可以做得更好，记得一句话：“我们已走得太远，以至于我们忘了为什么而出发。”。
“正”是领导者行事要顶天立地，把权力控制在一定范围内、信任下属、处事合理，凡事不会只选择听自己想听的，看自己想看的，信自己想信的，而忽略去参考不同的见解。领导能从不同下属的各自的立场分别做思考，综合考量，就是个“正”的领导，或许最终的决策不是每个人都满意，但求有一个“合理”的支持。
如果把管理团队看成开车，“上”好比油门，踩上它，团队就会不断前行；“止”好比刹车，需要随时依据路况减速，避免风险；“正”好比方向盘，牢牢把握行驶方向，才能达到目的地。
不屑“治心，治力，治变，治气” 说的是领导的四个管理重点，带领团队就像带兵打仗。
治理人心。人心齐，泰山移。关心同事永远都不错，尤其在中国，饱含人情味的关切话语能营造一个良好的工作氛围；在公司原则允许的范围内实际帮助下属解决小难题，而他自然会用自己的努力来回报组织。记住：早上见面第一句话绝对不是说工作相关的事情。
治理能力。认清自己团队的能力，接受合理的工作，同时根据每个人的特点，耐心地来进行改进。当着第三个人的面批评一个下属是严重的失误。被批评的人可能会因此失去自信心，甚至以后做不好工作也没有任何负担感，因为你已经确认了他的无能。甚至会招致团队其他人的反感，放松对自己工作的要求。
治理改变。唯一不变的是变化，要帮助团队用变化的心态来看待困难和解决问题。称赞下属，尤其是对外称赞下属。这种称赞会辗转传回下属的耳朵，他由此得到的快乐要比你直接称赞他强几倍，他自然会更加热爱工作，朝你称赞他的方向改变。而如果总对外抱怨下属则会让人觉得你的无能，至少会认为你没能物色到出色的人选，或者没有能力让下属变得更优秀。
治理气势。把握好时机，利用好形势，鼓舞好团队。当团队状态低迷的时候记得给团队更多的自主权，耐心倾听，安抚好幼小的心灵，让团队看到希望，他们对你来说都是“孩子”；当团队斗志高昂的时候就可以给他们更大的挑战，表明你对他们能力的信任。对任何下属的建议你都该认真倾听。在通常情况下，下属都会经过思考才会提出建议，如果你仅用一个“不”字直接否定他，他会从此失去创造的信心。而倾听和讨论则会使你和下属都看到自己的思维死角，并有机会从中得到改善。
搞垮一个敏捷团队 完全做不到以上各小节的内容，必定能搞垮一个团队。无论如何，本文都是希望能助力你达到你所希望达到的目标！
还是那句话，一切方法是否有效，都很难讲，取决于天、地、人。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>初创的敏捷团队采用行为驱动开发共创用户故事</title>
      <link>https://leoyanlili.github.io/how-bdd-user-story/</link>
      <pubDate>Thu, 11 Feb 2021 04:36:00 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/how-bdd-user-story/</guid>
      <description>如果说TDD是让我们正确地做事，那么BDD就是让我们做正确的事。
在原本的计划中，2021年农历新年前发布另一篇文章，还是应了计划赶不上变化的这句老话，也算是体现了敏捷的价值观，希望本文对初创敏捷团队有一定的帮助。
维基百科的解释 行为驱动开发（英语：Behavior-driven development，缩写BDD）是一种敏捷软件开发的技术，它鼓励软件项目中的产品负责人、开发者、QA和非技术人员或干系人之间的协作。BDD最初是由Dan North在2003年命名，它包括验收测试和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。BDD介于业务领域和开发领域之间，如下图的位置。
行为驱动开发强调使用领域特定语言描述用户行为，定义业务需求，使需求分析人员、开发人员与测试人员进行沟通的有效方法。领域特定语言，相比自然语言更加精确，又能以符合领域概念的形式满足所谓“活文档”的要求。
行为驱动开发的核心在于“行为”。当业务需求被划分为不同的业务场景，并以“Given-When-Then”的形式描述出来时，就形成了一种范式化的领域建模规约。编写领域特定语言的过程，其实就是不断发现领域概念的过程。因此，团队采用BDD共创用户故事，最重要的产出不是文档，而是提供了团队交流的平台，并在其约束之下完成了领域建模。由于团队的不同角色都参与了这个过程，就保证了领域模型的一致性与准确性。
敏捷开发中的理解 行为驱动开发是一种敏捷开发的技术，想必大多数同学都对敏捷开发领域中另一技术，测试驱动开发（Test-Driven Development，TDD）较为熟悉，BDD是建立在测试驱动开发基础之上。BDD的重点是通过与利益相关者的讨论取得对预期的软件行为的清醒认识。行为驱动开发人员使用混合了领域中统一的语言的母语语言来描述他们的代码的目的，通过用自然语言书写团队成员（业务、产品、开发、测试等）都可以读懂的实例。这让开发者得以把精力集中在代码应该怎么写，而不是技术细节上，而且也最大程度的减少了将代码编写者的技术语言与商业客户、用户、利益相关者、项目管理者等的领域语言之间来回翻译的代价。
敏捷团队面临的交付困境 在软件项目中涉及多人紧密协作，由产品业务讲解功能需求，开发负责代码实现，测试保证软件质量，高质量的沟通对项目成功至关重要。如果在一个项目中业务人员用自己行话，开发人员用技术语言、技术思维去理解业务，在沟通过程难免出现分歧，开发人员就可能按自己的理解去评估和实现了一个错误的功能。
理解需求 敏捷开发团队围绕产品的沟通，大部分都是为了理解需求，从而在业务、开发和测试之间达成共识。用户故事关注的是业务需求而不关注技术，系统业务专家、开发者、测试人员一起合作，分析软件的需求，然后将这些需求写成一个个用户故事。并且，首先开发和发布业务关键的用户故事，尽早为最终用户提供业务价值。
评估与计划 需求理解不一致，验收标准不清晰，就会导致用户故事评估工作的困境，开发人员对故事点的评估就缺少依据。有了上一步需求理解的统一，开发团队与产品负责人在工作量评估上有更坚固的共识，从而管理层在产品计划上，也会有更好的预见性和期望。
测试工作 这样的用户故事可以直接应用到测试中，作为测试的标准文档。我们在做单元测试 时，经常是针对某个函数，或是某个类进行测试，但是被测函数或是被测的类是可能经常变化的，我们的测试案例也需要经常性的随之变化。然而，用户故事描述的是软件的整个系统行为，几近于需求文档，可变性大大减小。因此，测试案例不需要做太大变化。同时，这样的测试案例最贴近于需求，贴近于实际的系统行为。
产品相关文档 经常看到产品在不断的推进，当干系人问起文档的时候，我们却难于启齿。不是因为我们不重视文档，而是我们更重视交付？如果必要的产品说明文档也没有就是有点走极端了。基于BDD 的用户故事，使用几乎近于自然语言的方式描述了软件的行为过程，因此，可以直接作为软件的需求文档。
团队基于BDD共创用户故事 用户故事User Story 用户故事是从用户的角度来描述用户渴望得到的功能。
一个好的用户故事包括三个要素：
角色：谁要使用这个功能 活动：需要完成什么样的功能 商业价值：为什么需要这个功能，这个功能带来什么样的价值 验收条件Acceptance Criteria 验收条件就是一系列可以接受的验收条件或者业务规则，且与功能或feature相互匹配和满足，同时也能被产品负责人和干系人接受。
验收条件可作为验收测试用例的具体例子。这也是我们常说的实例化需求，让抽象的需求变得具体和可测试。
一个用户故事包含若干个验收条件，包括正常场景与异常场景。
场景中的Given…When…Then…实际上就是设定该场景的状态、适用的事件，以及场景的执行结果。
通过这样的用户故事描述和场景设置，基本就完成了一个完整测试的定义。
验收条件的作用：
以用户的视角表达业务交互过程 为PO与用户的需求理解上提供场景化、具象化的沟通 有助于用户体验友好性的识别和改进 PO与团队需求共识的标准和记录 可视化一个用户故事的粗细粒度 开发与测试对功能实现与质量的共识 需求完成边界的限定 比单纯故事点更为直观的工作估算标准 活文档，用户手册(帮助FAQ)的素材 更公平透明的甲乙方的定价标准 举个例子 在农历新年，中国人的习俗中会有很多活动，如果把过年当做一个产品交付，那么会有很多Epics或Feature，过年三十就是其中一个大故事。那么我会基于BDD，写这么一个用户故事（当然，我也可以拆解出一个更小的用户故事：和家人一起吃年夜饭）：
基于BDD写用户故事的优点 BDD为敏捷开发流程提供了许多优势。 BDD 提供业务关键功能，通过高效的协作和沟通推动产品成功。
提高开发效率 帮助开发人员、测试人员与PO对需求的理解在同一个平面上，帮助团队快速构建和交付更多有价值和高质量的产品，减少返工和修改可降低维护成本。
提高测试效率 帮助测试人员准备测试用例，并进行符合验收条件的用户故事测试。
正反馈循环 以用户故事为中心，用验收条件填补PO-开发-测试之间的认知鸿沟，进行需求拉通与协作对齐。由于所有团队都对应用程序有共同的理解，因此开发人员可以更快地获得反馈，以增强应用程序并走上正轨。
用户体验 从用户角度定义功能使设计人员和开发人员能够从最终用户的角度进行思考，以解决用户难题。 创造了内在的业务价值和增强的客户体验。
文档生成 帮助PO在日常的迭代开发中逐步完善整理产品需求，提升实战性用户故事和验收标准的编写技巧。组织产品PRD文档的信息来源。
写在最后 通过上面的了解，我们知道了行为驱动开发很大意义上是一个PO、开发、测试共创的一个行为。同时也是一个自然而然的过程，我们可以使用行为驱动开发的人类语言描述方法来编写我们的用户故事。行为驱动开发，还需要打破传统的魄力，因为之前几乎没有人会告诉你用户故事写的可以跟逻辑代码一样，作为从代码到需求的桥梁。当你习惯BDD，编写用户故事会变得非常好玩。行为驱动开发，可以使你的测试更加贴近实际的用户行为，从而找到系统的问题所在。
如果你要做完整BDD的话，可以看下面的彩蛋部分。祝各位新年快乐，万事如意！</description>
    </item>
    
    <item>
      <title>责任模型 – The Responsibility Process</title>
      <link>https://leoyanlili.github.io/the-responsibility-process/</link>
      <pubDate>Sun, 20 Dec 2020 02:41:05 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/the-responsibility-process/</guid>
      <description>虽然每个人都在谈论责任,但是在各种情况下,我们都不负责任。
前言 敏捷团队重视责任，敏捷思维和 Scrum文化中最关键的一个部分是责任。 Christopher Avery创建了一个非常好的责任模型，解释了责任如何发挥作用。在长期的进化过程中，人们的大脑得到了训练，能够迅速做出决策。每当出现一个小问题时,大脑将提供如何处理这个问题的选项。
责任流程选项 第一个可能的解决方案：否认，这是人类的大脑的第一反应，通常是：“我已经编码了，我的代码没有问题。” 第二个可能的解决方案：指责，在Scrum环境中，指责可能会指向任何一个人，通常是：“我的代码是正确的，运行不了是他的错。” 第三个可能的解决方案：辩解，人们在没有得到预期结果时，经常使用借口。通常是：“在软件开发中，我们经常碰到技术难题，对吧？事情就是这样。” 第四个可能的解决方案：羞愧，团队遇到问题可能会表示沮丧，通常是：“对于这个产品，我们没有足够的经验，太难了。”。 第五个可能的解决方案：义务，有人告诉他们应该这样做，因此，他们不用理解就这样做了。通常是：“由于Scrum，我们开站会是必需的。” 第六个可能的解决方案：放弃，人们任何时候都可以决定放弃。通常是：“我不会去解决它，这对我来说并不重要。” 第七个可能的解决方案：责任，发生在决定承担责任时，这是责任模型的最终层次。通常是：“下一次，我们可以采用什么方法，这样以后就不会发生同样的事情了？” 写在最后 只有第七个措施才是真正的负责任。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>如何理解并应用精益敏捷Kanban看板</title>
      <link>https://leoyanlili.github.io/understand-kanban/</link>
      <pubDate>Fri, 10 Jul 2020 03:45:18 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/understand-kanban/</guid>
      <description>我引入看板系统的目标是：防止过载、控制工作流的波动性，以及触发渐进式变革。
&amp;ndash;大卫.安德森
看板的基础知识 看板是一种用于管理产品创造的方法，该方法强调持续交付，同时又不增加开发团队的负担。 像Scrum一样，看板是旨在帮助团队更有效地协作的流程。它是一种可视化工作流程的方法。为了在需求与可用产能和瓶颈之间取得平衡，该框架在下面的工作中具有很高的生产率和效率。
临时请求(按需的任务) 计划外工作 生产支持 简要历史 在1940年代后期，丰田公司从超级市场那里找到了更好的工程流程。 他们注意到商店的店员通过商店的库存而不是供应商的库存来补充货品。
只有当一个货品接近售罄时，店员才能进行订购。 超市的“实时”交付流程激发了丰田工程师重新考虑他们的方法，并开创了一种新方法-看板系统-该方法可以使库存与需求匹配，并实现更高的质量和产量水平。
看板，拼写为Kanban，是日语中的“信号板”，表示“可用产能（工作）”。 看板是与精益生产和实时生产（JIT）有关的概念，它被用作排产系统，告诉你要生产什么，何时生产以及要生产多少。看板成为支持整个生产系统运行的有效工具，也是促进改进的很好的方法。
原则 在看板方法上实施软件增量是一个基于拉动的系统，它可以帮助团队以可持续的速度和产能进行交付，减少了工作和时间的浪费。 保证这一点，就需要遵循以下看板的基本原则。
1. 可视化工作
看板工作面板的可视化模型及其工作流程使范围和功能透明化，有助于观察和检查从待办事项到完成的工作流程。 这样会让工作可见，也包括阻塞，瓶颈和队列以及即将进行的工作，这有助于团队制定策略，是继续进行现有的工作或将新工作带入。
2. 限制在制品WIP
团队为看板面板中的所有“进行中”的列共同定义了一个限制，例如分析，开发，测试等。此WIP限制实现了基于拉动的系统，因为只有在该列下的工作总数少于其上限的情况下才可以将工作从上一列拉至当前列。
这有助于平衡基于流的方法，团队不会开始并承担过多的工作。 它减少了浪费，并帮助团队专注于先完成后开始。
3. 聚焦在工作流
要完成一项工作并增加价值，它必须经历其开发过程的多个阶段。 如分析，开发，测试，评审等。为了获得看板的价值，团队需要专注于从启动到完成的工作流程。 通过遵循上面2条原则，可以帮助你专注于流程。
专注于工作流会使团队可视化即将到来的的瓶颈并对其采取行动。 以便保持流动。 团队经常制定工作的策略以优化流程。
把看板和现实生活相关联 我们已经学习了看板的基础知识及其原理，让我们尝试将看板流程与现实生活联系起来。 假设你已经知道并正在实践Scrum，我们将在其中执行定义的时间框的迭代。 我们提交一堆故事，对其进行处理2到3周，然后完成迭代，并再次计划新的一堆故事以进行下一次迭代。 在看板中，我们不会为迭代，时间框或冲刺提交故事。 我们做的有些不同。
在下面的示例中，我们将Scum和看板与现实生活联系起来。 假设人们是故事，放映厅是一次迭代，放映时间是迭代时间。
关联Scrum流程和现实生活 这个案例说明了放映厅中的人员流动，一次是一群人。 如果我们假设人是用户故事，并且将时间显示为迭代或时间框。 然后，你可能会注意到一群人一起在放映厅里走来走去。 我们有明确的座位容量和放映时间。 为每次放映安排的人在放映开始之前已预先计划好了。
关联看板流程和现实生活 这个案例说明了门卫允许公园中的人流是一个接一个的。 如果我们假设人是用户故事，那么公园就是看板面板。 然后，你可能会注意到没有定义的公园放映时间，因为它是24小时开放的。 进入公园或在公园内漫游并出来的人不在同一个人群中。 我们没有容量和演出时间。 但是，公园的管理层决定一次不允许在公园内同时容纳6人以上，以提高公园内人们的舒适度。
在此图中，让我们尝试用Scrum术语关联场景。 如果我们假设人是用户故事，那么在大厅外面等待下次放映的人就是Backlog中的用户故事列表。当前的放映厅放映就是当前Sprint或迭代。观众是冲刺的故事。 显示时间是冲刺持续时间。 放映厅容纳人数是团队对冲刺的产能。 已经看过电影的人是以前冲刺中的“完成”故事，可能已经确定已发布或已部署。
在这里，让我们尝试用上面的图片来映射看板术语。 假设人员是用户故事或任务，公园是可视看板面板。 排队等候在外面的人是当前的看板Backlog。 放映时间没有定义，“最大容量”没有限制，但是管理层决定不允许面板中的故事超过6个。 已经从公园出来的人就是已经可以部署的用户故事。 管理层正在统计出来的故事，以便允许进入新的故事。看板面板(公园)内的故事(人)没有确定的开始或结束日期。
上面图片中进行解释，以解释Scrum流程。
上面图片中进行说明，以解释看板流程。</description>
    </item>
    
    <item>
      <title>有价值的产品=设计思维&#43;精益创业&#43;敏捷方法</title>
      <link>https://leoyanlili.github.io/designthinking-leanstartup-agile/</link>
      <pubDate>Sat, 16 May 2020 15:06:55 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/designthinking-leanstartup-agile/</guid>
      <description>设计思维是一个反复的过程，在此过程中，我们要努力理解用户的痛苦，挑战性假设，重新定义问题，以便创建新的策略和解决方案。
通常的设计思考阶段如下：
“精益创业是一种用于开发业务和产品的方法，旨在缩短产品开发周期并迅速发现拟定的业务模型是否可行； 这是通过结合业务假设驱动的实验，迭代的产品发布和经过验证的学习来实现的。” —维基百科
用埃里克·里斯（Eric Ries）的话说：“精益创业公司提供了一种科学的方法来创建和管理创业公司，并将所需的产品更快地交付客户。 精益创业方法教你如何驾驭一家创业公司，如何操纵，何时转向，何时坚持不懈以及如何以最大的加速度发展业务。 这是新产品开发的原则方法。”
将设计思维，精益创业和敏捷方法结合起来 简而言之，设计思想可以帮助我们提出更好的想法，精益创业可以帮助我们将想法转变为可行的业务模型，敏捷方法可以帮助我们以快速，渐进的方式将产品投放市场，从而获得持续的反馈，适应和准确交付客户想要的东西。
通过将设计思维，精益创业和敏捷方法结合起来，不仅可能提出更好的想法，而且将这些想法变成可行的盈利方式，为客户创造即时价值而交付产品，不会导致成本和进度井喷，并让员工有机会参与更多有意义的工作。
最后一点很关键，所有这些方法都使用户参与到频繁的反馈循环中，因此我们可以衡量进度并进行调整，从而最大程度地创造价值。这与以前的过度规划方法不同，通常要连续数月或数年才能完成，甚至到项目结束时都没有成就感。没有人愿意花数月或数年交付不产生影响或带来价值的东西。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>敏捷开发Scrum七大事件之3：产品待办事项梳理</title>
      <link>https://leoyanlili.github.io/product-backlog-refinement/</link>
      <pubDate>Wed, 13 May 2020 14:57:18 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/product-backlog-refinement/</guid>
      <description>前言，在本文中，我们将从以下几点了解关于产能规划的话题：
&amp;lt;div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; 产品待办事项梳理有很多优点，下面列出了其中的几个。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;standard-arrow list-divider bullet-top&amp;quot;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpFirst&amp;quot;&amp;gt; 通过消除用户故事的不确定性和未知事实来提高效率。 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 提前识别依赖性（在团队和跨职能部门内）和风险，以制定相应的计划。 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 更好的估算并避免返工（开发，测试和实施）。 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 使开发人员和测试人员了解其要求，从而节省了开发团队在sprint周期中进行进一步讨论的时间。 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 确保故事遵循INVEST原则，提供更易于理解的成熟的用户故事 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 有效的Sprint计划：如果在进行Sprint计划前，故事已经进行了梳理和优先处理，PO和开发团队不需要花费大量时间梳理或估算故事。 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 强调最高优先级以挑选故事进行梳理，计划等。 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 给产品负责人提供多次机会，根据实际需要提供更多信息来细化需求。 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 在梳理过程中，如果开发团队遇到一些疑问或问题，并且需要更多时间与PO进行协作，则团队可以将梳理会议中的故事搁置下来，以便PO可以获得更多的信息来补充给故事，并将故事包含在后续梳理会议中。 &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;quot;m_7654132575523233708gmail-MsoListParagraphCxSpMiddle&amp;quot;&amp;gt; 更好地管理产品目标，Sprint目标和里程碑会议。 &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;p&amp;gt; &amp;lt;img class=&amp;quot;alignnone size-full wp-image-1179&amp;quot; src=&amp;quot;https://www.agilewalker.com/wp-content/uploads/2020/05/productgroom2_.gif&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;1024&amp;quot; height=&amp;quot;577&amp;quot; /&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_single_image wpb_content_element vc_align_center&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_row wpb_row vc_row-fluid dt-default&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_column vc_column_container vc_col-sm-12&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_column-inner&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_row wpb_row vc_inner vc_row-fluid vc_custom_1493919898038 vc_row-has-fill&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_column vc_column_container vc_col-sm-12&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_column-inner&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;h2&amp;gt; &amp;lt;i class=&amp;quot;fa fa-hand-o-right&amp;quot;&amp;gt;谁对待办事项梳理负责?</description>
    </item>
    
    <item>
      <title>「视频」10分钟的敏捷估算教学，全面实用，理解深刻了</title>
      <link>https://leoyanlili.github.io/10-minute-agile-estimation/</link>
      <pubDate>Wed, 29 Apr 2020 04:47:52 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/10-minute-agile-estimation/</guid>
      <description>如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。
访问以下链接
「视频」10分钟的敏捷估算教学，全面实用，理解深刻了
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>运用GROW模型，提问的艺术，敏捷教练基本功</title>
      <link>https://leoyanlili.github.io/how-to-use-grow-model/</link>
      <pubDate>Tue, 28 Apr 2020 14:13:58 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/how-to-use-grow-model/</guid>
      <description>GROW模型是教练过程中提问的方式，代表有目的决策的四个组成部分。 用首字母缩写，GROW代表：
公众号原文：运用GROW模型，提问的艺术，敏捷教练基本功
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」让产品的业务更清晰，在敏捷文化中，影响地图的艺术</title>
      <link>https://leoyanlili.github.io/v-impact-mapping/</link>
      <pubDate>Tue, 21 Apr 2020 11:59:12 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/v-impact-mapping/</guid>
      <description>让产品的业务更清晰，在敏捷文化中，影响地图的艺术。另一个很棒的视频在这里。
[https://player.youku.com/embed/XNDY0MjU0MTg0NA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」15分钟，用产品负责人的视角看Scrum敏捷软件开发</title>
      <link>https://leoyanlili.github.io/agile-product-ownership/</link>
      <pubDate>Sat, 18 Apr 2020 08:53:26 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/agile-product-ownership/</guid>
      <description>15分钟，用产品负责人的视角看Scrum敏捷软件开发
[https://player.youku.com/embed/XNDYzNzY5NTc0MA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>敏捷Scrum开发7大事件之2：团队Sprint产能规划</title>
      <link>https://leoyanlili.github.io/sprint-capactiy-planning/</link>
      <pubDate>Thu, 16 Apr 2020 12:49:55 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/sprint-capactiy-planning/</guid>
      <description>《系统之美》
前言，在本文中，我们将从以下几点了解关于产能规划的话题：
&amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; 产能规划Capacity Planning，是指意估算和计算敏捷团队在每个迭代中能贡献的有效工作能力。 有两种广泛使用的产能测量单位，在我的其他文章中有时会写成“能力规划”。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 1. &amp;lt;strong&amp;gt;故事点&amp;lt;/strong&amp;gt;，这是一种计算速度的简单方法（最后6到10个Sprint接受的故事点的平均值）。 并针对下一个Sprint提交与速度匹配的用户故事。我个人建议另一种方法，用小时数进行产能规划。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 2. &amp;lt;strong&amp;gt;小时&amp;lt;/strong&amp;gt;，我个人建议按小时进行产能规划。 在本文中，只以这种方式进行产能规划。 它提供了更好的可见性和准确性。 还有许多其他好处，将在本文后面讨论。&amp;lt;br /&amp;gt; 这里我们通过计算下个Sprint的可用时间。计算敏捷团队的可投入的生产力（PO和SM除外）。&amp;lt;br /&amp;gt; 将详细讨论谁来计算它，在本文中考虑哪些因素。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; 这种技术非常容易计算和规划团队产能。 下面逐步说明，可以通过维护Excel来进行产能规划。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;vc_row wpb_row vc_inner vc_row-fluid vc_row-o-equal-height vc_row-o-content-middle vc_row-flex&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_column vc_column_container vc_col-sm-6&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_column-inner&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;h4&amp;gt; &amp;lt;span class=&amp;quot;dt-highlight&amp;quot;&amp;gt;Step 1 – 计算Sprint持续时间&amp;lt;/span&amp;gt; &amp;lt;/h4&amp;gt; &amp;lt;p&amp;gt; 以天为单位计算Sprint持续时间，确定Sprint的开始日期和结束日期。 为了说明这一点，进行了为期2周的Sprint，从星期三开始，到星期二结束。 正在为Sprint 2进行产能规划。&amp;lt;br /&amp;gt; 下图代表10天的2周Sprint –日历。 分散在三个物理日历周中。 在本文的其余部分中，将用这个颜色说明来解释，其中&amp;lt;br /&amp;gt; 黄色=上一个Sprint&amp;lt;br /&amp;gt; 绿色=当前的Sprint&amp;lt;br /&amp;gt; 蓝色=未来Sprint &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;img class=&amp;quot;alignnone size-large wp-image-1049&amp;quot; src=&amp;quot;https://www.</description>
    </item>
    
    <item>
      <title>「视频」敏捷文化中的Scrum是什么？ – 速成班带你深度了解</title>
      <link>https://leoyanlili.github.io/scrum-crash-course/</link>
      <pubDate>Thu, 16 Apr 2020 03:36:39 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/scrum-crash-course/</guid>
      <description>[本视频长度1.5小时] 敏捷文化中的Scrum是什么？ - 速成班带你深度了解
[https://player.youku.com/embed/XNDYxMDk2NjgwMA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>敏捷开发框架Scrum工件-冲刺/迭代燃尽图（上篇）</title>
      <link>https://leoyanlili.github.io/sprint-burndown-chart/</link>
      <pubDate>Tue, 14 Apr 2020 12:44:21 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/sprint-burndown-chart/</guid>
      <description>《系统之美》
前言，在本文中，我们将从以下几点了解有关燃尽图的详细内容（上篇为主题1-3）：
&amp;lt;div class=&amp;quot;wpb_single_image wpb_content_element vc_align_center&amp;quot;&amp;gt; &amp;lt;figure class=&amp;quot;wpb_wrapper vc_figure photoswipe-item photoswipe-wrapper&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;alignnone size-large wp-image-1004&amp;quot; src=&amp;quot;https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1.jpg&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;760&amp;quot; height=&amp;quot;428&amp;quot; srcset=&amp;quot;https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1.jpg 1024w, https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1-300x169.jpg 300w, https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1-768x432.jpg 768w, https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1-355x199.jpg 355w&amp;quot; sizes=&amp;quot;(max-width: 760px) 100vw, 760px&amp;quot; /&amp;gt;&amp;lt;/figure&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; &amp;amp;nbsp; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 如果你查看上面的图片，会注意到团队有产品待办事项，在处理sprint待办事项期间，团队提交几个用户故事，然后团队成员分配了任务，对于每个任务，每个成员消耗的是估计的工作时间。到目前为止，已经为冲刺提交了一些故事，每个故事都有一些任务，这些任务的估计时间是小时，并且每个任务都分配给了胜任的团队成员。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 如果总计工作时间，则大约为110小时。假设团队的能力为130小时。&amp;lt;br /&amp;gt; 让我们看一下sprint的另一个重要方面，有一个sprint起始日期为12月10日，它的结束日期为12月21日，这意味着是两个星期的sprint，并且sprint的持续时间为10天。&amp;lt;br /&amp;gt; 因此，从所有这些信息中，开始绘制燃尽图 &amp;lt;/p&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;Total Days of the sprint = 10 days&amp;lt;/strong&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;Total committed &amp;amp; estimated task hours for the team = 110 Hours&amp;lt;/strong&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;p&amp;gt; 如果将总小时数除以总天数平均值（110/10）= 11小时。&amp;lt;br /&amp;gt; 也就是说，如果团队每天完成11个小时的工作，那么在冲刺的最后一天结束时，团队将能够完成他们已经完成的所有工作。&amp;lt;br /&amp;gt; 请参考下面的图片，然后按照说明进行操作以更好地理解它。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_single_image wpb_content_element vc_align_center&amp;quot;&amp;gt; &amp;lt;figure class=&amp;quot;wpb_wrapper vc_figure photoswipe-item photoswipe-wrapper&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;alignnone size-large wp-image-1003&amp;quot; src=&amp;quot;https://www.</description>
    </item>
    
    <item>
      <title>敏捷开发框架Scrum工件-冲刺/迭代燃尽图（下篇）</title>
      <link>https://leoyanlili.github.io/sprint-burndown-chart-2/</link>
      <pubDate>Tue, 14 Apr 2020 12:06:05 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/sprint-burndown-chart-2/</guid>
      <description>《系统之美》
前言，在本文中，我们将从以下几点了解有关燃尽图的详细内容（下篇为主题4-6）：
（延续上篇主题1-3 敏捷开发框架Scrum工件-冲刺/迭代燃尽图（上篇））
&amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; 在这种情景下，团队需要查看当前的燃尽图和实际线。 截至特定日期，它们还有多少富余的工作时间。 可能有3种选项： &amp;lt;/p&amp;gt; &amp;lt;ol start=&amp;quot;1&amp;quot;&amp;gt; &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;团队可以直接同意将故事添加到当前的sprint中&amp;lt;/strong&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;p&amp;gt; 如果实际线结束于理想线或能力线以下，则意味着有富余时间可用于在冲刺时间内完成更多工作。&amp;lt;br /&amp;gt; 留意测试人员个人能力（工作时间），即使整个团队富余很多工作时间，如果单个测试人员级别也没有太多富余工作时间，在这种情况下，可以参考下面的选项2。&amp;lt;br /&amp;gt; 因此，先要看燃尽的情况，如果说可以提交更多故事，考虑其他限制因素再做出决定。 &amp;lt;/p&amp;gt; &amp;lt;ol start=&amp;quot;2&amp;quot;&amp;gt; &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;团队可以要求PO取消一些低优先级的故事，这意味着从当前的sprint中移除并将其放回待办事项&amp;lt;/strong&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;p&amp;gt; 如果团队发现燃尽实际线接近能力线或理想线，则团队检查已提交但尚未开始开发的相似大小故事，请产品负责人同意减少这些故事中的任何（ 一个或多个），替换为新的关键故事。&amp;lt;br /&amp;gt; 留意冲刺中剩余的时间，新故事所需的技能以及这些熟练的团队成员的富余时间。 &amp;lt;/p&amp;gt; &amp;lt;ol start=&amp;quot;3&amp;quot;&amp;gt; &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;团队认为在sprint范围内添加新故事是有风险的，建议不要更改范围。 &amp;lt;/strong&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;p&amp;gt; 如果团队离冲刺结束只有两到三天，实际线非常稳定，有些故事已完成，有些在进行中。 在这种情况下，接受新故事可能会有风险，团队可以向产品负责人解释并建议到下一个冲刺将优先完成新故事，并尽快将其部署。&amp;lt;br /&amp;gt; 不过即使是冲刺的最后几天，如果当前的所有故事都已完成并被验收，实际线已经触地。 团队可以快速估算并提交新故事。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_column vc_column_container vc_col-sm-6&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;vc_column-inner&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;h4&amp;gt; 情景2：其中一位团队成员需要连续几天请急诊病假。 &amp;lt;/h4&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; 在这种情况下，请查看燃尽图并分析实际线终点的位置。 如果终点在理想线以下很远，可以接受计划外的请假。在个人级别上，还要查看该成员有待处理的工作总小时数，以及冲刺剩余的总天数。查看同一技能的其他成员是否具有足够的富余时间来弥补差距。&amp;lt;br /&amp;gt; 如果团队认为有可能不能完成所有已提交的故事，团队就应立即通知PO，达成共识，例如确定优先级较低的故事等。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;h4&amp;gt; 情景3：在sprint测试团队的第二周，提出了太多的bug，需要在sprint持续时间内解决。 &amp;lt;/h4&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; 如果测试人员在测试用户故事时发现太多缺陷，这让开发看起来不够成熟，但还是会发生。查看实线和能力线的差异。团队多大程度上能够轻松修复缺陷以及正在进行的开发工作，测试人员需要重新测试重要的修复以及已完成的待测试的工作。&amp;lt;br /&amp;gt; 为了完成所有修复，工作燃尽图应具有足够的富余工作时间，这意味着实际线的末端应比能力线的末端低得多。如果不是，在进行下一个冲刺时，在能力规划期间保留足够的缓冲区需要重点考虑。&amp;lt;br /&amp;gt; 查看关于缺陷关闭的完成（DOD）定义，如果说所有P1和P2的缺陷必须关闭才能认为故事完成。查看P1 / P2错误的数量，评估修复它们的额外时间以及燃尽图中可用的富余时间。&amp;lt;br /&amp;gt; 考虑与产品负责人沟通，应对最坏的情况，确定优先级最低和最关键的用户故事。&amp;lt;br /&amp;gt; 燃尽图是决定现在是否应该与产品负责人沟通的第一步。或者需要进一步细化可能的其他约束。&amp;lt;br /&amp;gt; 工作中可能还有许多其他情况，燃尽图有助于针对不同情况做出决策。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_single_image wpb_content_element vc_align_center&amp;quot;&amp;gt; &amp;lt;figure class=&amp;quot;wpb_wrapper vc_figure photoswipe-item photoswipe-wrapper&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;alignnone size-large wp-image-1011&amp;quot; src=&amp;quot;https://www.</description>
    </item>
    
    <item>
      <title>「视频」敏捷开发Scrum实践 – 分解用户故事，让产品需求更易落地</title>
      <link>https://leoyanlili.github.io/v-user-story-splitting/</link>
      <pubDate>Tue, 14 Apr 2020 03:52:25 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/v-user-story-splitting/</guid>
      <description>敏捷开发Scrum实践 - 分解用户故事，让产品需求更易落地
[https://player.youku.com/embed/XNDYwMzEwNjI1Ng==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」敏捷软件开发的用户故事，你了解么？产品需求获取的一把利器</title>
      <link>https://leoyanlili.github.io/v-understand-user-story/</link>
      <pubDate>Tue, 14 Apr 2020 03:34:58 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/v-understand-user-story/</guid>
      <description>敏捷软件开发的用户故事，你了解么？产品需求获取的一把利器
[https://player.youku.com/embed/XNDYwMjQyNTI2MA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>理解Scrum 度量和关键绩效指标</title>
      <link>https://leoyanlili.github.io/understanding-scrum-metrics/</link>
      <pubDate>Tue, 07 Apr 2020 09:37:16 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/understanding-scrum-metrics/</guid>
      <description>—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更及时的更新通知。</description>
    </item>
    
    <item>
      <title>项目经理在成为PMO负责人过程中需要作出的改变</title>
      <link>https://leoyanlili.github.io/howtopmo/</link>
      <pubDate>Mon, 30 Dec 2019 03:25:23 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/howtopmo/</guid>
      <description>Less Tactical As a former US Army soldier, being less tactical was never a goal. The more tactics you had, the better you could execute on the overall military strategy. But becoming the PMO Director is more like becoming a Division Commander. You will be an integral part of the strategic portion of the battle. In order to become a PMO Leader, you need to think and communicate more strategically. You need to get out of the weeds, and out of the project plans, and into the business strategy that all of the projects are supporting.</description>
    </item>
    
    <item>
      <title>挣值管理</title>
      <link>https://leoyanlili.github.io/%E6%8C%A3%E5%80%BC%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 23 Nov 2019 06:24:40 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/%E6%8C%A3%E5%80%BC%E7%AE%A1%E7%90%86/</guid>
      <description>挣值管理（Earned Value Management, EVM）是项目管理里面成本管理部分较为重点的知识点，但是也可以用来综合考察项目范围和进度绩效，经常需要做相关计算。本文试图来整理一下关于挣值管理的一些概念和知识点。
一、 基本概念PV，EV，AC和BAC 首先是四个基本概念：
计划价值（Planned Value, PV），截止到某时间点计划要完成工作量的价值，也就是计划要做多少事；
挣值（Earned Value, EV），截止到某时间点实际已经完成工作量的价值，也就是实际做了多少事；
实际成本（Actual Cost, AC），截止到某时间点实际已经发生的成本，也就是实际花了多少钱；
完工预算（Budget At Completion, BAC），对完成该项目的计划预算，也就是完成整个项目计划多少预算；
举个例子来更通俗地说明一下以上的几个概念。假设我们现在要做一个项目，就是砌一堵长度为100米的围墙，为了方便计算我们假设总的预算是100元每米，共100*100=10000元，我们还计划项目工时10天（每天砌墙10米）来完成这个项目。
为了顺利完成该项目在项目中途我们需要对项目绩效做监控，于是我们在第四天工作结束的时候对该项目进行绩效评估。本来第四天工作结束的时候我们计划是要完成40米的任务的（因为每天计划是10米），这个40米的工作量的价值是40米100元/米 = 4000元，这个4000元就是我们的计划价值PV（计划做多少事）；实际完成了多少呢？我们发现第四天工作结束实际才完成了30米砌墙任务，这个30米围墙对应的价值是30米100元/米=3000元，这个3000元就是我们的挣值EV（实际做了多少事），也就是我们在第四天结束就完成了3000元的工作量；到第四天结束这个时间点我们实际却花了5000元，这个5000元就是我们的实际成本AC（实际花了多少钱）；总的预算10000元就是我们的完工预算BAC；总结一下就是一共计划10000元10天完成这个项目，在第四天结束的时候去检查项目绩效，发现到这个时间点为止本来应该完成4000元的项目工作量（PV），结果只完成了3000元的工作（EV），却花了5000元的成本（AC）。为了更直观表示这几个概念，可以用图表示这几个概念如下：
图中红、绿、橘黄色线分别表示AC、PV和EV，红线AC表示截止到某个时点花了多少钱（成本），斜率表示花钱的速度；绿线PV表示截止某个时点项目计划花的钱和做的项目量；橘黄色线EV表示截止到某个时点做了多少事（多少钱的工作），斜率表示做事的速度；上图我们可以看出花钱的速度比计划的要快（红线比绿线更陡，斜率更大），而做事的速度却比计划的要慢（橘黄色线比绿线更缓，斜率更小），项目绩效很不好。
二、 绩效指标CV，SV，CPI和SPI 好了，大致理解了上面PV, EV, AC, BAC等几个基本概念之后，接着我们来了解CV，SV，CPI，SPI这几个成本和进度绩效指标。
成本偏差（Cost Variance, CV），截止到某时点发生的实际成本与计划成本的偏差，CV=EV-AC
进度偏差（Schedule Variance, SV），截止到某时点的实际进度与计划进度的偏差，SV=EV-PV
成本绩效指数（Cost Performance Index, CPI），截止到某时点衡量成本绩效的一种指标，也就是实际每花一元钱，完成做了多少钱的事（花钱的效率），CPI=EV/AC
进度绩效指数（Schedule Performance Index, SPI），截止到某时点衡量进度绩效的一种指标，也就是实际完成的工作量与计划完成工作量之比，SPI=EV/PV
以前面砌墙的项目为例子，第四天结束去评估项目绩效的时候，本来计划完成40米4000元的工作量（PV），结果只砌了30米只完成了3000元的工作量（EV），那么：
进度偏差SV=EV-PV=3000-4000=-1000元，意思是相比计划我们的进度落后1000元的工作量；（负值表示进度落后，正值表示进度超前）
进度绩效指数SPI=EV/PV=3000/4000=0.75，说明当前只完成了计划任务量的75%的工作；
成本绩效的检查结果是：只完成3000元的工作量（EV）实际却花了5000元（AC）。这个时候：
成本偏差CV=EV-AC=3000-5000=-2000元，说明现在成本超支了2000元（负值表示超支，正值表示节约）；
成本绩效指数CPI=EV/AC=3000/5000=0.6，意思是前面4天我们实际花了5000元，但是只做了3000元的工作，相当于前面4天我们每花1元钱，只做了0.6元的事；在这儿要强调一下这个成本绩效指数CPI值，因为后面很多指标都和这个CPI息息相关。对于CPI的计算方法和意义一定要非常熟悉，CPI的意义是每花1元钱做了多少钱的事（花钱的效率），CPI为0.6的意思就是每花1元钱只做了0.6元的事，所以CPI的计算方法是做了的事（EV）除了花了的钱（AC）。不光会算CPI，大家还要能举一反三，比如知道CPI和做了多少事，也要会算花了多少钱，那就是花了多少钱=做了多少事/CPI，后面相关指标的计算会经常用到这个公式。
成本偏差CV和进度偏差SV在图中的直观表示如下：
图中可以看到，实际上成本偏差CV就是AC与EV的差值，而进度偏差SV是PV与EV的差值，请注意都是和挣值EV进行对比，而且做减法的时候EV都要放在前面。SPI和CPI没法很直观在图中表示，实际上就是斜率的比值，SPI是EV与PV斜率的比值，CPI是EV与AC斜率的比值。
三、 预测指标ETC，EAC，TCPI和VAC 这个时候大家应该基本了解CV, SV, CPI, SPI这几个绩效指标的含义了。在这个基础上，最后我们再来了解剩下的4个略显晦涩的预测指标：
完工尚需估算（Estimate To Completion, ETC），在某个时点，预测完成剩余的工作还需要多少成本；这个时候算预测数据的时候就要分情况了，主要取决于我们以后的工作花钱的效率跟以前比是否会发生变化？也就是考察以后工作的CPI的值会不会发生变化。根据剩余部分工作CPI的变化情况，有几种计算方法：
如果还是以当前的成本绩效完成剩余的工作，则 ETC=(BAC-EV)/CPI，也就是剩余的工作量除以成本绩效指数； 如果以计划的成本绩效（其实就是1）完成剩余的工作，则ETC=BAC-EV，也就是剩余的工作量，实际上也是用第一种情况那个公式； 如果进度绩效指标SPI也会影响完成剩余工作的成本，意思是如果严格规定我们必须要在计划的截止时间之前完成项目，那么可能就还需要额外的成本来赶工进度，这个时候就需要同时考虑CPI和SPI对于剩余工作的影响，一般计算公式则为ETC=(BAC-EV)/(CPISPI)，也就是剩余的工作量除以成本绩效指数与进度绩效指数的乘积；其中CPISPI又叫“关键比率”(Critical Ratio, CR); 完工估算（Estimate At Completion, EAC），在某个时点，预测完成整个项目需要的成本，当然就是实际已经花掉的成本加上前面那个完工尚需估算ETC，EAC=AC+ETC；如果剩余工作还是以当前成本绩效指数来完成，那么也可以这么计算EAC=BAC/CPI，这个公式也好理解，其实就是整个项目工作量除以成本绩效指数；完工估算EAC实际上就是预测项目完工时候的实际成本AC。</description>
    </item>
    
    <item>
      <title>NPV和IRR</title>
      <link>https://leoyanlili.github.io/35-2/</link>
      <pubDate>Sat, 23 Nov 2019 06:10:55 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/35-2/</guid>
      <description>净现值（Net Present Value, NPV）：说的是把未来期望收入的钱换算成现在的钱（跟算利息类似，不过是反向运算，例如明年你会赚110元，假设贴现率是10%，那么换算成现在的钱也就是110/(1+10%)=100元，也就是说你明年赚到的110元就相当于现在100元的购买率，反过来就是你现在100元，利息10%，明年你就变成了110元，往后的年份一样算法），然后累加再减去投资成本得到累计净现值。累计净现值越大越好，理论上净现&amp;gt;0项目就可行，表示有赚头。
举例：假设两个项目A和B，都是投资10万元，贴现率10%，预期收入和净现值如下。（假设项目周期都只有5年，单位：万）
从上面的例子可以看出，项目B的净现值更高更值得投资，原因是虽然A和B的5年总收入如果不考虑货币时间价值加起来是相等的都是18.52万，但是由于项目B的收入来得比较提前，所以算出来项目B的净现值高，更值得投资。从这儿可以看到净现值主要算的是刨去货币贬值影响最后还能赚多少钱。
内部报酬率（Internal
Rate of Return, IRR）：说的是累计净现值为0的时候的贴现率。这个内部报酬率的意思就是项目能承受的最大货币贬值的比率。（赢利空间，抗风险能力。）还是以上面那个例子为例，假设现在贴现率变为20%，现在计算项目A和项目B的净现值如下：
贴现率20%时项目A和项目B的净现值
可以看到项目A净现值这时为负数，而项目B净现值还是正数，这说明项目A的内部报酬率（IRR）将小于20%，而项目B的内部报酬率大于20%，因为内部报酬率是NPV为0时候的贴现率。我们最后通过计算得出当贴现率为18.45%时，项目A的NPV刚好等于0，如下表所示：
贴现率18.45%时项目A和项目B的净现值
这个时候我们就说项目A的内部报酬率（IRR）为18.45%。
同理经过计算当贴现率为23.94%时，项目B的NPV刚好等于0，如下表所示：
贴现率23.94%时项目A和项目B的净现值
这个时候我们就说项目B的内部报酬率（IRR）为23.94%。
**总结：**从上面我们可以看到，净现值（NPV）说的是在考虑货币时间价值（通货膨胀贬值）下我们在项目周期内能赚多少钱，内部报酬率（IRR）说的是在考虑货币时间价值（通货膨胀贬值）下我们在项目周期内我们能承受的最大货币贬值率有多少，更通俗地说就是假设我们去贷款来投资这个项目，所能承受的年最大利率是多少。比如某项目的内部报酬率IRR是20%，说的是该项目我们最大能承受每年20%的货币贬值率，也就是如果我们去贷款投资该项目所能承受的最大贷款年利率为20%，在贷款年利率是20%的时候投资该项目刚好保本。当实际货币贬值率只有5%时（贷款利率是5%时），那么剩下的15%就将是我们的利润，虽然看上去说的是失误空间（最多我可以失误多少还能保本），抗风险能力，实际上也可以认为说的是利润空间，盈利能力。就像你去参加考试，60分及格，你的真实水平是90分，那么你的状态不好失误空间将有30分，就算你失误掉30分你仍然能及格，这个30分换算成比率就是你的内部报酬率（IRR），你的真实水平只有65分，那么你的失误空间将只有5分，稍微失误一些你将会不及格，此时你的内部报酬率就只有5分。虽然算的是内部报酬率，实际上也说明你的真实水平（90还是65）到底怎么样。
在实际项目投资中，NPV说的是具体数值，而IRR是一个比率，如果要比较我觉得IRR肯定好点因为是个相对值，单纯NPV只是个绝对值，没有考虑投资额的大小，只有再同时考虑投资额才能更充分体现项目的盈利能力，毕竟投资10万NPV是5万和投资100万NPV也是5万两个项目的盈利能力是不一样的。
链接：https://www.zhihu.com/question/27277841/answer/307970184
来源：知乎</description>
    </item>
    
  </channel>
</rss>
