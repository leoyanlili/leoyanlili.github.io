<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agile software development on 捷伴行Agile</title>
    <link>https://www.agilewalker.com/tags/agile-software-development/</link>
    <description>Recent content in agile software development on 捷伴行Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2023 捷伴行Agile</copyright>
    <lastBuildDate>Mon, 27 Dec 2021 14:36:34 +0000</lastBuildDate><atom:link href="https://www.agilewalker.com/tags/agile-software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>谈我们的研发运维一体化交付模式</title>
      <link>https://www.agilewalker.com/about-devops-delivery/</link>
      <pubDate>Mon, 27 Dec 2021 14:36:34 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/about-devops-delivery/</guid>
      <description>物有本末，事有始终，知所先后，则近道矣。
&amp;ndash; 《大学》
[TOC]
一、说在前面的话 本文旨在记录下本人与同事，同行，以及相关领导关于研发运维一体化，架构优化与创新问题所进行的无数对话，讨论的内容，通过这些对话与讨论，很多人为本文提供了有价值的输入。
在经历了产品研发团队工作1年多的时间和开发运维团队工作6个月的时间之后，想起应该说下我们研发运维一体化技术那点事儿。每个人从不同的视角看的感受肯定不尽相同，通过本文分享下我的理解，希望大家在此有一个彼此碰撞的机会，产生更好的思考。
任何成功的架构都是适合企业自身的架构。形成过程中的挫折再所难免，非常感谢公司管理层看到我们不断的改进，交付向好的趋势，坚定地给予了团队足够的技术战略支持和耐心。CTO带领我们大家在一年半时间里，通过无数次碰撞，碰壁，不断修正中形成了当前的研发运维一体化的技术架构和协作模式，并且还在持续地改进中，印证了那句话：成功不是终点，失败也不是末日。
业务目标必须是驱动IT变革的原因，而原因又会驱动IT变革的方式。面对客户的业务，要求我们产品交付过程要更加优化，要更加敏捷，适应变化，对客户要更具有响应力，利用更少的资源做更多的事情，更高效、更快速、更高质的交付；我们要创新，吸引并发展客户群体，针对市场，灵活应变。这些是变革需求产生的驱动力，是实现开发运维实施效益的工作动机。
二、产品研发运维架构 当今，基于微服务、容器化和DevOps的云原生应用架构得到了越来越多的关注。 微服务通过将复杂的系统进行解耦从而使业务功能的修改和增加变得更加容易。专注业务的微服务技术，将一组提供少量功能的服务集合整合到一起，这些系统的整体功能来自多个服务，基于此架构能最小化团队间显示协作的需求，最大化独立部署服务的能力；容器技术提供了很好的横向扩/缩容与自愈能力；保驾护航的DevOps方法，源于敏捷开发，保证了所有环境的一致性，持续集成、持续交付（每次交付都是随时可以部署的）、持续监控、持续反馈，更加有条不紊。 产品研发运维一体化工具集（图），带标记的是我们实际在用的开源工具，产品研发中心在用的工具链覆盖软件产品研发运维的全生命周期的主要方面，工具来自免费的开源社区，目的是促进良好的协同、高效的交付、不断改进工程能力，目前主要致力于以下几方面： &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224155225202.png&amp;quot; alt=&amp;quot;image-20211224155225202&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 流水化集成和部署：自助式的图形化发布操作直观简易，开发人员可以有更多的时间在业务实现上，减少代码提交和部署之间的时间；配合敏捷迭代，每天N次快速发布。 镜像化管理和交付：客户发布有镜像仓库，本地研发有镜像管理；图形化管理镜像和容器更高效，镜像保证所有环境的一致性；大幅提升环境的运维的效率。 可视化监控和告警：研发环境监控、客户应用监控、应用日志监控、故障即时告警；在客户发现问题前响应问题，团队再也不会后知后觉，缩短响应周期，提升客户服务质量。 代码化基础架构：Jenkins脚本，负责代码集成与构建，发布本地研发环境或推送镜像仓库；Docker脚本，负责应用镜像的生成，容器运行；Shell脚本，负责客户生产环境部署，数据和文件备份，数据迁移，收集监控数据；这些代码消除了重复命令行操作，提升运维效率，代码生成一致可维护的基础架构环境，帮助开发人员专注于业务代码实现。 文档化操作流程：包括基础环境搭建，应用环境部署，业务数据备份，租户数据迁移；研发交付流程更清晰，节省人员工作交接的时间，避免人员单点故障，提高知识传递的效率；目录化也帮助操作过程的标准化。 产品研发运维一体化架构（图）在我们产品研发交付中，利用已经建立的工具链，遵循开发运维的基础架构即代码的方式，以统一的配置和代码，产生一致的服务基础环境，提供给客户业务应用服务，根据部署不同环境的迁移标准，自动化部署到开发环境，测试环境，准生产环境和客户生产环境。 &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224151744758.png&amp;quot; alt=&amp;quot;image-20211224151744758&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 实现持续交付所需的架构转换使功能变更得以按照小批次进行交付，这些变更包括开发到运维完整周期的所有代码，配置，基础设施，数据，脚本，部署流程等的变更。 架构支持多钟交付方式，其中以云端SAAS交付和客户私有化交付两种方式最常用，SAAS交付通过持续交付流水线快速完成敏捷迭代后的更新，私有化交付是通过持续交付流水线完成客户应用镜像并上传云端镜像仓库，然后从客户服务器进行授权的镜像拉取，在线部署，十分便捷。 我们对业务环境的应用服务进行实时健康状态监控和日志记录，并会对生产环境的业务数据以及文件进行全量和增量备份。 三、产品研发运维协作 产品研发运维活动协作（图）中我们每个团队都有一定的工作边界，这种边界不会泾渭分明，基于组织战略，在交付活动中是共同融合的，这样可以保障工作中的衔接更加顺畅，不会有断层，彼此都了解相关的工作情况，能让更多的人有面对问题的知识储备。我们并不以团队职能划分进行协作，而是以交付活动本身聚合各个团队的能力进行跨职能的敏捷团队协作，目的是尽早发现并解决交付的质量问题。 * 产品研发活动前移对接客户需求；质量保证活动前移，一方面，测试人员在需求上前移与项目交付合作接近客户，另一方面，开发人员在开发中引入测试驱动开发，让质量工作前移，从代码编写的过程中就开始；开发运维即DevOps活动顾名思义，在工作中前移对接开发，意味着不仅需要治理研发的环境，还要对研发出来的软件产品架构和代码有一定的了解，以便更好的完成运维工作。 * 项目交付活动是最接近客户价值的活动，而客户价值活动是和我们的业务视角对齐，产品研发到测试再到项目实施，开发运维工作贯穿始终，研发运维一体化就是用敏捷开发方法论结合DevOps技术实践，助力研发交付流水线的提升，开发和运维都希望能尽快迭代，不需要约定某个特定的时间，流水线时刻可以接受发布任务。如果迭代开发，我们每两周发布一次生产环境，我们每天都要有若干次的测试环境部署，更多次的开发环境部署。协同交付和持续反馈，是实现持续改进和质量保障的必要条件。&amp;lt;/ol&amp;gt; ### 四、带给研发的价值 1. 良好的代码版本管理（图），可以随时为部署任一版本的客户进行热修复 * 持续部署流水线，允许开发人员一键自助式部署到被授权的任一环境，如果在研发环境中，仅需几分钟即可完成一次部署；我们的私有镜像仓库，允许研发或运维人员从远程为客户环境进行自助式的私有化部署，仅仅需要执行1个部署脚本，业务应用服务的便会自动更新，排除网络影响，每个微服务组件的发布仅需1-3分钟，整个业务应用的发布在15分钟内可以完成。可以很快对迭代功能进行在部署环境下的验证。 * 可视化的监控，包括环境监控、应用监控、系统监控，团队可以快速获得反馈，随时改进，更少的意外问题和救火行为，意味着我们有时间做更多的技术架构提升和产品功能迭代。 * 研发环境、业务环境的数据安全，定时自动备份，产品研发数据备份，研发基础环境数据备份，客户业务数据备份，保护了我们的无形资产。 * 基础设施即代码，开发应用程序一样开发基础设施代码，运维代码和研发代码都在版本控制管理之下。上线一个虚拟环境或一个环境的新版本，就变成执行脚本的过程，脚本可以创建并提供一个或一组镜像，完成从操作系统到应用服务集的部署与配置。过去几个小时甚至几天才能完成的工作，现在只要几分钟。&amp;lt;/ol&amp;gt; ### 五、带给组织的价值 1. 专业的技术框架和研发流程，更具有行业的影响力和承诺客户的信心。 2. 根据组织的业务计划，有持续可评估的交付计划，能够敏捷以及快速响应客户反馈，成功交付。 3. 更高效的主动运维服务，持续监控，团队可以在问题影响客户业务之前，及时解决，保障客户满意度。 4. 更低的交付成本和运维成本，组织持续投入的DevOps活动，从而确保标准化、流程化的业务应用和研发环境治理，无需任何定制和人工重复的浪费，更加精益。 5. 敏捷文化的方法和技术落地，有效的传播，让更多的团队从中受益。 ### 六、带给客户的价值 1. 从容应对快速变化的业务需求，可以做到对业务的无感知更新，保障业务连续性。整个热部署、快速部署过程从变更的源代码提交到客户业务人员手中的可以使用的功能，在10分钟左右可以完成。 2. 保证业务数据安全，每天都有定时的自动全量和增量的备份，可以做到从故障中快速恢复业务的容灾恢复能力。 3. 统一平台的可视化监控、应用运行日志、故障告警即时提醒，客户关心的一切，尽在掌握。 ### 七、走向未来的路 前面看到本文的主标题，我们这里说的不是单纯的从速度维度来说越快越好，产品研发交付会思考：如何在质量保证，客户满意前提下，合理的快。先想在哪方面快，再讨论怎么快，最后再说有多快。 敏捷或速度的诉求是研发运维一体化存在的第一性原理。我们持续改进的方向主要在三方面：产品功能开发，开发运维环境，组织协作流程。诸如敏捷、开发运维这样的新方法，以及云计算、微服务这样的新技术，加速催生了新的IT能力。在整个组织内实施研发运维一体化，让团队变得更加敏捷、高效及创新。技术架构面临的挑战是未来业务多变，速度要快和稳定性要高，系统更复杂。 我们着眼当前的产品交付工作，努力提升团队满意度，组织满意度和客户满意度；保持短期日常改进工作，做好质量化开发，流水化部署，容器化交付，可视化监控，代码化基础架构，自动化运维；坚持做好未来长期的规划，目标就是：帮团队增效，帮公司降成本，保障客户业务持续价值。 2021年即将过去，2022年很快来到，关于开发运维团队接下来推进的几个主要方向上的工作如下： 1.</description>
    </item>
    
    <item>
      <title>如何理解并应用精益敏捷Kanban看板</title>
      <link>https://www.agilewalker.com/understand-kanban/</link>
      <pubDate>Fri, 10 Jul 2020 03:45:18 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/understand-kanban/</guid>
      <description>我引入看板系统的目标是：防止过载、控制工作流的波动性，以及触发渐进式变革。
&amp;ndash;大卫.安德森
看板的基础知识 看板是一种用于管理产品创造的方法，该方法强调持续交付，同时又不增加开发团队的负担。 像Scrum一样，看板是旨在帮助团队更有效地协作的流程。它是一种可视化工作流程的方法。为了在需求与可用产能和瓶颈之间取得平衡，该框架在下面的工作中具有很高的生产率和效率。
临时请求(按需的任务) 计划外工作 生产支持 简要历史 在1940年代后期，丰田公司从超级市场那里找到了更好的工程流程。 他们注意到商店的店员通过商店的库存而不是供应商的库存来补充货品。
只有当一个货品接近售罄时，店员才能进行订购。 超市的“实时”交付流程激发了丰田工程师重新考虑他们的方法，并开创了一种新方法-看板系统-该方法可以使库存与需求匹配，并实现更高的质量和产量水平。
看板，拼写为Kanban，是日语中的“信号板”，表示“可用产能（工作）”。 看板是与精益生产和实时生产（JIT）有关的概念，它被用作排产系统，告诉你要生产什么，何时生产以及要生产多少。看板成为支持整个生产系统运行的有效工具，也是促进改进的很好的方法。
原则 在看板方法上实施软件增量是一个基于拉动的系统，它可以帮助团队以可持续的速度和产能进行交付，减少了工作和时间的浪费。 保证这一点，就需要遵循以下看板的基本原则。
1. 可视化工作
看板工作面板的可视化模型及其工作流程使范围和功能透明化，有助于观察和检查从待办事项到完成的工作流程。 这样会让工作可见，也包括阻塞，瓶颈和队列以及即将进行的工作，这有助于团队制定策略，是继续进行现有的工作或将新工作带入。
2. 限制在制品WIP
团队为看板面板中的所有“进行中”的列共同定义了一个限制，例如分析，开发，测试等。此WIP限制实现了基于拉动的系统，因为只有在该列下的工作总数少于其上限的情况下才可以将工作从上一列拉至当前列。
这有助于平衡基于流的方法，团队不会开始并承担过多的工作。 它减少了浪费，并帮助团队专注于先完成后开始。
3. 聚焦在工作流
要完成一项工作并增加价值，它必须经历其开发过程的多个阶段。 如分析，开发，测试，评审等。为了获得看板的价值，团队需要专注于从启动到完成的工作流程。 通过遵循上面2条原则，可以帮助你专注于流程。
专注于工作流会使团队可视化即将到来的的瓶颈并对其采取行动。 以便保持流动。 团队经常制定工作的策略以优化流程。
把看板和现实生活相关联 我们已经学习了看板的基础知识及其原理，让我们尝试将看板流程与现实生活联系起来。 假设你已经知道并正在实践Scrum，我们将在其中执行定义的时间框的迭代。 我们提交一堆故事，对其进行处理2到3周，然后完成迭代，并再次计划新的一堆故事以进行下一次迭代。 在看板中，我们不会为迭代，时间框或冲刺提交故事。 我们做的有些不同。
在下面的示例中，我们将Scum和看板与现实生活联系起来。 假设人们是故事，放映厅是一次迭代，放映时间是迭代时间。
关联Scrum流程和现实生活 这个案例说明了放映厅中的人员流动，一次是一群人。 如果我们假设人是用户故事，并且将时间显示为迭代或时间框。 然后，你可能会注意到一群人一起在放映厅里走来走去。 我们有明确的座位容量和放映时间。 为每次放映安排的人在放映开始之前已预先计划好了。
关联看板流程和现实生活 这个案例说明了门卫允许公园中的人流是一个接一个的。 如果我们假设人是用户故事，那么公园就是看板面板。 然后，你可能会注意到没有定义的公园放映时间，因为它是24小时开放的。 进入公园或在公园内漫游并出来的人不在同一个人群中。 我们没有容量和演出时间。 但是，公园的管理层决定一次不允许在公园内同时容纳6人以上，以提高公园内人们的舒适度。
在此图中，让我们尝试用Scrum术语关联场景。 如果我们假设人是用户故事，那么在大厅外面等待下次放映的人就是Backlog中的用户故事列表。当前的放映厅放映就是当前Sprint或迭代。观众是冲刺的故事。 显示时间是冲刺持续时间。 放映厅容纳人数是团队对冲刺的产能。 已经看过电影的人是以前冲刺中的“完成”故事，可能已经确定已发布或已部署。
在这里，让我们尝试用上面的图片来映射看板术语。 假设人员是用户故事或任务，公园是可视看板面板。 排队等候在外面的人是当前的看板Backlog。 放映时间没有定义，“最大容量”没有限制，但是管理层决定不允许面板中的故事超过6个。 已经从公园出来的人就是已经可以部署的用户故事。 管理层正在统计出来的故事，以便允许进入新的故事。看板面板(公园)内的故事(人)没有确定的开始或结束日期。
上面图片中进行解释，以解释Scrum流程。
上面图片中进行说明，以解释看板流程。</description>
    </item>
    
    <item>
      <title>Scrum入门系列PPT之-Scrum介绍</title>
      <link>https://www.agilewalker.com/scrum-beginner-ppt-intro/</link>
      <pubDate>Wed, 03 Jun 2020 07:07:25 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-beginner-ppt-intro/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这不是结束，甚至不是结束的开始，但这毕竟是开始的结束。&lt;/p&gt;
&lt;p&gt;-&amp;ndash; 温斯顿.丘吉尔&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>「视频」7分钟学习Scrum，最流行的敏捷框架入门，软件开发团队不可错过</title>
      <link>https://www.agilewalker.com/7-minutes-scrum/</link>
      <pubDate>Fri, 03 Apr 2020 09:23:12 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/7-minutes-scrum/</guid>
      <description>[https://player.youku.com/embed/XNDYxNzcyMjYwMA==]</description>
    </item>
    
    <item>
      <title>「视频」总结的真好，敏捷Scrum成果度量方法？锻炼英语，居然都看完了</title>
      <link>https://www.agilewalker.com/scrum-okr-kpi-metrics/</link>
      <pubDate>Mon, 30 Mar 2020 04:06:56 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-okr-kpi-metrics/</guid>
      <description>[https://player.youku.com/embed/XNDYxMDk3Mzg4MA==]</description>
    </item>
    
    <item>
      <title>「视频」Scrum和Kanban，有什么区别？哪个更适合你的团队？</title>
      <link>https://www.agilewalker.com/scrum-and-kanban/</link>
      <pubDate>Mon, 30 Mar 2020 04:00:37 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-and-kanban/</guid>
      <description>[https://player.youku.com/embed/XNDYwMjg2OTgzMg==]</description>
    </item>
    
    <item>
      <title>选择合适自己的敏捷认证培训</title>
      <link>https://www.agilewalker.com/your-favorite-agile-certification/</link>
      <pubDate>Sun, 29 Mar 2020 15:04:52 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/your-favorite-agile-certification/</guid>
      <description>考试和证书：考试有专门考点，监考严格，纸质考试。考试包含120个选择题，其中100道为打分题，20道不计分（根据当次考试情况选取），考试后6-7周在线出成绩。证书更新周期是每三年，可以通过获得PDU或支付费用来刷新。
考试和证书：考试包含50个选择题，答对37个合格，培训结束当天就可以考试，马上在线出成绩。证书更新周期是每三年，可以通过获得SDU或支付费用来刷新，认证还给PDU的哦。
考试和证书：包含80个选择问题，答对68题通过。证书永久有效。
考试和证书：考试包含40个选择题, 答对26题通过。证书永久有效。
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>「视频」7分钟，ScrumMaster告诉你 – 如何打造一支敏捷团队</title>
      <link>https://www.agilewalker.com/how-to-develop-scrum-team/</link>
      <pubDate>Fri, 27 Mar 2020 10:46:38 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/how-to-develop-scrum-team/</guid>
      <description>[https://player.youku.com/embed/XNDYwMTM1Nzg4MA==]</description>
    </item>
    
    <item>
      <title>「视频」敏捷不仅仅是一个方法论！</title>
      <link>https://www.agilewalker.com/agile-is-not-a-methodology/</link>
      <pubDate>Sat, 21 Mar 2020 10:42:27 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-is-not-a-methodology/</guid>
      <description>[https://player.youku.com/embed/XNDU5Nzg4OTI0MA==]</description>
    </item>
    
    <item>
      <title>新冠疫情期间，简单介绍几款用于敏捷开发的协作工具</title>
      <link>https://www.agilewalker.com/agile-collaberation-tools/</link>
      <pubDate>Thu, 19 Mar 2020 05:30:39 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-collaberation-tools/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>简说敏捷转型可视化和可视化敏捷方法</title>
      <link>https://www.agilewalker.com/agile-visualization/</link>
      <pubDate>Thu, 19 Mar 2020 04:41:39 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-visualization/</guid>
      <description>在服务企业研发团队的过程中，我们发现不少团队碰到了类似的问题：
你经常在思考究竟哪些工作是最重要的？如何避免被无穷无尽的项目与工作淹没？
团队成员声称完成了自己的大部分任务，但团队实际交付的需求却寥寥无几？
由于某些问题导致工序一直处于等待状态，怎么识别和处理这些延迟？
成员之间不知道互相都在干什么？各自鸵鸟式地进行着工作。
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>敏捷教练的软硬技能树</title>
      <link>https://www.agilewalker.com/agile-coach-skills-tree/</link>
      <pubDate>Sun, 15 Mar 2020 10:32:36 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-coach-skills-tree/</guid>
      <description>最近想整理一个敏捷教练技能树，如今抗疫在家，就完成我的这个PBI吧，不论内容是否全面，经常总结，多学习总是人间正道。
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>敏捷教练的26项修炼「转载」</title>
      <link>https://www.agilewalker.com/agile-coach-a-z/</link>
      <pubDate>Wed, 04 Mar 2020 07:57:42 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-coach-a-z/</guid>
      <description>敏捷方法学带来了新的角色——“敏捷教练”，它不常见于传统方法学中，甚或不曾为之提及。已驾轻就熟的实践者，可能会视之为浑然天成，羚羊挂角、无迹可寻；而初窥门径的新手则会心生疑云：“敏捷教练为何如此重要？‘部门经理’、‘团队领导’、‘技术领导’，他们的问题何在？Monster.com为此提供54个职位，又是何故？”奇文共欣赏，疑义相与析，当是吾等本色。且与笔者同游于本文中，或可领会敏捷教练之所思、所行，更要知其意义所在。
A 即 Advice（建议）：“我曾见别人做过。我觉得你们这样做效果更好。”
注：建议和引导，而不是命令和强迫，教练的作用就是引导，而不是简单的指手画脚。
以传统方式工作的经理会明确指导团队该怎么做，而不是帮助他们找到属于自己的道路。敏捷教练虽然常常以顾问的角色出现，但她不会做太多导向工作，而是在需要的时候出现，帮助团队避开已为人知的陷阱，或是引导他们走向佳境（参见引导和导师）。
B 即 Balance（平衡）：“别把好东西丢掉。”
注：易经的系统观是平衡，中庸的过犹不及也是平衡，项目经理最重要的技能之一就是平衡。
有时候团队会忙得自顾不暇，以至于又回到老路上来。教练会寻找良机，跟团队一起工作，去发现、尝试可能为团队带来巨大利益的新做法。他还会确保那些依然为团队带来收益的实践不会被随手抛弃，为人遗落，他常常会把它们跟新方法合并。
C 即 Celebration（庆功）：“嘿，上个迭代你们干的太棒了！”
注：随时随地的培训和引导，随时随地的一句话表扬，阶段和里程碑点的庆功会，保持团队士气。
团队常常会低估成功和肯定式探询的力量。迭代一步步向结果推进，形成节奏，帮助大家意识到何时达成目标（参见反馈）。但是人们常常会忘记迭代中的庆功。整个团队在项目结束以后，或是某些重大里程碑完成后庆功（参见感染力），会极大鼓舞士气。敏捷教练每天会跟团队一起庆祝每个小小的胜利。
D 即 Daring（勇敢）：“跟你们说，我豁出去了，是这样的……”
注：一个激情的团队一定是勇于承担责任，勇于面对挑战，勇于自我突破的团队。
引入变化就有相应的风险，敏捷教练需要承担责任，寻找途径，以最小的风险带来最大的价值。在团队中，他往往是第一个破冰而行的，激励团队，给每个人带来安全感，让他们有勇气提出建议，即使不敢尝试不同的工作方式。
E 即 Encouragement（鼓励）：“加油！这玩意很NB！”
注：责备是士气低落，鼓励使士气高涨。敏捷项目最重要的资产就是团队，团队最重要的就是士气。
有些敏捷实践看上去很直白，可如果没有理解它们背后的原理和带来的影响，实施起来就会很容易出问题。简单试上一段时间以后，人们往往会感觉到哪些东西从前效果更好，现在用的实践存在哪些限制（参见提问）。敏捷教练会为人们提供支持和鼓励，帮助他们度过尝试新实践的不适应期，有时也会帮他们解决掉实践中比较难以实施的部分。
F 即 Feedback（反馈） ：“你有没有发现团队……？”
注：有了快速反馈的流程才是闭环的流程，有了反馈的沟通才是积极寻求改善和突破的沟通。
所有的敏捷方法学都提倡快速反馈。敏捷教练在团队工作的方方面面都会强调反馈机制的重要性——从团队协作，到过程，再到实践。定期的反馈可以帮助团队更有效地适应所处的特殊环境。
G 即 Guidance（引导） ：“看上去我们有三种选择，我觉得前两种可能更好，你们觉得呢？”
注：一切众生皆有佛性。自性迷，佛即众生；自性悟，众生即佛。如何激发每个人的潜能?
敏捷狂热者的工作方式跟敏捷教练不同。狂热者习惯使用命令和控制的方式，而敏捷教练只是加以引导，帮助每个人自我学习。他引导团队避开已知的陷阱，但他也明白失败是成功之母。
H 即 Humility（谦虚）：“实际上，活儿是大家干的，不是我。”
注：教练一定要勇于承担责任，时刻强调和发挥团队的力量。傲慢自大的教练在团队中没有容身之地。
敏捷教练会为团队提供指导，帮助他们完成工作。当他们犯错误的时候，她要勇于承担责任，团队取得成功后，她要保证适当的人得到奖赏。傲慢自大的教练在团队中没有容身之地。
I 即 Infectious（感染力）：“你得过来看看这个！”
注：团队教练，你有感染力吗？有人愿意追随你吗？
敏捷教练会给团队带来激情和活力，用自己为榜样，鼓舞人们燃起对工作的激情。他理解团队愿意接受多少变化，也知道自己展示热情的分寸，不会被人跟敏捷狂热者混为一谈。他也一直在寻找恰当的时机与大家分享他的能量与热情。
J 即 Jiggle（摇摆）：“这样调整一下，再那样调整一下。”
注：翻译为摇摆不太合适，应该理解为精益求精和持续改进。实践过程就是持续改进过程。
很多事情要想做好不只一种方式，即便团队跟上次采用同样的实践也是如此。敏捷教练帮助团队在以往经验和认识的基础上调整实践，使他们更好地适应团队与环境。
K 即 Knowledge（知识） ：“你读过这本书/这篇论文/这个邮件列表了么？”
注：随时随地的知识传授，知识的共享和沟通，知识的转化和升华。
敏捷方面的知识浩如烟海：敏捷实践、敏捷原则、实施方法与面临的挑战，等等等等。敏捷教练对这整套资源很熟悉，可以引导大家去看相关的书籍、论文或是博客，查找跟他们遇到的问题相关的资源。
L 即 Listening（聆听） ：“你说你想要做……”
注：团队教练的重点是沟通，而沟通首要学会的就是积极的倾听。
敏捷教练需要倾听团队的看法，从而了解他们当前的状态、他们的好恶。有时候也会把她听到的东西反馈给团队。她认真听取每个人的意见，掌握他们的需求与担忧，并据此调整她工作的优先级和相关活动。有时她也会把这些意见跟别人分享，也会鼓励人们为自己辩护。
M 即 Mentor（导师） : 让自己成为多余的人</description>
    </item>
    
    <item>
      <title>告诉你的CxO敏捷教练是什么</title>
      <link>https://www.agilewalker.com/what-is-agile-coach/</link>
      <pubDate>Wed, 04 Mar 2020 07:18:47 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/what-is-agile-coach/</guid>
      <description>—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>与大家分享一些“敏捷教练”的定义</title>
      <link>https://www.agilewalker.com/agile-coach-defines/</link>
      <pubDate>Wed, 04 Mar 2020 02:44:04 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-coach-defines/</guid>
      <description>引用来自网络的关于与敏捷教练定义，大家应该会有个基本一致的感受：
参考：
让你用3分钟简单说敏捷教练能力模型
敏捷教练日常工作中的检查列表
-&amp;ndash;
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>从敏捷价值观看中国速度应对2020新冠肺炎疫情COVID-19</title>
      <link>https://www.agilewalker.com/agile-apply-to-2020-ncov-dealing/</link>
      <pubDate>Sat, 29 Feb 2020 08:48:58 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-apply-to-2020-ncov-dealing/</guid>
      <description>「2020-新冠病毒疫情最新情报速递」</description>
    </item>
    
    <item>
      <title>Scrum：我很好，我不是一个敏捷软件开发框架</title>
      <link>https://www.agilewalker.com/scrum-is-not-agilesoftware-framework/</link>
      <pubDate>Tue, 25 Feb 2020 04:16:15 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/scrum-is-not-agilesoftware-framework/</guid>
      <description>2019-新冠病毒疫情最新情报速递
Scrum联盟说：Scrum是一组简单但功能强大的原则和实践，可帮助团队在短周期内交付产品，从而实现快速反馈，持续改进和快速适应变化。
许多Scrum专家说：Scrum是一个产品开发框架。
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>让你用3分钟简单说敏捷教练能力模型</title>
      <link>https://www.agilewalker.com/agile-coach-competency-framework/</link>
      <pubDate>Sat, 22 Feb 2020 10:30:04 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/agile-coach-competency-framework/</guid>
      <description>1) 保持中立的态度：敏捷教练在引导团队会议，提供专业指导以及培训的时候，需要保持不偏不倚的心境，不受来自高层或自己个人喜好的牵制和影响。
2) 服务客户的立场：敏捷教练的客户包括个人、团队、组织。客户更理解自己所处的环境，所以教练除了给出必要的指导和协助更要尊重客户自己的选择和决定。
3) 鼓励客户自实践：企业投资敏捷教练的目的是为了最终将敏捷思想，技能、实践转移给企业组织内部，成为一个自我管理，自我成长，高效能和可持续性的敏捷型组织。
4) 勇敢暴露问题：敏捷教练不会帮助客户掩饰问题，如果团队还在船货膜拜的伪敏捷，不能说团队已经真正敏捷。
5) 发出自己的声音：敏捷教练需要提出自己独到的见解，所有的动因都是为了解决问题，不需要为自己认为不正确的事情而附和任何人。
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>聘请Agile Coach前，建议可以先问5个问题</title>
      <link>https://www.agilewalker.com/5-questions-before-hiring-agile-coach/</link>
      <pubDate>Fri, 21 Feb 2020 13:13:23 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/5-questions-before-hiring-agile-coach/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>关于我们</title>
      <link>https://www.agilewalker.com/whoami/</link>
      <pubDate>Thu, 09 Jan 2020 04:37:11 +0000</pubDate>
      
      <guid>https://www.agilewalker.com/whoami/</guid>
      <description>我是老彦，居住在中国上海，一位终身学习的研发效能改进实践者。程序员出身，目前是IT咨询公司的敏捷教练，工作涉及敏捷软件开发实践和DevOps落地，项目管理，组织敏捷转型和研发效能改进，是中国敏捷社区的参与者。 希望能和大家一起促进敏捷文化在软件开发领域的传播，并能在更多的领域获得有趣创新。 这里有干货，也有鸡汤，更有蟹羹。大家关心的就是我要努力关注的，让我们一起向上生长！ “不断学习和实践会让人的成长来的更踏实。” Scrum Alliance认证 | CSP-SM PMI认证 | PMI-ACP PMI认证 | PMI-PMP —
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
  </channel>
</rss>
