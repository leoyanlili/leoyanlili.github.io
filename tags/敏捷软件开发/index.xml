<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>敏捷软件开发 on 捷伴行Agile</title>
    <link>https://leoyanlili.github.io/tags/%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 敏捷软件开发 on 捷伴行Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2023 捷伴行Agile</copyright>
    <lastBuildDate>Sat, 02 Apr 2022 02:54:46 +0000</lastBuildDate><atom:link href="https://leoyanlili.github.io/tags/%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「视频」敏捷开发基础，质量内建，帮助组织启动敏捷转型</title>
      <link>https://leoyanlili.github.io/agile-foundation-transformation/</link>
      <pubDate>Sat, 02 Apr 2022 02:54:46 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/agile-foundation-transformation/</guid>
      <description>[https://player.youku.com/embed/XNTg1Njc1NzE4NA]</description>
    </item>
    
    <item>
      <title>谈我们的研发运维一体化交付模式</title>
      <link>https://leoyanlili.github.io/about-devops-delivery/</link>
      <pubDate>Mon, 27 Dec 2021 14:36:34 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/about-devops-delivery/</guid>
      <description>物有本末，事有始终，知所先后，则近道矣。
&amp;ndash; 《大学》
[TOC]
一、说在前面的话 本文旨在记录下本人与同事，同行，以及相关领导关于研发运维一体化，架构优化与创新问题所进行的无数对话，讨论的内容，通过这些对话与讨论，很多人为本文提供了有价值的输入。
在经历了产品研发团队工作1年多的时间和开发运维团队工作6个月的时间之后，想起应该说下我们研发运维一体化技术那点事儿。每个人从不同的视角看的感受肯定不尽相同，通过本文分享下我的理解，希望大家在此有一个彼此碰撞的机会，产生更好的思考。
任何成功的架构都是适合企业自身的架构。形成过程中的挫折再所难免，非常感谢公司管理层看到我们不断的改进，交付向好的趋势，坚定地给予了团队足够的技术战略支持和耐心。CTO带领我们大家在一年半时间里，通过无数次碰撞，碰壁，不断修正中形成了当前的研发运维一体化的技术架构和协作模式，并且还在持续地改进中，印证了那句话：成功不是终点，失败也不是末日。
业务目标必须是驱动IT变革的原因，而原因又会驱动IT变革的方式。面对客户的业务，要求我们产品交付过程要更加优化，要更加敏捷，适应变化，对客户要更具有响应力，利用更少的资源做更多的事情，更高效、更快速、更高质的交付；我们要创新，吸引并发展客户群体，针对市场，灵活应变。这些是变革需求产生的驱动力，是实现开发运维实施效益的工作动机。
二、产品研发运维架构 当今，基于微服务、容器化和DevOps的云原生应用架构得到了越来越多的关注。 微服务通过将复杂的系统进行解耦从而使业务功能的修改和增加变得更加容易。专注业务的微服务技术，将一组提供少量功能的服务集合整合到一起，这些系统的整体功能来自多个服务，基于此架构能最小化团队间显示协作的需求，最大化独立部署服务的能力；容器技术提供了很好的横向扩/缩容与自愈能力；保驾护航的DevOps方法，源于敏捷开发，保证了所有环境的一致性，持续集成、持续交付（每次交付都是随时可以部署的）、持续监控、持续反馈，更加有条不紊。 产品研发运维一体化工具集（图），带标记的是我们实际在用的开源工具，产品研发中心在用的工具链覆盖软件产品研发运维的全生命周期的主要方面，工具来自免费的开源社区，目的是促进良好的协同、高效的交付、不断改进工程能力，目前主要致力于以下几方面： &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224155225202.png&amp;quot; alt=&amp;quot;image-20211224155225202&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 流水化集成和部署：自助式的图形化发布操作直观简易，开发人员可以有更多的时间在业务实现上，减少代码提交和部署之间的时间；配合敏捷迭代，每天N次快速发布。 镜像化管理和交付：客户发布有镜像仓库，本地研发有镜像管理；图形化管理镜像和容器更高效，镜像保证所有环境的一致性；大幅提升环境的运维的效率。 可视化监控和告警：研发环境监控、客户应用监控、应用日志监控、故障即时告警；在客户发现问题前响应问题，团队再也不会后知后觉，缩短响应周期，提升客户服务质量。 代码化基础架构：Jenkins脚本，负责代码集成与构建，发布本地研发环境或推送镜像仓库；Docker脚本，负责应用镜像的生成，容器运行；Shell脚本，负责客户生产环境部署，数据和文件备份，数据迁移，收集监控数据；这些代码消除了重复命令行操作，提升运维效率，代码生成一致可维护的基础架构环境，帮助开发人员专注于业务代码实现。 文档化操作流程：包括基础环境搭建，应用环境部署，业务数据备份，租户数据迁移；研发交付流程更清晰，节省人员工作交接的时间，避免人员单点故障，提高知识传递的效率；目录化也帮助操作过程的标准化。 产品研发运维一体化架构（图）在我们产品研发交付中，利用已经建立的工具链，遵循开发运维的基础架构即代码的方式，以统一的配置和代码，产生一致的服务基础环境，提供给客户业务应用服务，根据部署不同环境的迁移标准，自动化部署到开发环境，测试环境，准生产环境和客户生产环境。 &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224151744758.png&amp;quot; alt=&amp;quot;image-20211224151744758&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 实现持续交付所需的架构转换使功能变更得以按照小批次进行交付，这些变更包括开发到运维完整周期的所有代码，配置，基础设施，数据，脚本，部署流程等的变更。 架构支持多钟交付方式，其中以云端SAAS交付和客户私有化交付两种方式最常用，SAAS交付通过持续交付流水线快速完成敏捷迭代后的更新，私有化交付是通过持续交付流水线完成客户应用镜像并上传云端镜像仓库，然后从客户服务器进行授权的镜像拉取，在线部署，十分便捷。 我们对业务环境的应用服务进行实时健康状态监控和日志记录，并会对生产环境的业务数据以及文件进行全量和增量备份。 三、产品研发运维协作 产品研发运维活动协作（图）中我们每个团队都有一定的工作边界，这种边界不会泾渭分明，基于组织战略，在交付活动中是共同融合的，这样可以保障工作中的衔接更加顺畅，不会有断层，彼此都了解相关的工作情况，能让更多的人有面对问题的知识储备。我们并不以团队职能划分进行协作，而是以交付活动本身聚合各个团队的能力进行跨职能的敏捷团队协作，目的是尽早发现并解决交付的质量问题。 * 产品研发活动前移对接客户需求；质量保证活动前移，一方面，测试人员在需求上前移与项目交付合作接近客户，另一方面，开发人员在开发中引入测试驱动开发，让质量工作前移，从代码编写的过程中就开始；开发运维即DevOps活动顾名思义，在工作中前移对接开发，意味着不仅需要治理研发的环境，还要对研发出来的软件产品架构和代码有一定的了解，以便更好的完成运维工作。 * 项目交付活动是最接近客户价值的活动，而客户价值活动是和我们的业务视角对齐，产品研发到测试再到项目实施，开发运维工作贯穿始终，研发运维一体化就是用敏捷开发方法论结合DevOps技术实践，助力研发交付流水线的提升，开发和运维都希望能尽快迭代，不需要约定某个特定的时间，流水线时刻可以接受发布任务。如果迭代开发，我们每两周发布一次生产环境，我们每天都要有若干次的测试环境部署，更多次的开发环境部署。协同交付和持续反馈，是实现持续改进和质量保障的必要条件。&amp;lt;/ol&amp;gt; ### 四、带给研发的价值 1. 良好的代码版本管理（图），可以随时为部署任一版本的客户进行热修复 * 持续部署流水线，允许开发人员一键自助式部署到被授权的任一环境，如果在研发环境中，仅需几分钟即可完成一次部署；我们的私有镜像仓库，允许研发或运维人员从远程为客户环境进行自助式的私有化部署，仅仅需要执行1个部署脚本，业务应用服务的便会自动更新，排除网络影响，每个微服务组件的发布仅需1-3分钟，整个业务应用的发布在15分钟内可以完成。可以很快对迭代功能进行在部署环境下的验证。 * 可视化的监控，包括环境监控、应用监控、系统监控，团队可以快速获得反馈，随时改进，更少的意外问题和救火行为，意味着我们有时间做更多的技术架构提升和产品功能迭代。 * 研发环境、业务环境的数据安全，定时自动备份，产品研发数据备份，研发基础环境数据备份，客户业务数据备份，保护了我们的无形资产。 * 基础设施即代码，开发应用程序一样开发基础设施代码，运维代码和研发代码都在版本控制管理之下。上线一个虚拟环境或一个环境的新版本，就变成执行脚本的过程，脚本可以创建并提供一个或一组镜像，完成从操作系统到应用服务集的部署与配置。过去几个小时甚至几天才能完成的工作，现在只要几分钟。&amp;lt;/ol&amp;gt; ### 五、带给组织的价值 1. 专业的技术框架和研发流程，更具有行业的影响力和承诺客户的信心。 2. 根据组织的业务计划，有持续可评估的交付计划，能够敏捷以及快速响应客户反馈，成功交付。 3. 更高效的主动运维服务，持续监控，团队可以在问题影响客户业务之前，及时解决，保障客户满意度。 4. 更低的交付成本和运维成本，组织持续投入的DevOps活动，从而确保标准化、流程化的业务应用和研发环境治理，无需任何定制和人工重复的浪费，更加精益。 5. 敏捷文化的方法和技术落地，有效的传播，让更多的团队从中受益。 ### 六、带给客户的价值 1. 从容应对快速变化的业务需求，可以做到对业务的无感知更新，保障业务连续性。整个热部署、快速部署过程从变更的源代码提交到客户业务人员手中的可以使用的功能，在10分钟左右可以完成。 2. 保证业务数据安全，每天都有定时的自动全量和增量的备份，可以做到从故障中快速恢复业务的容灾恢复能力。 3. 统一平台的可视化监控、应用运行日志、故障告警即时提醒，客户关心的一切，尽在掌握。 ### 七、走向未来的路 前面看到本文的主标题，我们这里说的不是单纯的从速度维度来说越快越好，产品研发交付会思考：如何在质量保证，客户满意前提下，合理的快。先想在哪方面快，再讨论怎么快，最后再说有多快。 敏捷或速度的诉求是研发运维一体化存在的第一性原理。我们持续改进的方向主要在三方面：产品功能开发，开发运维环境，组织协作流程。诸如敏捷、开发运维这样的新方法，以及云计算、微服务这样的新技术，加速催生了新的IT能力。在整个组织内实施研发运维一体化，让团队变得更加敏捷、高效及创新。技术架构面临的挑战是未来业务多变，速度要快和稳定性要高，系统更复杂。 我们着眼当前的产品交付工作，努力提升团队满意度，组织满意度和客户满意度；保持短期日常改进工作，做好质量化开发，流水化部署，容器化交付，可视化监控，代码化基础架构，自动化运维；坚持做好未来长期的规划，目标就是：帮团队增效，帮公司降成本，保障客户业务持续价值。 2021年即将过去，2022年很快来到，关于开发运维团队接下来推进的几个主要方向上的工作如下： 1.</description>
    </item>
    
    <item>
      <title>我们这样实践Scrum敏捷每日站会</title>
      <link>https://leoyanlili.github.io/how-we-daily-scrum/</link>
      <pubDate>Sun, 06 Jun 2021 06:59:19 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/how-we-daily-scrum/</guid>
      <description>孔子说 性相近，习相远。我们人类性情都差不多，而每个人的习惯千差万别。我不认为敏捷能改变任何人，而是一群有共同积极价值观的人走到一起，在实施敏捷后，可以把各自的潜能激发出来。
众所周知，每日站会的真正价值在于确保团队能持续地为当前的迭代的“承诺”而努力。每日站会并不是状态汇报，而是信息分享和调整协作。一个成熟的团队可以用不同的方式和关注点来开站会，与此同时团队也继续在改进中使用敏捷。
我和一个由9位成员的团队一起工作，我们在一起工作至今已经近8个月了。在我加入团队之前，大部分成员对于敏捷是完全不熟悉的。我们可以在15分钟的框架内完成每日站会，这样也更高效。在过去这段时间，我们在每日站会中尝试了不同的方法，目的在于在个人和团队磨合成长的同时，为我们的日常工作建立一个积极的氛围。我们认为真正重要的是：文化和人。
每日站会是什么 每日站会是指团队每天早上投入一天的工作前，进行的15分钟以内的会议。主要目的是给团队沟通每日承诺和迭代目标进展的机会。Scrum Master， Product Owner和团队成员都需要参加每日站会。当被问到我们敏捷团队在每日站会上讨论什么的时候，通常是团队成员围绕三个主题：
昨天，我们是否达成了目标？每个人的做了什么？还有哪些差距？ 今天，为了达成迭代的目标，我们的新目标是什么？每个人打算领取什么工作？ Sprint目标现在还有多大差距？是否可能延迟？哪些问题和障碍需要解决？ 敏捷开发团队是一个跨职能团队，而且不是所有人都是全栈工程师。完成一个故事的开发和测试，往往需要多个人员来协作完成。例如：一个典型的web开发故事，通常需要前端开发工程师、后端开发工程师和测试工程师来协作完成。
敏捷站会有以下作用：
1）对齐目标：互相同步信息，专注于当前迭代目标和近期的相关工作；
2）相互协作：尽快交付工作成果，减少半成本，发现障碍，通过协作消除瓶颈让价值流动。
每日站会的七大特点 同样的时间和地点
每次在相同的时间和地点召开会议能让会议成为团队习惯，更容易开起来。
每天按时召开
如果会议每天都晚五分钟开始，那么准时到场的成员将在一年中浪费20个小时来等待会议开始。
十五分钟以内
站立有助于我们保持时间意识和专注，从而使会议保持简短有效。
识别而不解决问题
遇到需要进一步讨论的话题，站会中不展开，可以约定在站会结束后立即讨论。且仅限于解决问题所需的团队成员。
专注有限主题
团队成员说明自上次站会以来的完成了什么、下一次站会将会完成什么工作、以及是否存在会阻碍他们工作进展的问题。
整个团队同执行
站会由团队成员轮流发起，并共同主持执行。敏捷站会不是一个状态汇报会，参与者提供状态是为了能让团队分享信息和发起可能的协作。
整个团队参与
团队中的每个人都应该参与。团队之外的人应被允许旁观会议。但不鼓励他们在会议期间参与讨论，除非团队成员向他们询问建议。
站会结束前，如果旁观者有问题或意见，部分团队成员可以留下来解答。
每日站会为什么 每日站会的目标
除了是Scrum的有机组成部份以外，每日站会的目的是要频繁检查团队在迭代中的进展如何，尽快反馈。在会议中，团队成员能够提出当前遇到的问题，会后讨论合适的解决方案。每日站会通过互相共享工作进展，使团队成员之间拥有更高的协作度。在极高的透明度之下，PO/PM就能够了解产品进度和用户故事的完成情况。
每日站会，是团队自组织检视迭代进展的协作机制，其主要为了：
检查迭代目标的完成状态； 暴露问题和障碍，使问题和障碍得到及时应对和解决； 计划当天的团队目标和领取工作任务。 我们迭代进展的衡量基准，是“已完成的故事”的故事点数。通常，故事的完成标准，至少是通过测试或PM初步验收。
通常我们会使用燃尽图来分析迭代进度的情况。包括以下要素：
横轴，是时间轴，单位是迭代天数； 纵轴，是剩余工作量，单位为故事点； 进度曲线（蓝色），体现了截止目前，迭代还剩多少故事点数没有完成； 参考线（红色），是分析迭代进展是否正常的参考基准。 如果进度曲线位于参考线上方，则表示进度已经延期。为了控制迭代的进度风险，我们希望能够尽快地完成一个个故事的开发和测试，以便使燃尽图上的进度曲线处于正常状态。每日站会关注的核心焦点是“本次迭代故事的完成情况”以及如何“尽快完成剩下的故事”。
为什么要回答三个问题？
提出三个问题的目的是让团队专注在当前的工作上，并强调在接下来的8小时内我们需要提升专注度和协作。
每日站会怎么开 每日站会的目标是“尽快完成故事”，其组织形式应该是：
通过用户故事来回顾和计划工作； 根据燃尽图来检查进度情况。 我们的每日站会的实践是这样的：
0）发起每日站会：团队成员每天轮流主动发起，保持对自组织站会的主人翁心态。
1）回顾和计划：
团队每人把昨天完成的用户故事在敏捷看板上移动到“Done”的位置，并简单沟通完成的情况； PM和团队对今天要做的故事进行优先级排序选择，并简单澄清。原则上当天站会中准备用户故事点的总数不超过团队开发人员的平均产能之和，故事完成后可以从待办中再拿新的故事； 测试小组把通过测试的用户故事移动到&amp;quot;UAT&amp;quot;的位置，供PM选择进行初验； 是否有阻碍用户故事推进或者影响本次迭代目标实现的障碍，我们写一张障碍卡片并贴在“障碍”栏目。 2）任务领取：
团队成员每人或结对领取当日选中的用户故事； 团队成员共同承担当日测试小组发现的问题并按约定时间修复； 开发负责人最后分配未被领取的用户故事或工程技术改进工作； 直到所有团队成员的工作均以排满；直到所有的障碍都已经有了应对措施。 3）信息发布：
每日站会发起人给敏捷看板拍照并发到敏捷团队微信群；
WIKI上，更新燃尽图，迭代进展情况。如果迭代进度曲线严重落后于参考线，则意味着迭代目标的达成风险较大。这种情况下，我们可能要组织召开一次迭代的重计划会议，确认剩下的工作如何进行调整；
Redmine(购买了敏捷插件)上，更新电子敏捷看板，其信息与物理看板一致，并有统计和图表供参考。
可以参考的实践 尊重团队约定</description>
    </item>
    
    <item>
      <title>责任模型 – The Responsibility Process</title>
      <link>https://leoyanlili.github.io/the-responsibility-process/</link>
      <pubDate>Sun, 20 Dec 2020 02:41:05 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/the-responsibility-process/</guid>
      <description>虽然每个人都在谈论责任,但是在各种情况下,我们都不负责任。
前言 敏捷团队重视责任，敏捷思维和 Scrum文化中最关键的一个部分是责任。 Christopher Avery创建了一个非常好的责任模型，解释了责任如何发挥作用。在长期的进化过程中，人们的大脑得到了训练，能够迅速做出决策。每当出现一个小问题时,大脑将提供如何处理这个问题的选项。
责任流程选项 第一个可能的解决方案：否认，这是人类的大脑的第一反应，通常是：“我已经编码了，我的代码没有问题。” 第二个可能的解决方案：指责，在Scrum环境中，指责可能会指向任何一个人，通常是：“我的代码是正确的，运行不了是他的错。” 第三个可能的解决方案：辩解，人们在没有得到预期结果时，经常使用借口。通常是：“在软件开发中，我们经常碰到技术难题，对吧？事情就是这样。” 第四个可能的解决方案：羞愧，团队遇到问题可能会表示沮丧，通常是：“对于这个产品，我们没有足够的经验，太难了。”。 第五个可能的解决方案：义务，有人告诉他们应该这样做，因此，他们不用理解就这样做了。通常是：“由于Scrum，我们开站会是必需的。” 第六个可能的解决方案：放弃，人们任何时候都可以决定放弃。通常是：“我不会去解决它，这对我来说并不重要。” 第七个可能的解决方案：责任，发生在决定承担责任时，这是责任模型的最终层次。通常是：“下一次，我们可以采用什么方法，这样以后就不会发生同样的事情了？” 写在最后 只有第七个措施才是真正的负责任。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>如何理解并应用精益敏捷Kanban看板</title>
      <link>https://leoyanlili.github.io/understand-kanban/</link>
      <pubDate>Fri, 10 Jul 2020 03:45:18 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/understand-kanban/</guid>
      <description>我引入看板系统的目标是：防止过载、控制工作流的波动性，以及触发渐进式变革。
&amp;ndash;大卫.安德森
看板的基础知识 看板是一种用于管理产品创造的方法，该方法强调持续交付，同时又不增加开发团队的负担。 像Scrum一样，看板是旨在帮助团队更有效地协作的流程。它是一种可视化工作流程的方法。为了在需求与可用产能和瓶颈之间取得平衡，该框架在下面的工作中具有很高的生产率和效率。
临时请求(按需的任务) 计划外工作 生产支持 简要历史 在1940年代后期，丰田公司从超级市场那里找到了更好的工程流程。 他们注意到商店的店员通过商店的库存而不是供应商的库存来补充货品。
只有当一个货品接近售罄时，店员才能进行订购。 超市的“实时”交付流程激发了丰田工程师重新考虑他们的方法，并开创了一种新方法-看板系统-该方法可以使库存与需求匹配，并实现更高的质量和产量水平。
看板，拼写为Kanban，是日语中的“信号板”，表示“可用产能（工作）”。 看板是与精益生产和实时生产（JIT）有关的概念，它被用作排产系统，告诉你要生产什么，何时生产以及要生产多少。看板成为支持整个生产系统运行的有效工具，也是促进改进的很好的方法。
原则 在看板方法上实施软件增量是一个基于拉动的系统，它可以帮助团队以可持续的速度和产能进行交付，减少了工作和时间的浪费。 保证这一点，就需要遵循以下看板的基本原则。
1. 可视化工作
看板工作面板的可视化模型及其工作流程使范围和功能透明化，有助于观察和检查从待办事项到完成的工作流程。 这样会让工作可见，也包括阻塞，瓶颈和队列以及即将进行的工作，这有助于团队制定策略，是继续进行现有的工作或将新工作带入。
2. 限制在制品WIP
团队为看板面板中的所有“进行中”的列共同定义了一个限制，例如分析，开发，测试等。此WIP限制实现了基于拉动的系统，因为只有在该列下的工作总数少于其上限的情况下才可以将工作从上一列拉至当前列。
这有助于平衡基于流的方法，团队不会开始并承担过多的工作。 它减少了浪费，并帮助团队专注于先完成后开始。
3. 聚焦在工作流
要完成一项工作并增加价值，它必须经历其开发过程的多个阶段。 如分析，开发，测试，评审等。为了获得看板的价值，团队需要专注于从启动到完成的工作流程。 通过遵循上面2条原则，可以帮助你专注于流程。
专注于工作流会使团队可视化即将到来的的瓶颈并对其采取行动。 以便保持流动。 团队经常制定工作的策略以优化流程。
把看板和现实生活相关联 我们已经学习了看板的基础知识及其原理，让我们尝试将看板流程与现实生活联系起来。 假设你已经知道并正在实践Scrum，我们将在其中执行定义的时间框的迭代。 我们提交一堆故事，对其进行处理2到3周，然后完成迭代，并再次计划新的一堆故事以进行下一次迭代。 在看板中，我们不会为迭代，时间框或冲刺提交故事。 我们做的有些不同。
在下面的示例中，我们将Scum和看板与现实生活联系起来。 假设人们是故事，放映厅是一次迭代，放映时间是迭代时间。
关联Scrum流程和现实生活 这个案例说明了放映厅中的人员流动，一次是一群人。 如果我们假设人是用户故事，并且将时间显示为迭代或时间框。 然后，你可能会注意到一群人一起在放映厅里走来走去。 我们有明确的座位容量和放映时间。 为每次放映安排的人在放映开始之前已预先计划好了。
关联看板流程和现实生活 这个案例说明了门卫允许公园中的人流是一个接一个的。 如果我们假设人是用户故事，那么公园就是看板面板。 然后，你可能会注意到没有定义的公园放映时间，因为它是24小时开放的。 进入公园或在公园内漫游并出来的人不在同一个人群中。 我们没有容量和演出时间。 但是，公园的管理层决定一次不允许在公园内同时容纳6人以上，以提高公园内人们的舒适度。
在此图中，让我们尝试用Scrum术语关联场景。 如果我们假设人是用户故事，那么在大厅外面等待下次放映的人就是Backlog中的用户故事列表。当前的放映厅放映就是当前Sprint或迭代。观众是冲刺的故事。 显示时间是冲刺持续时间。 放映厅容纳人数是团队对冲刺的产能。 已经看过电影的人是以前冲刺中的“完成”故事，可能已经确定已发布或已部署。
在这里，让我们尝试用上面的图片来映射看板术语。 假设人员是用户故事或任务，公园是可视看板面板。 排队等候在外面的人是当前的看板Backlog。 放映时间没有定义，“最大容量”没有限制，但是管理层决定不允许面板中的故事超过6个。 已经从公园出来的人就是已经可以部署的用户故事。 管理层正在统计出来的故事，以便允许进入新的故事。看板面板(公园)内的故事(人)没有确定的开始或结束日期。
上面图片中进行解释，以解释Scrum流程。
上面图片中进行说明，以解释看板流程。</description>
    </item>
    
    <item>
      <title>「视频」敏捷开发Scrum事件：产品待办事项梳理</title>
      <link>https://leoyanlili.github.io/v-product-backlog-refinement/</link>
      <pubDate>Wed, 13 May 2020 15:47:37 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/v-product-backlog-refinement/</guid>
      <description>如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。
访问以下链接
「视频」敏捷开发Scrum事件：产品待办事项梳理
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」10分钟的敏捷估算教学，全面实用，理解深刻了</title>
      <link>https://leoyanlili.github.io/10-minute-agile-estimation/</link>
      <pubDate>Wed, 29 Apr 2020 04:47:52 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/10-minute-agile-estimation/</guid>
      <description>如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。
访问以下链接
「视频」10分钟的敏捷估算教学，全面实用，理解深刻了
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」让产品的业务更清晰，在敏捷文化中，影响地图的艺术</title>
      <link>https://leoyanlili.github.io/v-impact-mapping/</link>
      <pubDate>Tue, 21 Apr 2020 11:59:12 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/v-impact-mapping/</guid>
      <description>让产品的业务更清晰，在敏捷文化中，影响地图的艺术。另一个很棒的视频在这里。
[https://player.youku.com/embed/XNDY0MjU0MTg0NA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」15分钟，用产品负责人的视角看Scrum敏捷软件开发</title>
      <link>https://leoyanlili.github.io/agile-product-ownership/</link>
      <pubDate>Sat, 18 Apr 2020 08:53:26 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/agile-product-ownership/</guid>
      <description>15分钟，用产品负责人的视角看Scrum敏捷软件开发
[https://player.youku.com/embed/XNDYzNzY5NTc0MA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」敏捷文化中的Scrum是什么？ – 速成班带你深度了解</title>
      <link>https://leoyanlili.github.io/scrum-crash-course/</link>
      <pubDate>Thu, 16 Apr 2020 03:36:39 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/scrum-crash-course/</guid>
      <description>[本视频长度1.5小时] 敏捷文化中的Scrum是什么？ - 速成班带你深度了解
[https://player.youku.com/embed/XNDYxMDk2NjgwMA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」敏捷开发Scrum实践 – 分解用户故事，让产品需求更易落地</title>
      <link>https://leoyanlili.github.io/v-user-story-splitting/</link>
      <pubDate>Tue, 14 Apr 2020 03:52:25 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/v-user-story-splitting/</guid>
      <description>敏捷开发Scrum实践 - 分解用户故事，让产品需求更易落地
[https://player.youku.com/embed/XNDYwMzEwNjI1Ng==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」12分钟，立即就懂，敏捷教练工作的职业发展路径</title>
      <link>https://leoyanlili.github.io/agile-coach-development-path/</link>
      <pubDate>Sun, 12 Apr 2020 10:51:50 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/agile-coach-development-path/</guid>
      <description>12分钟，立即就懂，敏捷教练工作的职业发展路径
[https://player.youku.com/embed/XNDYyOTE3NDA2MA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的文章和视频。</description>
    </item>
    
    <item>
      <title>Scrum：我很好，我不是一个敏捷软件开发框架</title>
      <link>https://leoyanlili.github.io/scrum-is-not-agilesoftware-framework/</link>
      <pubDate>Tue, 25 Feb 2020 04:16:15 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/scrum-is-not-agilesoftware-framework/</guid>
      <description>2019-新冠病毒疫情最新情报速递
Scrum联盟说：Scrum是一组简单但功能强大的原则和实践，可帮助团队在短周期内交付产品，从而实现快速反馈，持续改进和快速适应变化。
许多Scrum专家说：Scrum是一个产品开发框架。
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。公众号与博客持续同步更新。</description>
    </item>
    
    <item>
      <title>聘请Agile Coach前，建议可以先问5个问题</title>
      <link>https://leoyanlili.github.io/5-questions-before-hiring-agile-coach/</link>
      <pubDate>Fri, 21 Feb 2020 13:13:23 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/5-questions-before-hiring-agile-coach/</guid>
      <description> </description>
    </item>
    
  </channel>
</rss>
