<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>管理3.0 on 捷伴行Agile</title>
    <link>https://leoyanlili.github.io/tags/%E7%AE%A1%E7%90%863.0/</link>
    <description>Recent content in 管理3.0 on 捷伴行Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2023 捷伴行Agile</copyright>
    <lastBuildDate>Sun, 20 Dec 2020 02:41:05 +0000</lastBuildDate><atom:link href="https://leoyanlili.github.io/tags/%E7%AE%A1%E7%90%863.0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>责任模型 – The Responsibility Process</title>
      <link>https://leoyanlili.github.io/the-responsibility-process/</link>
      <pubDate>Sun, 20 Dec 2020 02:41:05 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/the-responsibility-process/</guid>
      <description>虽然每个人都在谈论责任,但是在各种情况下,我们都不负责任。
前言 敏捷团队重视责任，敏捷思维和 Scrum文化中最关键的一个部分是责任。 Christopher Avery创建了一个非常好的责任模型，解释了责任如何发挥作用。在长期的进化过程中，人们的大脑得到了训练，能够迅速做出决策。每当出现一个小问题时,大脑将提供如何处理这个问题的选项。
责任流程选项 第一个可能的解决方案：否认，这是人类的大脑的第一反应，通常是：“我已经编码了，我的代码没有问题。” 第二个可能的解决方案：指责，在Scrum环境中，指责可能会指向任何一个人，通常是：“我的代码是正确的，运行不了是他的错。” 第三个可能的解决方案：辩解，人们在没有得到预期结果时，经常使用借口。通常是：“在软件开发中，我们经常碰到技术难题，对吧？事情就是这样。” 第四个可能的解决方案：羞愧，团队遇到问题可能会表示沮丧，通常是：“对于这个产品，我们没有足够的经验，太难了。”。 第五个可能的解决方案：义务，有人告诉他们应该这样做，因此，他们不用理解就这样做了。通常是：“由于Scrum，我们开站会是必需的。” 第六个可能的解决方案：放弃，人们任何时候都可以决定放弃。通常是：“我不会去解决它，这对我来说并不重要。” 第七个可能的解决方案：责任，发生在决定承担责任时，这是责任模型的最终层次。通常是：“下一次，我们可以采用什么方法，这样以后就不会发生同样的事情了？” 写在最后 只有第七个措施才是真正的负责任。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
  </channel>
</rss>
