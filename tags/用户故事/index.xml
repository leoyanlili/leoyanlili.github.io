<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>用户故事 on 捷伴行Agile</title>
    <link>https://leoyanlili.github.io/tags/%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B/</link>
    <description>Recent content in 用户故事 on 捷伴行Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2023 捷伴行Agile</copyright>
    <lastBuildDate>Thu, 03 Feb 2022 06:13:32 +0000</lastBuildDate><atom:link href="https://leoyanlili.github.io/tags/%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>敏捷软件开发工作估算方法 – 故事点和工时</title>
      <link>https://leoyanlili.github.io/storypoint-man-hour/</link>
      <pubDate>Thu, 03 Feb 2022 06:13:32 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/storypoint-man-hour/</guid>
      <description>你如果无法度量它，就无法管理它
&amp;ndash; 彼得.德鲁克
软件开发组织工作估算的思考 我们人类天生不善于估算，要不就是过于乐观，要不就是过于悲观，就是很少有现实主义。尤其是我们软件开发行业，有太多的未知数：技术一直在变；新需求不断涌现；任务之间或人与人之间错综复杂的依赖关系；还有外界环境存在的各种因素。工作量主要与三方面因素有关，任务的规模，任务的复杂度以及完成该任务的人员能力水平。
为什么要做估算？ 第一个原因是帮助我们做出周全的决定。有了估算，我们就知道软件产品清单上的需求是否能在指定的期限实现或需要多久才能完全实现。
第二个原因是设定目标。如果我们给自己制定了一个最后期限，就会全力以赴确保达到目标，当然，也有完全不靠谱的时候。当然，估算和设定目标毫无疑问可以帮助我们保持专注并取得最大成果。
一句话：了解团队在软件开发过程中的客户价值产能、组织投入的成本并做出更合理的交付计划和客户报价。
理解故事点和工时 在很长时间里，工时（人天/人时）是研发团队中的指标，能直接反映出：完成某项工作需要几个人做多长的时间。这一指标确实让许多研发团队获得了评估项目人力成本的基础数据。
然而在实际操作中，开发者的工作几乎无法被标准量化。不同的开发人员，其能力本就有所差距；更重要的是，每一项具体的开发任务，它的规模、复杂度和风险等可能有着巨大差异。仅仅统计工时，并不能反映团队的开发速率。因此，在敏捷开发中，提出了应当用故事点来估算工作量。
1个故事点是1个标准单位的工作量，是对工作规模的相对度量，它估算出的是对于完成此需求所要的开发规模的大小。这个单位并不能直接指代该项需求需要的开发时间。工时是绝对的度量单位，故事点是相对的度量单位。举个例子：在同一个餐桌上，同样是一碗饭，小强10分钟就能吃完了，小美需要20分钟才能吃饭。在这个例子中1碗饭就是标准单位，每个人吃饭的效能是不同的，小强20分钟可以完成2个标准单位，而小美只能完成一个标准单位。在软件开发行业，同样的用户故事，交给不同的人实现，用不同的时间，就表明每个人的产能不同。故事点作为标准单位更客观地衡量了团队产出的客户价值，而工时却无法反映这点。
价值评估和成本评估可以并行 前几天与公司的同事和领导就故事点和工时，这两种敏捷软件开发的工作量度量方式有过一些探讨，在适应公司现状的敏捷开发过程中，我认为故事点和工时两种反映工作量的方式，可以结合使用。对于用户故事（功能需求）的评估，我们用故事点这种相对的规模估算方式，估算过程更容易，更客观，成本更低，故事点可以用来反映迭代中团队的客户价值产能；对于从用户故事分解出来的每个子任务，我们可以请具体开发人员评估任务工时，结合开发人员的单位时间成本，工时可以用来反映组织投入迭代的直接成本。这样既可以遵循敏捷Scrum的实践方法，又可以与公司软件项目以成本管理为目的工时估算对齐。
评估对象 评估方式 采用概念 度量单位 说明 优势 用户故事（需求） 集体评估 价值评估 故事点 story point 用来计算交付的客户价值 数据生成快速，客观；团队共同参与更加全面；绩效的依据 开发任务(用户故事拆分子任务) 个人评估、Leader 核验 成本评估/工时评估 人时或天 man hour/ man day 用来计算组织的投入成本 便于组织的成本管理 用户故事估算方法（PO创建，价值评估） PO、开发团队（含测试/UI同事）共同参与需求澄清 敏捷开发中的估算扑克方式集体估算（故事点） 迭代中根据实际情况商议调整 开发任务估算方法（团队创建，成本评估） 开发团队（含测试/UI同事）共同跨职能分解每个用户故事到若干个具体任务 团队每个人对自己领取的具体任务，根据经验估算并登记（工时） 开发Leader最终核验 故事点评估的优势 故事点标准客观，帮助推动跨职能行为沟通，即团队从UI到DB（任务层面仍然可以估算个人工时） 每人都要参与估算，沟通更加充分，需求理解的更加清晰，提前暴露产品设计的不确定性，避免需求盲点 促进了团队成员之间的融合和互相理解，有助于工作中更好的跨职能协作以及合作完成用户故事开发 相对大小更容易评估，工时却不易评估，如果需要，后期可以转换成团队的平均工时 规模是客观的，故事点估算不会衰减，随着团队的成长，能体现团队迭代速率即产能的变化 通过有足够的迭代或冲刺，可以衡量出团队的开发速率，做出更合理的交付计划和客户报价 小结一下 故事点和工时并不互斥。它们一个用于估算工作复杂度，一个用于估算工作时长。故事点最重要的作用，是团队在产能上形成了一个参考基准。一旦团队通过几次迭代捕捉到了产能容量，就可以此为参考，与产品方、业务方达成交付效率的共识。这样既能避免拍脑袋给计划又给不准的局面，还可用数据可视化地呈现研发团队的效能变化。如果组织把记录的工时当做产出或人效的管理方式，说明组织对目标的管理缺乏掌控或缺乏信心。敏捷开发摒弃只衡量工时的思维，因为工时只代表着一种成本，我们要关注完成需求的速度和质量就足够了，这才是唯一重要的事情。此外，敏捷团队还应该在合作开发的同时，思考如何真正集中力量少量多批次持续输出优先级更高的用户故事。
最后，不论采用故事点还是工时又或者两者结合，都需要每个团队不断探索更适合自己的方式，找到能有效估算并呈现自身产能的最佳道路。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>初创的敏捷团队采用行为驱动开发共创用户故事</title>
      <link>https://leoyanlili.github.io/how-bdd-user-story/</link>
      <pubDate>Thu, 11 Feb 2021 04:36:00 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/how-bdd-user-story/</guid>
      <description>如果说TDD是让我们正确地做事，那么BDD就是让我们做正确的事。
在原本的计划中，2021年农历新年前发布另一篇文章，还是应了计划赶不上变化的这句老话，也算是体现了敏捷的价值观，希望本文对初创敏捷团队有一定的帮助。
维基百科的解释 行为驱动开发（英语：Behavior-driven development，缩写BDD）是一种敏捷软件开发的技术，它鼓励软件项目中的产品负责人、开发者、QA和非技术人员或干系人之间的协作。BDD最初是由Dan North在2003年命名，它包括验收测试和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。BDD介于业务领域和开发领域之间，如下图的位置。
行为驱动开发强调使用领域特定语言描述用户行为，定义业务需求，使需求分析人员、开发人员与测试人员进行沟通的有效方法。领域特定语言，相比自然语言更加精确，又能以符合领域概念的形式满足所谓“活文档”的要求。
行为驱动开发的核心在于“行为”。当业务需求被划分为不同的业务场景，并以“Given-When-Then”的形式描述出来时，就形成了一种范式化的领域建模规约。编写领域特定语言的过程，其实就是不断发现领域概念的过程。因此，团队采用BDD共创用户故事，最重要的产出不是文档，而是提供了团队交流的平台，并在其约束之下完成了领域建模。由于团队的不同角色都参与了这个过程，就保证了领域模型的一致性与准确性。
敏捷开发中的理解 行为驱动开发是一种敏捷开发的技术，想必大多数同学都对敏捷开发领域中另一技术，测试驱动开发（Test-Driven Development，TDD）较为熟悉，BDD是建立在测试驱动开发基础之上。BDD的重点是通过与利益相关者的讨论取得对预期的软件行为的清醒认识。行为驱动开发人员使用混合了领域中统一的语言的母语语言来描述他们的代码的目的，通过用自然语言书写团队成员（业务、产品、开发、测试等）都可以读懂的实例。这让开发者得以把精力集中在代码应该怎么写，而不是技术细节上，而且也最大程度的减少了将代码编写者的技术语言与商业客户、用户、利益相关者、项目管理者等的领域语言之间来回翻译的代价。
敏捷团队面临的交付困境 在软件项目中涉及多人紧密协作，由产品业务讲解功能需求，开发负责代码实现，测试保证软件质量，高质量的沟通对项目成功至关重要。如果在一个项目中业务人员用自己行话，开发人员用技术语言、技术思维去理解业务，在沟通过程难免出现分歧，开发人员就可能按自己的理解去评估和实现了一个错误的功能。
理解需求 敏捷开发团队围绕产品的沟通，大部分都是为了理解需求，从而在业务、开发和测试之间达成共识。用户故事关注的是业务需求而不关注技术，系统业务专家、开发者、测试人员一起合作，分析软件的需求，然后将这些需求写成一个个用户故事。并且，首先开发和发布业务关键的用户故事，尽早为最终用户提供业务价值。
评估与计划 需求理解不一致，验收标准不清晰，就会导致用户故事评估工作的困境，开发人员对故事点的评估就缺少依据。有了上一步需求理解的统一，开发团队与产品负责人在工作量评估上有更坚固的共识，从而管理层在产品计划上，也会有更好的预见性和期望。
测试工作 这样的用户故事可以直接应用到测试中，作为测试的标准文档。我们在做单元测试 时，经常是针对某个函数，或是某个类进行测试，但是被测函数或是被测的类是可能经常变化的，我们的测试案例也需要经常性的随之变化。然而，用户故事描述的是软件的整个系统行为，几近于需求文档，可变性大大减小。因此，测试案例不需要做太大变化。同时，这样的测试案例最贴近于需求，贴近于实际的系统行为。
产品相关文档 经常看到产品在不断的推进，当干系人问起文档的时候，我们却难于启齿。不是因为我们不重视文档，而是我们更重视交付？如果必要的产品说明文档也没有就是有点走极端了。基于BDD 的用户故事，使用几乎近于自然语言的方式描述了软件的行为过程，因此，可以直接作为软件的需求文档。
团队基于BDD共创用户故事 用户故事User Story 用户故事是从用户的角度来描述用户渴望得到的功能。
一个好的用户故事包括三个要素：
角色：谁要使用这个功能 活动：需要完成什么样的功能 商业价值：为什么需要这个功能，这个功能带来什么样的价值 验收条件Acceptance Criteria 验收条件就是一系列可以接受的验收条件或者业务规则，且与功能或feature相互匹配和满足，同时也能被产品负责人和干系人接受。
验收条件可作为验收测试用例的具体例子。这也是我们常说的实例化需求，让抽象的需求变得具体和可测试。
一个用户故事包含若干个验收条件，包括正常场景与异常场景。
场景中的Given…When…Then…实际上就是设定该场景的状态、适用的事件，以及场景的执行结果。
通过这样的用户故事描述和场景设置，基本就完成了一个完整测试的定义。
验收条件的作用：
以用户的视角表达业务交互过程 为PO与用户的需求理解上提供场景化、具象化的沟通 有助于用户体验友好性的识别和改进 PO与团队需求共识的标准和记录 可视化一个用户故事的粗细粒度 开发与测试对功能实现与质量的共识 需求完成边界的限定 比单纯故事点更为直观的工作估算标准 活文档，用户手册(帮助FAQ)的素材 更公平透明的甲乙方的定价标准 举个例子 在农历新年，中国人的习俗中会有很多活动，如果把过年当做一个产品交付，那么会有很多Epics或Feature，过年三十就是其中一个大故事。那么我会基于BDD，写这么一个用户故事（当然，我也可以拆解出一个更小的用户故事：和家人一起吃年夜饭）：
基于BDD写用户故事的优点 BDD为敏捷开发流程提供了许多优势。 BDD 提供业务关键功能，通过高效的协作和沟通推动产品成功。
提高开发效率 帮助开发人员、测试人员与PO对需求的理解在同一个平面上，帮助团队快速构建和交付更多有价值和高质量的产品，减少返工和修改可降低维护成本。
提高测试效率 帮助测试人员准备测试用例，并进行符合验收条件的用户故事测试。
正反馈循环 以用户故事为中心，用验收条件填补PO-开发-测试之间的认知鸿沟，进行需求拉通与协作对齐。由于所有团队都对应用程序有共同的理解，因此开发人员可以更快地获得反馈，以增强应用程序并走上正轨。
用户体验 从用户角度定义功能使设计人员和开发人员能够从最终用户的角度进行思考，以解决用户难题。 创造了内在的业务价值和增强的客户体验。
文档生成 帮助PO在日常的迭代开发中逐步完善整理产品需求，提升实战性用户故事和验收标准的编写技巧。组织产品PRD文档的信息来源。
写在最后 通过上面的了解，我们知道了行为驱动开发很大意义上是一个PO、开发、测试共创的一个行为。同时也是一个自然而然的过程，我们可以使用行为驱动开发的人类语言描述方法来编写我们的用户故事。行为驱动开发，还需要打破传统的魄力，因为之前几乎没有人会告诉你用户故事写的可以跟逻辑代码一样，作为从代码到需求的桥梁。当你习惯BDD，编写用户故事会变得非常好玩。行为驱动开发，可以使你的测试更加贴近实际的用户行为，从而找到系统的问题所在。
如果你要做完整BDD的话，可以看下面的彩蛋部分。祝各位新年快乐，万事如意！</description>
    </item>
    
    <item>
      <title>敏捷开发框架Scrum工件-冲刺/迭代燃尽图（上篇）</title>
      <link>https://leoyanlili.github.io/sprint-burndown-chart/</link>
      <pubDate>Tue, 14 Apr 2020 12:44:21 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/sprint-burndown-chart/</guid>
      <description>《系统之美》
前言，在本文中，我们将从以下几点了解有关燃尽图的详细内容（上篇为主题1-3）：
&amp;lt;div class=&amp;quot;wpb_single_image wpb_content_element vc_align_center&amp;quot;&amp;gt; &amp;lt;figure class=&amp;quot;wpb_wrapper vc_figure photoswipe-item photoswipe-wrapper&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;alignnone size-large wp-image-1004&amp;quot; src=&amp;quot;https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1.jpg&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;760&amp;quot; height=&amp;quot;428&amp;quot; srcset=&amp;quot;https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1.jpg 1024w, https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1-300x169.jpg 300w, https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1-768x432.jpg 768w, https://www.agilewalker.com/wp-content/uploads/2020/04/Insecption_Burndown-1024x576-1-355x199.jpg 355w&amp;quot; sizes=&amp;quot;(max-width: 760px) 100vw, 760px&amp;quot; /&amp;gt;&amp;lt;/figure&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_text_column wpb_content_element &amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;wpb_wrapper&amp;quot;&amp;gt; &amp;lt;p&amp;gt; &amp;amp;nbsp; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 如果你查看上面的图片，会注意到团队有产品待办事项，在处理sprint待办事项期间，团队提交几个用户故事，然后团队成员分配了任务，对于每个任务，每个成员消耗的是估计的工作时间。到目前为止，已经为冲刺提交了一些故事，每个故事都有一些任务，这些任务的估计时间是小时，并且每个任务都分配给了胜任的团队成员。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 如果总计工作时间，则大约为110小时。假设团队的能力为130小时。&amp;lt;br /&amp;gt; 让我们看一下sprint的另一个重要方面，有一个sprint起始日期为12月10日，它的结束日期为12月21日，这意味着是两个星期的sprint，并且sprint的持续时间为10天。&amp;lt;br /&amp;gt; 因此，从所有这些信息中，开始绘制燃尽图 &amp;lt;/p&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;Total Days of the sprint = 10 days&amp;lt;/strong&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;Total committed &amp;amp; estimated task hours for the team = 110 Hours&amp;lt;/strong&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;p&amp;gt; 如果将总小时数除以总天数平均值（110/10）= 11小时。&amp;lt;br /&amp;gt; 也就是说，如果团队每天完成11个小时的工作，那么在冲刺的最后一天结束时，团队将能够完成他们已经完成的所有工作。&amp;lt;br /&amp;gt; 请参考下面的图片，然后按照说明进行操作以更好地理解它。 &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;wpb_single_image wpb_content_element vc_align_center&amp;quot;&amp;gt; &amp;lt;figure class=&amp;quot;wpb_wrapper vc_figure photoswipe-item photoswipe-wrapper&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;alignnone size-large wp-image-1003&amp;quot; src=&amp;quot;https://www.</description>
    </item>
    
    <item>
      <title>「视频」敏捷开发Scrum实践 – 分解用户故事，让产品需求更易落地</title>
      <link>https://leoyanlili.github.io/v-user-story-splitting/</link>
      <pubDate>Tue, 14 Apr 2020 03:52:25 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/v-user-story-splitting/</guid>
      <description>敏捷开发Scrum实践 - 分解用户故事，让产品需求更易落地
[https://player.youku.com/embed/XNDYwMzEwNjI1Ng==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>「视频」敏捷软件开发的用户故事，你了解么？产品需求获取的一把利器</title>
      <link>https://leoyanlili.github.io/v-understand-user-story/</link>
      <pubDate>Tue, 14 Apr 2020 03:34:58 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/v-understand-user-story/</guid>
      <description>敏捷软件开发的用户故事，你了解么？产品需求获取的一把利器
[https://player.youku.com/embed/XNDYwMjQyNTI2MA==]
—
END
希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
    <item>
      <title>XP里故事要INVEST和任务要SMART</title>
      <link>https://leoyanlili.github.io/story-invest-smart/</link>
      <pubDate>Sun, 16 Feb 2020 16:20:24 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/story-invest-smart/</guid>
      <description> </description>
    </item>
    
  </channel>
</rss>
