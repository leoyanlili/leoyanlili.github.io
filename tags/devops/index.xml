<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on 捷伴行Agile</title>
    <link>https://leoyanlili.github.io/tags/devops/</link>
    <description>Recent content in DevOps on 捷伴行Agile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2023 捷伴行Agile</copyright>
    <lastBuildDate>Sat, 23 Apr 2022 12:10:41 +0000</lastBuildDate><atom:link href="https://leoyanlili.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「视频」运维自动化之Ansible入门</title>
      <link>https://leoyanlili.github.io/video_ansible_entry/</link>
      <pubDate>Sat, 23 Apr 2022 12:10:41 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/video_ansible_entry/</guid>
      <description>[https://player.youku.com/embed/XNTg2NzEzNjYyNA==]
视频链接</description>
    </item>
    
    <item>
      <title>谈我们的研发运维一体化交付模式</title>
      <link>https://leoyanlili.github.io/about-devops-delivery/</link>
      <pubDate>Mon, 27 Dec 2021 14:36:34 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/about-devops-delivery/</guid>
      <description>物有本末，事有始终，知所先后，则近道矣。
&amp;ndash; 《大学》
[TOC]
一、说在前面的话 本文旨在记录下本人与同事，同行，以及相关领导关于研发运维一体化，架构优化与创新问题所进行的无数对话，讨论的内容，通过这些对话与讨论，很多人为本文提供了有价值的输入。
在经历了产品研发团队工作1年多的时间和开发运维团队工作6个月的时间之后，想起应该说下我们研发运维一体化技术那点事儿。每个人从不同的视角看的感受肯定不尽相同，通过本文分享下我的理解，希望大家在此有一个彼此碰撞的机会，产生更好的思考。
任何成功的架构都是适合企业自身的架构。形成过程中的挫折再所难免，非常感谢公司管理层看到我们不断的改进，交付向好的趋势，坚定地给予了团队足够的技术战略支持和耐心。CTO带领我们大家在一年半时间里，通过无数次碰撞，碰壁，不断修正中形成了当前的研发运维一体化的技术架构和协作模式，并且还在持续地改进中，印证了那句话：成功不是终点，失败也不是末日。
业务目标必须是驱动IT变革的原因，而原因又会驱动IT变革的方式。面对客户的业务，要求我们产品交付过程要更加优化，要更加敏捷，适应变化，对客户要更具有响应力，利用更少的资源做更多的事情，更高效、更快速、更高质的交付；我们要创新，吸引并发展客户群体，针对市场，灵活应变。这些是变革需求产生的驱动力，是实现开发运维实施效益的工作动机。
二、产品研发运维架构 当今，基于微服务、容器化和DevOps的云原生应用架构得到了越来越多的关注。 微服务通过将复杂的系统进行解耦从而使业务功能的修改和增加变得更加容易。专注业务的微服务技术，将一组提供少量功能的服务集合整合到一起，这些系统的整体功能来自多个服务，基于此架构能最小化团队间显示协作的需求，最大化独立部署服务的能力；容器技术提供了很好的横向扩/缩容与自愈能力；保驾护航的DevOps方法，源于敏捷开发，保证了所有环境的一致性，持续集成、持续交付（每次交付都是随时可以部署的）、持续监控、持续反馈，更加有条不紊。 产品研发运维一体化工具集（图），带标记的是我们实际在用的开源工具，产品研发中心在用的工具链覆盖软件产品研发运维的全生命周期的主要方面，工具来自免费的开源社区，目的是促进良好的协同、高效的交付、不断改进工程能力，目前主要致力于以下几方面： &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224155225202.png&amp;quot; alt=&amp;quot;image-20211224155225202&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 流水化集成和部署：自助式的图形化发布操作直观简易，开发人员可以有更多的时间在业务实现上，减少代码提交和部署之间的时间；配合敏捷迭代，每天N次快速发布。 镜像化管理和交付：客户发布有镜像仓库，本地研发有镜像管理；图形化管理镜像和容器更高效，镜像保证所有环境的一致性；大幅提升环境的运维的效率。 可视化监控和告警：研发环境监控、客户应用监控、应用日志监控、故障即时告警；在客户发现问题前响应问题，团队再也不会后知后觉，缩短响应周期，提升客户服务质量。 代码化基础架构：Jenkins脚本，负责代码集成与构建，发布本地研发环境或推送镜像仓库；Docker脚本，负责应用镜像的生成，容器运行；Shell脚本，负责客户生产环境部署，数据和文件备份，数据迁移，收集监控数据；这些代码消除了重复命令行操作，提升运维效率，代码生成一致可维护的基础架构环境，帮助开发人员专注于业务代码实现。 文档化操作流程：包括基础环境搭建，应用环境部署，业务数据备份，租户数据迁移；研发交付流程更清晰，节省人员工作交接的时间，避免人员单点故障，提高知识传递的效率；目录化也帮助操作过程的标准化。 产品研发运维一体化架构（图）在我们产品研发交付中，利用已经建立的工具链，遵循开发运维的基础架构即代码的方式，以统一的配置和代码，产生一致的服务基础环境，提供给客户业务应用服务，根据部署不同环境的迁移标准，自动化部署到开发环境，测试环境，准生产环境和客户生产环境。 &amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/reachsys/imagebed/master/blog/image/202104/image-20211224151744758.png&amp;quot; alt=&amp;quot;image-20211224151744758&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt; 实现持续交付所需的架构转换使功能变更得以按照小批次进行交付，这些变更包括开发到运维完整周期的所有代码，配置，基础设施，数据，脚本，部署流程等的变更。 架构支持多钟交付方式，其中以云端SAAS交付和客户私有化交付两种方式最常用，SAAS交付通过持续交付流水线快速完成敏捷迭代后的更新，私有化交付是通过持续交付流水线完成客户应用镜像并上传云端镜像仓库，然后从客户服务器进行授权的镜像拉取，在线部署，十分便捷。 我们对业务环境的应用服务进行实时健康状态监控和日志记录，并会对生产环境的业务数据以及文件进行全量和增量备份。 三、产品研发运维协作 产品研发运维活动协作（图）中我们每个团队都有一定的工作边界，这种边界不会泾渭分明，基于组织战略，在交付活动中是共同融合的，这样可以保障工作中的衔接更加顺畅，不会有断层，彼此都了解相关的工作情况，能让更多的人有面对问题的知识储备。我们并不以团队职能划分进行协作，而是以交付活动本身聚合各个团队的能力进行跨职能的敏捷团队协作，目的是尽早发现并解决交付的质量问题。 * 产品研发活动前移对接客户需求；质量保证活动前移，一方面，测试人员在需求上前移与项目交付合作接近客户，另一方面，开发人员在开发中引入测试驱动开发，让质量工作前移，从代码编写的过程中就开始；开发运维即DevOps活动顾名思义，在工作中前移对接开发，意味着不仅需要治理研发的环境，还要对研发出来的软件产品架构和代码有一定的了解，以便更好的完成运维工作。 * 项目交付活动是最接近客户价值的活动，而客户价值活动是和我们的业务视角对齐，产品研发到测试再到项目实施，开发运维工作贯穿始终，研发运维一体化就是用敏捷开发方法论结合DevOps技术实践，助力研发交付流水线的提升，开发和运维都希望能尽快迭代，不需要约定某个特定的时间，流水线时刻可以接受发布任务。如果迭代开发，我们每两周发布一次生产环境，我们每天都要有若干次的测试环境部署，更多次的开发环境部署。协同交付和持续反馈，是实现持续改进和质量保障的必要条件。&amp;lt;/ol&amp;gt; ### 四、带给研发的价值 1. 良好的代码版本管理（图），可以随时为部署任一版本的客户进行热修复 * 持续部署流水线，允许开发人员一键自助式部署到被授权的任一环境，如果在研发环境中，仅需几分钟即可完成一次部署；我们的私有镜像仓库，允许研发或运维人员从远程为客户环境进行自助式的私有化部署，仅仅需要执行1个部署脚本，业务应用服务的便会自动更新，排除网络影响，每个微服务组件的发布仅需1-3分钟，整个业务应用的发布在15分钟内可以完成。可以很快对迭代功能进行在部署环境下的验证。 * 可视化的监控，包括环境监控、应用监控、系统监控，团队可以快速获得反馈，随时改进，更少的意外问题和救火行为，意味着我们有时间做更多的技术架构提升和产品功能迭代。 * 研发环境、业务环境的数据安全，定时自动备份，产品研发数据备份，研发基础环境数据备份，客户业务数据备份，保护了我们的无形资产。 * 基础设施即代码，开发应用程序一样开发基础设施代码，运维代码和研发代码都在版本控制管理之下。上线一个虚拟环境或一个环境的新版本，就变成执行脚本的过程，脚本可以创建并提供一个或一组镜像，完成从操作系统到应用服务集的部署与配置。过去几个小时甚至几天才能完成的工作，现在只要几分钟。&amp;lt;/ol&amp;gt; ### 五、带给组织的价值 1. 专业的技术框架和研发流程，更具有行业的影响力和承诺客户的信心。 2. 根据组织的业务计划，有持续可评估的交付计划，能够敏捷以及快速响应客户反馈，成功交付。 3. 更高效的主动运维服务，持续监控，团队可以在问题影响客户业务之前，及时解决，保障客户满意度。 4. 更低的交付成本和运维成本，组织持续投入的DevOps活动，从而确保标准化、流程化的业务应用和研发环境治理，无需任何定制和人工重复的浪费，更加精益。 5. 敏捷文化的方法和技术落地，有效的传播，让更多的团队从中受益。 ### 六、带给客户的价值 1. 从容应对快速变化的业务需求，可以做到对业务的无感知更新，保障业务连续性。整个热部署、快速部署过程从变更的源代码提交到客户业务人员手中的可以使用的功能，在10分钟左右可以完成。 2. 保证业务数据安全，每天都有定时的自动全量和增量的备份，可以做到从故障中快速恢复业务的容灾恢复能力。 3. 统一平台的可视化监控、应用运行日志、故障告警即时提醒，客户关心的一切，尽在掌握。 ### 七、走向未来的路 前面看到本文的主标题，我们这里说的不是单纯的从速度维度来说越快越好，产品研发交付会思考：如何在质量保证，客户满意前提下，合理的快。先想在哪方面快，再讨论怎么快，最后再说有多快。 敏捷或速度的诉求是研发运维一体化存在的第一性原理。我们持续改进的方向主要在三方面：产品功能开发，开发运维环境，组织协作流程。诸如敏捷、开发运维这样的新方法，以及云计算、微服务这样的新技术，加速催生了新的IT能力。在整个组织内实施研发运维一体化，让团队变得更加敏捷、高效及创新。技术架构面临的挑战是未来业务多变，速度要快和稳定性要高，系统更复杂。 我们着眼当前的产品交付工作，努力提升团队满意度，组织满意度和客户满意度；保持短期日常改进工作，做好质量化开发，流水化部署，容器化交付，可视化监控，代码化基础架构，自动化运维；坚持做好未来长期的规划，目标就是：帮团队增效，帮公司降成本，保障客户业务持续价值。 2021年即将过去，2022年很快来到，关于开发运维团队接下来推进的几个主要方向上的工作如下： 1.</description>
    </item>
    
    <item>
      <title>我们的DevOps如何让客户生产环境从“0”到完全恢复</title>
      <link>https://leoyanlili.github.io/devops-from-0-to-done/</link>
      <pubDate>Sun, 14 Nov 2021 09:17:17 +0000</pubDate>
      
      <guid>https://leoyanlili.github.io/devops-from-0-to-done/</guid>
      <description>人能弘道，非道弘人
&amp;ndash; 论语.卫灵公
危与机的开始 最近工作有些吃力，11月4日当天特意请了两小时假，提前下班，吃完晚饭刚坐下来，打算简单看个电影，然后好好睡一觉恢复下体力。不想发生了一次突发事件。
19:43，有同事在群里问是否能连上客户的服务器，一开始也没有太当一回事，服务器连不上也许只是网络暂时情况。
20:26，刘博在群里紧急拉DevOps的同事入群，心里咯噔一下，看来是出了点状况，赶紧坐到电脑前开始关注群里的沟通。
20:36，一阵急促的电话声，刘博来电，果然事情有点不太妙，新资产的应用服务器重启后就无法启动，应该是宕机了，DevOps团队需要全员上线应急恢复服务器应用环境，崔总开始协调第三方系统集成供应商恢复服务器的基础操作系统，幸运的是目前只有新资产系统的应用服务器宕机，数据服务器安然无恙，刘博指示先备份数据服务器上的所有相关数据，以防万一。
20:50，我们开始等待第三方供应商完成服务器操作系统的重新安装，同时内部分配每个人的VPN账号，进行数据库和文件存储的备份。
21:36，参考之前准备的资产系统部署手册，团队基本明确了针对客户新资产平台应用服务器恢复的具体分工。
台上三分钟，台下十年功 22:00，第三方把服务器安装完毕，经过漫长的等待轮到我们正式开工上场了，之前小杨在公司WIKI上准备的部署文档有了用武之地，这是我们应用服务器环境恢复的参考流程，刘博又帮我们捋了一下思路，排除一些本次系统恢复不必要做的步骤，于是最终需要做得只是一部分，而且有了之前工作积累的经验和成果，这一切使大家有信心可以很快完成。
插播一下DevOps之前的部分工作：
目前我们持续交付流水线可以实现一键发布，将资产系统的客户业务应用镜像上传到公司的私有云，这就是我们对客户的镜像仓库，在这里我们维护了每次交付给客户业务应用的不同版本，配合几个已经准备好的，放在私有云上，占用很少存储空间的启动脚本，可以提前下载到客户服务器上执行，进行统一的自动化部署，可以实现在客户服务器上完成快速部署。
简单科普一下镜像的概念，大家可以把它理解成一个不依赖于操作系统环境的业务应用的小盒子，我们可以利用若干个这样的小盒子以及它们之间形成的关系，在任何服务器和操作系统中搭建出一套一致的业务应用系统。能节省大量的问题解除过程。运行起来的镜像，我们称之为一个特定的容器。我们资产的平台是由几个不同的镜像组合而成，就像人的身体不同部位，只有共同上线成为运行容器才能协同一致工作，表现出一个完整的人的能力，缺一不可。
22:43，小邵，一位新加入DevOps团队不久，根据个人的经验以及部署文档完成平台基础环境的搭建。
23:11，小杨，一位在DevOps团队成长迅速的实习生，利用提前准备的部署脚本下载并重启所有的公司私有云镜像仓库中的资产的业务应用镜像，当这些镜像在客户服务器运行起来后，整个资产业务系统就运行起来了。
23:30，小杨在群里发了系统恢复后的新资产系统的界面截图，宣告了我们这次紧急系统恢复的成功。大家在群里简单总结了一下，互相感谢后道声晚安，结束了这次紧张的紧急恢复工作。
这次危机的解除实际工作时间仅为1.5个小时，算上前期的准备工作也就2个小时不到，这是对我们之前积累的一种自我认可，也是各位领导与团队一起协作的共同成果。
DevOps团队搭建的持续集成和持续交付流水线帮助产品研发团队轻松实现每日多次的自动化构建及发布，使得随时可以把新开发出来的功能特性交付给测试团队和最终用户成为现实，大大提升了对客户响应能力，缩短了交付反馈环，这在以前没有持续部署或发布的研发技术条件下是无法想象的。当然后面我们还有很多改进的空间。
最后，鉴于这次突发事件，我们向客户提出申请异地备份服务器，同时建议有条件的话一定要有定期的整机备份机制。
其大无外，其小无内 我们先来看个问题，企业需要实施DevOps的情况：应用上线（哪怕是改动一行代码）需要多长时间？
大家认为一般的周期通常是月、周、天、小时？如果大家发布周期在周级别，还有大量的工作靠人工执行，我们需要尽快引入DevOps了。
这是来自维基百科的解释，“DevOps是一组过程、方法与系统的统称，用于促进开发、运维部门之间的沟通、协作与整合。DevOps是提倡开发和IT运维之间的高度协同，从而在完成高频率部署的同时，提高生产环境的可靠性、稳定性、弹性和安全性。”
现在的软件开发已经不同于过去，产品要适应瞬息万变的市场，分工日益细化，一个成熟软件的规模已经不能奢望每个人成为全栈工程师能支撑得了的。尤其是对旨在于为了提高交付效率和伸缩能力的新的技术架构出现后，DevOps也随着敏捷文化的发展而融入越来越多软件组织的日常运营之中。DevOps小到掌握特定技术点，维护每个文档的细节，大到参与对研发工作规范的制定，传播对组织文化和价值观，把握DevOps的工作流程，提升软件组织的交付效能和客户满意度。涵盖从需求，开发到运维，反馈的整个过程，可以跨越团队，公司，甚至合作伙伴以及客户各方。这些都将纳入DevOps的日常工作和未来规划的视野里。
低头做事，抬头看路 应对危机，对他人而言也许是需要立刻解决的“危险”，但对DevOps而言，给了我们验证和改进工作的“机会”，是对我们平时工作积累之后的一种检验和反馈的过程，也为日后保障逐步建立一套成熟的因地制宜的流程和机制。在DevOps，我们不仅要低头做好眼前事，还要抬头看好远方路。不仅需要做好日常的事务性的工作，支持好组织的项目交付，还要建立工作规范和流程，技术能力和文档，通过具体工作支持其他团队在组织内部获得更多彼此了解的机会，更重要的是在这个过程中要做好敏捷转型的排头兵。
DevOps的长远的目标是自动化一切，监控一切，可视化一切，尽可能减少人工参与带来的不确定性从而引入更多的风险。在技术层面，我们形成持续编译、自动化测试、持续部署的能力；提升基础设施即编码的能力，将基础环境可编程化，项目团队成员可以自助获取；目前规划是先做好持续集成，持续交付和部署，根据痛点逐步优化，完善监控能力，以后还会做ChatDevOps，实现机器人值守。
简陋的笔，精彩的事 从本文开始的名言中，不难看出古代先贤也试图告诉后人：要成事，最重要的不是工具和方法，而是合适的人，只有人才能基于价值观和原则，把工具和方法运作在适配于自身企业的流程之中。这一点与敏捷宣言有异曲同工之妙。受限于我自身的笔头水平，无法详细说出这次紧急系统恢复事件中身临其境的精彩，不过无论如何我希望能尝试去记录这样一次DevOps作为主角所经历的故事。
加入DevOps团队的这段时间，我个人额外的感悟是DevOps不做人人眼中的战斗英雄或者救火队员，而是成为默默无闻的守护者。让外界感到风平浪静，才是我们作为守护者存在意义。DevOps团队大部分的时间是在为了避免发生危机而不断地思考和准备，静下来做好DevOps工作的心态应该是”行到水穷处，坐看云起时“。
—
END
感谢你阅读本文，希望能在评论区学习到大家的经验和想法~
如果对相关内容感兴趣可以关注我的公众号：捷伴行Agile。会有更多更及时的内容与君分享。</description>
    </item>
    
  </channel>
</rss>
